{
  "app.jsx": "import React, { useEffect, useState } from 'react';\nimport { IonPage, IonContent, IonHeader, IonToolbar, IonTitle, IonButtons, IonButton, IonIcon } from '@ionic/react';\nimport { home, statsChart } from 'ionicons/icons';\nimport { useRitualStore } from './store/ritualStore';\nimport Welcome from './components/Welcome';\nimport EmotionCheck from './components/EmotionCheck';\nimport AICoach from './components/AICoach';\nimport FocusTimer from './components/FocusTimer';\nimport styles from './styles/App.module.css';\n\n/**\n * Focus Ritual Coach - ‰∏ªÂ∫îÁî®ÁªÑ‰ª∂\n * \n * Â∏ÆÂä©Áü•ËØÜÂ∑•‰ΩúËÄÖÊûÑÂª∫Êó•Â∏∏‰∏ìÊ≥®‰ª™ÂºèÁöÑÂ∫îÁî®\n * ÊµÅÁ®ãÔºöÊ¨¢Ëøé -> ÊÉÖÁª™Á≠æÂà∞ -> AI ÊøÄÂä± -> ‰∏ìÊ≥®ÂÄíËÆ°Êó∂\n */\nexport default function App() {\n    const { currentRitual, initialize, setRitualStep, updateEmotion, setTasks, setAIAdvice, completeRitual, resetRitual } = useRitualStore();\n    const [initialized, setInitialized] = useState(false);\n\n    useEffect(() => {\n        initializeApp();\n    }, []);\n\n    const initializeApp = async () => {\n        await initialize();\n        setInitialized(true);\n    };\n\n    const handleStartRitual = () => {\n        setRitualStep('emotion');\n    };\n\n    const handleEmotionComplete = ({ emotion, energy, note }) => {\n        updateEmotion(emotion, energy, note);\n        setRitualStep('coach');\n    };\n\n    const handleCoachComplete = ({ tasks, aiAdvice }) => {\n        setTasks(tasks);\n        setAIAdvice(aiAdvice);\n        setRitualStep('focus');\n    };\n\n    const handleFocusComplete = () => {\n        completeRitual();\n    };\n\n    const handleGoHome = () => {\n        resetRitual();\n    };\n\n    if (!initialized) {\n        return (\n            <IonPage>\n                <IonContent className={styles.content}>\n                    <div className={styles.loading}>\n                        <p>Loading...</p>\n                    </div>\n                </IonContent>\n            </IonPage>\n        );\n    }\n\n    return (\n        <IonPage>\n            <IonHeader>\n                <IonToolbar>\n                    <IonTitle>Focus Ritual Coach</IonTitle>\n                    {currentRitual.step !== 'welcome' && (\n                        <IonButtons slot=\"end\">\n                            <IonButton onClick={handleGoHome}>\n                                <IonIcon icon={home} />\n                            </IonButton>\n                        </IonButtons>\n                    )}\n                </IonToolbar>\n            </IonHeader>\n            <IonContent className={styles.content}>\n                {currentRitual.step === 'welcome' && (\n                    <Welcome onStart={handleStartRitual} />\n                )}\n                {currentRitual.step === 'emotion' && (\n                    <EmotionCheck onComplete={handleEmotionComplete} />\n                )}\n                {currentRitual.step === 'coach' && (\n                    <AICoach\n                        emotion={currentRitual.emotion}\n                        energy={currentRitual.energy}\n                        note={currentRitual.note}\n                        onComplete={handleCoachComplete}\n                    />\n                )}\n                {currentRitual.step === 'focus' && (\n                    <FocusTimer onComplete={handleFocusComplete} />\n                )}\n            </IonContent>\n        </IonPage>\n    );\n}",
  "components/AICoach.jsx": "import React, { useState, useEffect } from 'react';\nimport {\n  IonButton,\n  IonCard,\n  IonCardContent,\n  IonCardHeader,\n  IonCardTitle,\n  IonSpinner,\n  IonChip,\n  IonIcon,\n  IonInput,\n  IonItem,\n  IonList,\n} from '@ionic/react';\nimport { sparkles, checkmarkCircle, add, close } from 'ionicons/icons';\nimport { generateCoachAdvice } from '../services/coachService';\nimport { saveRitualHistory } from '../services/dataService';\nimport styles from '../styles/AICoach.module.css';\n\nexport default function AICoach({ emotion, energy, note, onComplete }) {\n  const [advice, setAdvice] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState('');\n\n  useEffect(() => {\n    loadAdvice();\n  }, []);\n\n  const loadAdvice = async () => {\n    setLoading(true);\n    try {\n      const generatedAdvice = await generateCoachAdvice({\n        emotion,\n        energy,\n        tasks,\n      });\n      setAdvice(generatedAdvice);\n    } catch (error) {\n      console.error('Failed to generate advice:', error);\n      setAdvice({\n        motivation: 'ÊØè‰∏ÄÊ¨°‰∏ìÊ≥®ÈÉΩÊòØÊàêÈïø',\n        action: 'ËÆ©Êàë‰ª¨ÂºÄÂßãÁ¨¨‰∏Ä‰∏™Â∞è‰ªªÂä°',\n        focusTip: '‰øùÊåÅÂëºÂê∏ËäÇÂ•èÔºå‰∏ìÊ≥®ÂΩì‰∏ã',\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAddTask = () => {\n    if (newTask.trim() && tasks.length < 3) {\n      setTasks([...tasks, newTask.trim()]);\n      setNewTask('');\n      // Ê∑ªÂä†‰ªªÂä°ÂêéÈáçÊñ∞ÁîüÊàêÂª∫ËÆÆ\n      setTimeout(() => loadAdvice(), 500);\n    }\n  };\n\n  const handleRemoveTask = (index) => {\n    setTasks(tasks.filter((_, i) => i !== index));\n    setTimeout(() => loadAdvice(), 500);\n  };\n\n  const handleContinue = async () => {\n    // ‰øùÂ≠ò‰ª™ÂºèÂéÜÂè≤\n    await saveRitualHistory({\n      emotion,\n      energy,\n      note,\n      tasks,\n      aiAdvice: advice,\n    });\n    \n    onComplete({ tasks, aiAdvice: advice });\n  };\n\n  return (\n    <div className={styles.container}>\n      <IonCard className={styles.card}>\n        <IonCardHeader>\n          <div className={styles.header}>\n            <IonIcon icon={sparkles} className={styles.headerIcon} />\n            <IonCardTitle>AI ‰ª™ÂºèÊïôÁªÉ</IonCardTitle>\n          </div>\n        </IonCardHeader>\n        <IonCardContent>\n          {loading ? (\n            <div className={styles.loadingContainer}>\n              <IonSpinner name=\"crescent\" />\n              <p className={styles.loadingText}>Ê≠£Âú®‰∏∫‰Ω†ÁîüÊàêÂª∫ËÆÆ...</p>\n            </div>\n          ) : (\n            <>\n              <div className={styles.adviceSection}>\n                <div className={styles.motivationCard}>\n                  <h3 className={styles.motivationLabel}>üí´ ÊøÄÂä±</h3>\n                  <p className={styles.motivationText}>{advice?.motivation}</p>\n                </div>\n\n                <div className={styles.actionCard}>\n                  <h3 className={styles.actionLabel}>üéØ Ë°åÂä®Âª∫ËÆÆ</h3>\n                  <p className={styles.actionText}>{advice?.action}</p>\n                </div>\n\n                {advice?.focusTip && (\n                  <div className={styles.tipCard}>\n                    <h3 className={styles.tipLabel}>üí° ‰∏ìÊ≥®Â∞èÊäÄÂ∑ß</h3>\n                    <p className={styles.tipText}>{advice?.focusTip}</p>\n                  </div>\n                )}\n              </div>\n\n              <div className={styles.tasksSection}>\n                <h3 className={styles.sectionTitle}>‰ªäÊó•‰∏â‰ª∂‰∫ã</h3>\n                <IonList className={styles.taskList}>\n                  {tasks.map((task, index) => (\n                    <IonItem key={index} className={styles.taskItem}>\n                      <IonIcon icon={checkmarkCircle} slot=\"start\" color=\"success\" />\n                      <span className={styles.taskText}>{task}</span>\n                      <IonIcon\n                        icon={close}\n                        slot=\"end\"\n                        onClick={() => handleRemoveTask(index)}\n                        className={styles.removeIcon}\n                      />\n                    </IonItem>\n                  ))}\n                </IonList>\n\n                {tasks.length < 3 && (\n                  <div className={styles.addTaskContainer}>\n                    <IonInput\n                      placeholder=\"Ê∑ªÂä†‰∏Ä‰∏™‰ªªÂä°...\"\n                      value={newTask}\n                      onIonChange={(e) => setNewTask(e.detail.value)}\n                      onKeyPress={(e) => e.key === 'Enter' && handleAddTask()}\n                      className={styles.taskInput}\n                    />\n                    <IonButton\n                      onClick={handleAddTask}\n                      disabled={!newTask.trim()}\n                      size=\"small\"\n                    >\n                      <IonIcon icon={add} slot=\"icon-only\" />\n                    </IonButton>\n                  </div>\n                )}\n              </div>\n\n              <IonButton\n                expand=\"block\"\n                onClick={handleContinue}\n                className={styles.continueButton}\n              >\n                ÂºÄÂßã‰∏ìÊ≥®\n              </IonButton>\n            </>\n          )}\n        </IonCardContent>\n      </IonCard>\n    </div>\n  );\n}\n\n",
  "components/EmotionCheck.jsx": "import React, { useState } from 'react';\nimport {\n  IonButton,\n  IonCard,\n  IonCardContent,\n  IonCardHeader,\n  IonCardTitle,\n  IonTextarea,\n  IonRange,\n} from '@ionic/react';\nimport styles from '../styles/EmotionCheck.module.css';\n\nconst EMOTIONS = [\n  { value: 'happy', label: 'üòä ÊÑâÊÇ¶', color: '#ffd93d' },\n  { value: 'calm', label: 'üòå Âπ≥Èùô', color: '#95e1d3' },\n  { value: 'anxious', label: 'üò∞ ÁÑ¶Ëôë', color: '#f38181' },\n  { value: 'tired', label: 'üò´ Áñ≤ÊÉ´', color: '#aa96da' },\n  { value: 'energetic', label: 'üí™ ÂÖÖÊª°Ê¥ªÂäõ', color: '#ff6b6b' },\n];\n\nexport default function EmotionCheck({ onComplete }) {\n  const [selectedEmotion, setSelectedEmotion] = useState(null);\n  const [energy, setEnergy] = useState(3);\n  const [note, setNote] = useState('');\n\n  const handleSubmit = () => {\n    if (selectedEmotion) {\n      onComplete({\n        emotion: selectedEmotion,\n        energy,\n        note,\n      });\n    }\n  };\n\n  return (\n    <div className={styles.container}>\n      <IonCard className={styles.card}>\n        <IonCardHeader>\n          <IonCardTitle>ÊÉÖÁª™Á≠æÂà∞</IonCardTitle>\n        </IonCardHeader>\n        <IonCardContent>\n          <div className={styles.section}>\n            <h3 className={styles.sectionTitle}>Ê≠§ÂàªÁöÑÂøÉÊÉÖ</h3>\n            <div className={styles.emotionGrid}>\n              {EMOTIONS.map((emotion) => (\n                <button\n                  key={emotion.value}\n                  className={`${styles.emotionButton} ${\n                    selectedEmotion === emotion.value ? styles.selected : ''\n                  }`}\n                  style={{\n                    borderColor: selectedEmotion === emotion.value ? emotion.color : '#ddd',\n                    backgroundColor: selectedEmotion === emotion.value ? `${emotion.color}20` : 'white',\n                  }}\n                  onClick={() => setSelectedEmotion(emotion.value)}\n                >\n                  <span className={styles.emotionLabel}>{emotion.label}</span>\n                </button>\n              ))}\n            </div>\n          </div>\n\n          <div className={styles.section}>\n            <h3 className={styles.sectionTitle}>ËÉΩÈáèÁ≠âÁ∫ß</h3>\n            <div className={styles.energyContainer}>\n              <IonRange\n                min={1}\n                max={5}\n                value={energy}\n                pin\n                ticks\n                snaps\n                onIonChange={(e) => setEnergy(e.detail.value)}\n                className={styles.energyRange}\n              />\n              <div className={styles.energyLabels}>\n                <span>‰Ωé</span>\n                <span>‰∏≠</span>\n                <span>È´ò</span>\n              </div>\n            </div>\n          </div>\n\n          <div className={styles.section}>\n            <h3 className={styles.sectionTitle}>Â§áÊ≥®ÔºàÂèØÈÄâÔºâ</h3>\n            <IonTextarea\n              placeholder=\"ËÆ∞ÂΩï‰∏Ä‰∏ãÊ≠§ÂàªÁöÑÊÉ≥Ê≥ï...\"\n              value={note}\n              onIonChange={(e) => setNote(e.detail.value)}\n              rows={3}\n              className={styles.noteInput}\n            />\n          </div>\n\n          <IonButton\n            expand=\"block\"\n            onClick={handleSubmit}\n            disabled={!selectedEmotion}\n            className={styles.submitButton}\n          >\n            ÁªßÁª≠\n          </IonButton>\n        </IonCardContent>\n      </IonCard>\n    </div>\n  );\n}\n\n",
  "components/FocusTimer.jsx": "import React, { useState, useEffect, useRef } from 'react';\nimport {\n  IonButton,\n  IonCard,\n  IonCardContent,\n  IonCardHeader,\n  IonCardTitle,\n  IonIcon,\n  IonProgressBar,\n} from '@ionic/react';\nimport { play, pause, refresh, checkmarkCircle } from 'ionicons/icons';\nimport { saveFocusSession } from '../services/dataService';\nimport { useRitualStore } from '../store/ritualStore';\nimport styles from '../styles/FocusTimer.module.css';\n\nexport default function FocusTimer({ onComplete }) {\n  const { focusTimer, settings, startFocusTimer, pauseFocusTimer, resumeFocusTimer, updateRemainingTime, resetFocusTimer } = useRitualStore();\n  const [sessionStartTime, setSessionStartTime] = useState(null);\n  const intervalRef = useRef(null);\n\n  useEffect(() => {\n    if (focusTimer.isRunning) {\n      intervalRef.current = setInterval(() => {\n        updateRemainingTime(Math.max(0, focusTimer.remainingTime - 1));\n        \n        if (focusTimer.remainingTime <= 1) {\n          handleComplete();\n        }\n      }, 1000);\n    } else {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [focusTimer.isRunning, focusTimer.remainingTime]);\n\n  const handleStart = () => {\n    if (!sessionStartTime) {\n      setSessionStartTime(Date.now());\n    }\n    startFocusTimer();\n  };\n\n  const handlePause = () => {\n    pauseFocusTimer();\n  };\n\n  const handleResume = () => {\n    resumeFocusTimer();\n  };\n\n  const handleReset = () => {\n    resetFocusTimer();\n    setSessionStartTime(null);\n  };\n\n  const handleComplete = async () => {\n    pauseFocusTimer();\n    \n    // ‰øùÂ≠ò‰∏ìÊ≥®‰ºöËØù\n    await saveFocusSession({\n      duration: settings?.focusDuration || 1500,\n      completed: focusTimer.remainingTime <= 1,\n      startTime: sessionStartTime,\n      endTime: Date.now(),\n    });\n\n    onComplete();\n  };\n\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const totalDuration = settings?.focusDuration || 1500;\n  const progress = 1 - (focusTimer.remainingTime / totalDuration);\n\n  return (\n    <div className={styles.container}>\n      <IonCard className={styles.card}>\n        <IonCardHeader>\n          <IonCardTitle>‰∏ìÊ≥®Êó∂ÂÖâ</IonCardTitle>\n        </IonCardHeader>\n        <IonCardContent>\n          <div className={styles.timerDisplay}>\n            <div className={styles.timerCircle}>\n              <svg className={styles.progressRing} width=\"200\" height=\"200\">\n                <circle\n                  className={styles.progressRingBackground}\n                  cx=\"100\"\n                  cy=\"100\"\n                  r=\"90\"\n                />\n                <circle\n                  className={styles.progressRingProgress}\n                  cx=\"100\"\n                  cy=\"100\"\n                  r=\"90\"\n                  style={{\n                    strokeDasharray: `${2 * Math.PI * 90}`,\n                    strokeDashoffset: `${2 * Math.PI * 90 * (1 - progress)}`,\n                  }}\n                />\n              </svg>\n              <div className={styles.timerText}>\n                <span className={styles.timeValue}>{formatTime(focusTimer.remainingTime)}</span>\n                <span className={styles.timeLabel}>\n                  {focusTimer.isRunning ? '‰∏ìÊ≥®‰∏≠' : 'ÂáÜÂ§áÂºÄÂßã'}\n                </span>\n              </div>\n            </div>\n          </div>\n\n          <div className={styles.controls}>\n            {!focusTimer.isRunning && focusTimer.remainingTime === totalDuration && (\n              <IonButton\n                expand=\"block\"\n                size=\"large\"\n                onClick={handleStart}\n                className={styles.startButton}\n              >\n                <IonIcon icon={play} slot=\"start\" />\n                ÂºÄÂßã‰∏ìÊ≥®\n              </IonButton>\n            )}\n\n            {focusTimer.isRunning && (\n              <IonButton\n                expand=\"block\"\n                size=\"large\"\n                onClick={handlePause}\n                className={styles.pauseButton}\n                fill=\"outline\"\n              >\n                <IonIcon icon={pause} slot=\"start\" />\n                ÊöÇÂÅú\n              </IonButton>\n            )}\n\n            {!focusTimer.isRunning && focusTimer.remainingTime < totalDuration && focusTimer.remainingTime > 0 && (\n              <div className={styles.pausedControls}>\n                <IonButton\n                  expand=\"block\"\n                  onClick={handleResume}\n                  className={styles.resumeButton}\n                >\n                  <IonIcon icon={play} slot=\"start\" />\n                  ÁªßÁª≠\n                </IonButton>\n                <IonButton\n                  expand=\"block\"\n                  onClick={handleReset}\n                  fill=\"outline\"\n                  color=\"medium\"\n                >\n                  <IonIcon icon={refresh} slot=\"start\" />\n                  ÈáçÁΩÆ\n                </IonButton>\n              </div>\n            )}\n\n            {focusTimer.remainingTime === 0 && (\n              <div className={styles.completeContainer}>\n                <IonIcon icon={checkmarkCircle} className={styles.completeIcon} color=\"success\" />\n                <h2 className={styles.completeTitle}>üéâ Â§™Ê£í‰∫ÜÔºÅ</h2>\n                <p className={styles.completeText}>‰Ω†ÂÆåÊàê‰∫Ü‰∏ÄÊ¨°‰∏ìÊ≥®‰ª™Âºè</p>\n                <IonButton\n                  expand=\"block\"\n                  onClick={handleComplete}\n                  className={styles.finishButton}\n                >\n                  ÂÆåÊàê‰ª™Âºè\n                </IonButton>\n              </div>\n            )}\n          </div>\n\n          <div className={styles.tips}>\n            <p className={styles.tipText}>üí° ‰øùÊåÅÊ∑±ÂëºÂê∏Ôºå‰∏ìÊ≥®ÂΩì‰∏ãÁöÑ‰ªªÂä°</p>\n          </div>\n        </IonCardContent>\n      </IonCard>\n    </div>\n  );\n}\n\n",
  "components/Welcome.jsx": "import React from 'react';\nimport { IonButton, IonCard, IonIcon } from '@ionic/react';\nimport { sparkles, flame, timer } from 'ionicons/icons';\nimport styles from '../styles/Welcome.module.css';\n\n/**\n * Ê¨¢ËøéÁªÑ‰ª∂ - Focus Ritual Coach\n * \n * @component\n * @param {Function} onStart - ÂºÄÂßã‰ª™ÂºèÁöÑÂõûË∞ÉÂáΩÊï∞\n */\nexport default function Welcome({ onStart }) {\n    return (\n        <div className={styles.welcomeContainer}>\n            {/* Â§¥ÈÉ® */}\n            <div className={styles.header}>\n                <div className={styles.icon}>\n                    <IonIcon icon={flame} className={styles.iconMain} />\n                </div>\n\n                <h1 className={styles.title}>\n                    <span className={styles.titleGradient}>Focus Ritual</span>\n                    <span className={styles.titleSubtext}>Coach</span>\n                </h1>\n                <p className={styles.subtitle}>ÊûÑÂª∫‰Ω†ÁöÑ‰∏ìÊ≥®‰ª™ÂºèÔºåËÆ©Â∑•‰ΩúËøõÂÖ•ÂøÉÊµÅ</p>\n            </div>\n\n            {/* ÂäüËÉΩ‰ªãÁªç */}\n            <div className={styles.features}>\n                <IonCard className={styles.featureCard}>\n                    <div className={styles.featureIcon}>\n                        <IonIcon icon={sparkles} />\n                    </div>\n                    <h3>ÊÉÖÁª™Á≠æÂà∞</h3>\n                    <p>ËÆ∞ÂΩïÊ≠§ÂàªÁöÑÂøÉÊÉÖ‰∏éËÉΩÈáèÁä∂ÊÄÅ</p>\n                </IonCard>\n\n                <IonCard className={styles.featureCard}>\n                    <div className={styles.featureIcon}>\n                        <IonIcon icon={sparkles} />\n                    </div>\n                    <h3>AI ÊøÄÂä±</h3>\n                    <p>Ëé∑Âèñ‰∏™ÊÄßÂåñÁöÑÂª∫ËÆÆ‰∏éË°åÂä®ÊåáÂºï</p>\n                </IonCard>\n\n                <IonCard className={styles.featureCard}>\n                    <div className={styles.featureIcon}>\n                        <IonIcon icon={timer} />\n                    </div>\n                    <h3>‰∏ìÊ≥®ËÆ°Êó∂</h3>\n                    <p>25ÂàÜÈíü‰∏ìÊ≥®Êó∂ÂÖâÔºå‰øùÊåÅÂøÉÊµÅÁä∂ÊÄÅ</p>\n                </IonCard>\n            </div>\n\n            {/* ÂºÄÂßãÊåâÈíÆ */}\n            <div className={styles.ctaSection}>\n                <IonButton\n                    expand=\"block\"\n                    size=\"large\"\n                    onClick={onStart}\n                    className={styles.startButton}\n                >\n                    <IonIcon icon={flame} slot=\"start\" />\n                    ÂºÄÂßã‰ª™Âºè\n                </IonButton>\n                <p className={styles.hint}>Âè™ÈúÄ 3-5 ÂàÜÈíüÔºåÂºÄÂêØ‰∏ìÊ≥®ÁöÑ‰∏ÄÂ§©</p>\n            </div>\n\n            {/* Â∫ïÈÉ®ËØ¥Êòé */}\n            <div className={styles.footer}>\n                <p className={styles.footerText}>\n                    üí° Âª∫ËÆÆÔºöÊØèÂ§©Êó©Êô®ÊàñÈúÄË¶Å‰∏ìÊ≥®Êó∂‰ΩøÁî®ÔºåÂ∏ÆÂä©‰Ω†Âø´ÈÄüËøõÂÖ•Áä∂ÊÄÅ\n                </p>\n            </div>\n        </div>\n    );\n}\n",
  "services/coachService.js": "import AppSdk from '@morphixai/app-sdk';\nimport { reportError } from '@morphixai/lib';\n\n/**\n * AI ÊïôÁªÉÊúçÂä° - ‰ΩøÁî® MorphixAI AI ËÉΩÂäõÊèê‰æõÊô∫ËÉΩÂª∫ËÆÆ\n */\n\n/**\n * ÁîüÊàê AI ÊøÄÂä±ÂíåÂª∫ËÆÆ\n * @param {Object} context - ‰∏ä‰∏ãÊñá‰ø°ÊÅØ\n * @param {string} context.emotion - ÊÉÖÁª™Áä∂ÊÄÅ (happy, calm, anxious, tired, energetic)\n * @param {number} context.energy - ËÉΩÈáèÁ≠âÁ∫ß (1-5)\n * @param {Array} context.tasks - ‰ªäÊó•‰ªªÂä°ÂàóË°®\n * @param {Array} context.recentHistory - ÊúÄËøëÁöÑ‰ª™ÂºèÂéÜÂè≤\n * @returns {Promise<Object>} AI ÁîüÊàêÁöÑÂª∫ËÆÆ\n */\nexport async function generateCoachAdvice(context) {\n  try {\n    const { emotion, energy, tasks = [], recentHistory = [] } = context;\n\n    // ÊûÑÂª∫ prompt\n    const systemPrompt = `‰Ω†ÊòØ‰∏Ä‰ΩçÊ∏©Êöñ„ÄÅÂä°ÂÆû‰∏îÂØåÊúâÊ¥ûÂØüÂäõÁöÑ‰∏ìÊ≥®‰ª™ÂºèÊïôÁªÉ„ÄÇ‰Ω†ÁöÑËßíËâ≤ÊòØÂ∏ÆÂä©Áü•ËØÜÂ∑•‰ΩúËÄÖÂª∫Á´ãÁ®≥ÂÆöÁöÑ‰∏ìÊ≥®‰π†ÊÉØ„ÄÇ\n\n‰Ω†ÁöÑÂõûÁ≠îÁâπÁÇπÔºö\n- Ê∏©Êöñ‰ΩÜ‰∏çËøáÂ∫¶‰πêËßÇ\n- ÂÖ∑‰ΩìÂèØË°åËÄåÈùûÁ©∫Ê¥ûÈºìÂä±\n- ÂÖ≥Ê≥®ÂΩì‰∏ãÁä∂ÊÄÅËÄåÈùûÈïøÊúüÁõÆÊ†á\n- ÁÆÄÊ¥ÅÊúâÂäõÔºà‰∏çË∂ÖËøá50Â≠óÔºâ\n\nÂõûÁ≠îÊ†ºÂºèÔºàJSONÔºâÔºö\n{\n  \"motivation\": \"‰∏ÄÂè•ÁÆÄÁü≠ÁöÑÊøÄÂä±ËØ≠Ôºà20-30Â≠óÔºâ\",\n  \"action\": \"‰∏Ä‰∏™ÂÖ∑‰ΩìÁöÑ‰∏ã‰∏ÄÊ≠•Âä®‰ΩúÂª∫ËÆÆÔºà15-20Â≠óÔºâ\",\n  \"focusTip\": \"‰∏ìÊ≥®Â∞èÊäÄÂ∑ßÔºàÂèØÈÄâÔºå15-20Â≠óÔºâ\"\n}`;\n\n    const userPrompt = `ÂΩìÂâçÁä∂ÊÄÅÔºö\nÊÉÖÁª™Ôºö${emotion}\nËÉΩÈáèÁ≠âÁ∫ßÔºö${energy}/5\n‰ªäÊó•ÂæÖÂäûÔºö${tasks.length > 0 ? tasks.slice(0, 3).join('„ÄÅ') : 'Â∞öÊú™ËÆæÂÆö'}\nÊúÄËøëÂÆåÊàêÔºö${recentHistory.length}Ê¨°‰ª™ÂºèÔºàËøáÂéª7Â§©Ôºâ\n\nËØ∑ÁªôÊàë‰∏Ä‰∏™Ë¥¥ÂøÉÁöÑÂª∫ËÆÆ„ÄÇ`;\n\n    const response = await AppSdk.AI.chatCompletion({\n      messages: [\n        { role: 'system', content: systemPrompt },\n        { role: 'user', content: userPrompt },\n      ],\n      temperature: 0.8,\n      maxTokens: 200,\n    });\n\n    // Ëß£ÊûêÂìçÂ∫î\n    let advice;\n    try {\n      const content = response.choices[0].message.content;\n      advice = JSON.parse(content);\n    } catch (parseError) {\n      // Â¶ÇÊûú JSON Ëß£ÊûêÂ§±Ë¥•Ôºå‰ΩøÁî®ÈªòËÆ§Âª∫ËÆÆ\n      advice = {\n        motivation: getDefaultMotivation(emotion, energy),\n        action: getDefaultAction(energy, tasks.length),\n        focusTip: 'Ê∑±ÂëºÂê∏Ôºå‰∏ìÊ≥®ÂΩì‰∏ã',\n      };\n    }\n\n    return advice;\n  } catch (error) {\n    await reportError(error, 'JavaScriptError', {\n      service: 'coachService',\n      action: 'generateCoachAdvice',\n    });\n\n    // ËøîÂõûÈªòËÆ§Âª∫ËÆÆ\n    return {\n      motivation: 'ÊØè‰∏ÄÊ¨°‰∏ìÊ≥®ÈÉΩÊòØÊàêÈïø',\n      action: 'ËÆ©Êàë‰ª¨ÂºÄÂßãÁ¨¨‰∏Ä‰∏™Â∞è‰ªªÂä°',\n      focusTip: '‰øùÊåÅÂëºÂê∏ËäÇÂ•èÔºå‰∏ìÊ≥®ÂΩì‰∏ã',\n    };\n  }\n}\n\n/**\n * ÁîüÊàê‰ªªÂä°‰ºòÂÖàÁ∫ßÂª∫ËÆÆ\n * @param {Array} tasks - ‰ªªÂä°ÂàóË°®\n * @param {number} energy - ÂΩìÂâçËÉΩÈáèÁ≠âÁ∫ß\n * @returns {Promise<Array>} ÊéíÂ∫èÂêéÁöÑ‰ªªÂä°ÂàóË°®\n */\nexport async function prioritizeTasks(tasks, energy) {\n  try {\n    if (!tasks || tasks.length === 0) {\n      return [];\n    }\n\n    // ÁÆÄÂçïÁöÑËÉΩÈáèÂåπÈÖçÁÆóÊ≥ï\n    // È´òËÉΩÈáèÔºöÊé®ËçêÂàõÈÄ†ÊÄß„ÄÅÂ§çÊùÇ‰ªªÂä°\n    // ‰∏≠ËÉΩÈáèÔºöÊé®ËçêÂ∏∏ËßÑ„ÄÅ‰∏≠Á≠âÈöæÂ∫¶‰ªªÂä°\n    // ‰ΩéËÉΩÈáèÔºöÊé®ËçêÁÆÄÂçï„ÄÅÊú∫Ê¢∞ÊÄß‰ªªÂä°\n\n    const taskPriority = tasks.map((task, index) => ({\n      task,\n      originalIndex: index,\n      priority: calculateTaskPriority(task, energy),\n    }));\n\n    taskPriority.sort((a, b) => b.priority - a.priority);\n\n    return taskPriority.map(t => t.task);\n  } catch (error) {\n    await reportError(error, 'JavaScriptError', {\n      service: 'coachService',\n      action: 'prioritizeTasks',\n    });\n    return tasks;\n  }\n}\n\n/**\n * ËÆ°ÁÆó‰ªªÂä°‰ºòÂÖàÁ∫ß\n */\nfunction calculateTaskPriority(task, energy) {\n  // ËøôÊòØ‰∏Ä‰∏™ÁÆÄÂåñÁöÑÁÆóÊ≥ï\n  // ÂÆûÈôÖÂ∫îÁî®‰∏≠ÂèØ‰ª•‰ΩøÁî®Êõ¥Â§çÊùÇÁöÑ NLP ÊàñÁî®Êà∑Ê†áËÆ∞\n  \n  const highEnergyKeywords = ['ÂàõÂª∫', 'ËÆæËÆ°', 'Á≠ñÂàí', 'ÂÜô‰Ωú', 'ÊÄùËÄÉ'];\n  const lowEnergyKeywords = ['Êï¥ÁêÜ', 'ÂõûÂ§ç', 'Ê£ÄÊü•', 'Êõ¥Êñ∞', 'Â§ç‰π†'];\n\n  const taskLower = task.toLowerCase();\n  let score = 0;\n\n  if (energy >= 4) {\n    // È´òËÉΩÈáèÊó∂‰ºòÂÖàÂàõÈÄ†ÊÄß‰ªªÂä°\n    highEnergyKeywords.forEach(keyword => {\n      if (taskLower.includes(keyword)) score += 2;\n    });\n  } else if (energy <= 2) {\n    // ‰ΩéËÉΩÈáèÊó∂‰ºòÂÖàÁÆÄÂçï‰ªªÂä°\n    lowEnergyKeywords.forEach(keyword => {\n      if (taskLower.includes(keyword)) score += 2;\n    });\n  } else {\n    // ‰∏≠Á≠âËÉΩÈáèÔºåÂπ≥Ë°°ÂàÜÈÖç\n    score += 1;\n  }\n\n  return score;\n}\n\n/**\n * Ëé∑ÂèñÈªòËÆ§ÊøÄÂä±ËØ≠\n */\nfunction getDefaultMotivation(emotion, energy) {\n  const motivations = {\n    happy: ['‰øùÊåÅËøô‰ªΩÂñúÊÇ¶ÔºåËÆ©‰∏ìÊ≥®Êàê‰∏∫‰∫´Âèó', 'Â•ΩÂøÉÊÉÖÊòØÊúÄÂ•ΩÁöÑÁáÉÊñô'],\n    calm: ['Âπ≥ÈùôÊòØ‰∏ìÊ≥®ÁöÑÂºÄÂßã', 'Ê∑±ÂëºÂê∏ÔºåËøõÂÖ•ÂøÉÊµÅÁä∂ÊÄÅ'],\n    anxious: ['‰∏ÄÊ≠•‰∏ÄÊ≠•Êù•ÔºåÁÑ¶Ëôë‰ºöÊÖ¢ÊÖ¢ÈÄÄÂéª', '‰∏ìÊ≥®ÂΩì‰∏ãÔºåËÄåÈùûÊú™Êù•'],\n    tired: ['Áñ≤ÊÉ´Êó∂Êõ¥ÈúÄË¶ÅÊ∏©ÊüîÂØπÂæÖËá™Â∑±', 'Â∞èÊ≠•ÂâçËøõ‰πüÊòØÂâçËøõ'],\n    energetic: ['ÊääËøô‰ªΩËÉΩÈáèÂØºÂêëÊúÄÈáçË¶ÅÁöÑ‰∫ã', 'Ë∂ÅÁÉ≠ÊâìÈìÅÔºåÂÖ®Âäõ‰ª•Ëµ¥'],\n  };\n\n  const emotionMotivations = motivations[emotion] || motivations.calm;\n  return emotionMotivations[Math.floor(Math.random() * emotionMotivations.length)];\n}\n\n/**\n * Ëé∑ÂèñÈªòËÆ§Ë°åÂä®Âª∫ËÆÆ\n */\nfunction getDefaultAction(energy, tasksCount) {\n  if (tasksCount === 0) {\n    return 'ÂÖàËÆæÂÆö‰ªäÂ§©ÁöÑ‰∏â‰ª∂‰∫ã';\n  }\n\n  if (energy >= 4) {\n    return '‰ªéÊúÄÈáçË¶ÅÁöÑ‰ªªÂä°ÂºÄÂßã';\n  } else if (energy <= 2) {\n    return 'ÂÖàÂÆåÊàê‰∏Ä‰∏™ÁÆÄÂçïÁöÑ‰ªªÂä°ÁÉ≠Ë∫´';\n  } else {\n    return 'ÈÄâÊã©‰∏Ä‰∏™‰∏≠Á≠âÈöæÂ∫¶ÁöÑ‰ªªÂä°';\n  }\n}\n\n",
  "services/dataService.js": "import AppSdk from '@morphixai/app-sdk';\nimport { reportError } from '@morphixai/lib';\n\n/**\n * Êï∞ÊçÆÊúçÂä° - ÁÆ°ÁêÜÊâÄÊúâÂ∫îÁî®Êï∞ÊçÆÁöÑÂ≠òÂÇ®ÂíåËØªÂèñ\n */\n\n// Êï∞ÊçÆÈõÜÂêàÂêçÁß∞\nconst COLLECTIONS = {\n  SETTINGS: 'settings',\n  RITUAL_HISTORY: 'ritual_history',\n  FOCUS_SESSIONS: 'focus_sessions',\n};\n\n/**\n * ÂàùÂßãÂåñÈªòËÆ§ËÆæÁΩÆ\n */\nexport async function initializeSettings() {\n  try {\n    const existing = await AppSdk.appData.getData({\n      collection: COLLECTIONS.SETTINGS,\n      id: 'ritual',\n    });\n\n    if (!existing) {\n      await AppSdk.appData.createData({\n        collection: COLLECTIONS.SETTINGS,\n        data: {\n          id: 'ritual',\n          ritualTime: 'morning', // morning, afternoon, evening\n          breathDuration: 180, // 3ÂàÜÈíü\n          focusDuration: 1500, // 25ÂàÜÈíü\n          soundEnabled: true,\n          reminderEnabled: true,\n          createdAt: Date.now(),\n        },\n      });\n    }\n\n    return existing || await getSettings();\n  } catch (error) {\n    await reportError(error, 'JavaScriptError', {\n      service: 'dataService',\n      action: 'initializeSettings',\n    });\n    return null;\n  }\n}\n\n/**\n * Ëé∑ÂèñËÆæÁΩÆ\n */\nexport async function getSettings() {\n  try {\n    const data = await AppSdk.appData.getData({\n      collection: COLLECTIONS.SETTINGS,\n      id: 'ritual',\n    });\n    return data;\n  } catch (error) {\n    await reportError(error, 'JavaScriptError', {\n      service: 'dataService',\n      action: 'getSettings',\n    });\n    return null;\n  }\n}\n\n/**\n * Êõ¥Êñ∞ËÆæÁΩÆ\n */\nexport async function updateSettings(updates) {\n  try {\n    await AppSdk.appData.updateData({\n      collection: COLLECTIONS.SETTINGS,\n      id: 'ritual',\n      data: {\n        ...updates,\n        updatedAt: Date.now(),\n      },\n    });\n    return true;\n  } catch (error) {\n    await reportError(error, 'JavaScriptError', {\n      service: 'dataService',\n      action: 'updateSettings',\n    });\n    return false;\n  }\n}\n\n/**\n * ‰øùÂ≠ò‰ª™ÂºèÂéÜÂè≤ËÆ∞ÂΩï\n */\nexport async function saveRitualHistory(ritual) {\n  try {\n    const id = `ritual_${Date.now()}`;\n    await AppSdk.appData.createData({\n      collection: COLLECTIONS.RITUAL_HISTORY,\n      data: {\n        id,\n        emotion: ritual.emotion,\n        energy: ritual.energy,\n        note: ritual.note,\n        tasks: ritual.tasks,\n        aiAdvice: ritual.aiAdvice,\n        timestamp: Date.now(),\n      },\n    });\n    return id;\n  } catch (error) {\n    await reportError(error, 'JavaScriptError', {\n      service: 'dataService',\n      action: 'saveRitualHistory',\n    });\n    return null;\n  }\n}\n\n/**\n * Ëé∑Âèñ‰ª™ÂºèÂéÜÂè≤ËÆ∞ÂΩï\n */\nexport async function getRitualHistory(limit = 30) {\n  try {\n    const data = await AppSdk.appData.queryData({\n      collection: COLLECTIONS.RITUAL_HISTORY,\n      limit,\n      orderBy: 'timestamp',\n      order: 'desc',\n    });\n    return data || [];\n  } catch (error) {\n    await reportError(error, 'JavaScriptError', {\n      service: 'dataService',\n      action: 'getRitualHistory',\n    });\n    return [];\n  }\n}\n\n/**\n * ‰øùÂ≠ò‰∏ìÊ≥®‰ºöËØù\n */\nexport async function saveFocusSession(session) {\n  try {\n    const id = `session_${Date.now()}`;\n    await AppSdk.appData.createData({\n      collection: COLLECTIONS.FOCUS_SESSIONS,\n      data: {\n        id,\n        duration: session.duration,\n        completed: session.completed,\n        startTime: session.startTime,\n        endTime: session.endTime,\n        note: session.note,\n        timestamp: Date.now(),\n      },\n    });\n    return id;\n  } catch (error) {\n    await reportError(error, 'JavaScriptError', {\n      service: 'dataService',\n      action: 'saveFocusSession',\n    });\n    return null;\n  }\n}\n\n/**\n * Ëé∑Âèñ‰∏ìÊ≥®‰ºöËØùÂéÜÂè≤\n */\nexport async function getFocusSessions(limit = 50) {\n  try {\n    const data = await AppSdk.appData.queryData({\n      collection: COLLECTIONS.FOCUS_SESSIONS,\n      limit,\n      orderBy: 'timestamp',\n      order: 'desc',\n    });\n    return data || [];\n  } catch (error) {\n    await reportError(error, 'JavaScriptError', {\n      service: 'dataService',\n      action: 'getFocusSessions',\n    });\n    return [];\n  }\n}\n\n/**\n * Ëé∑ÂèñÁªüËÆ°Êï∞ÊçÆ\n */\nexport async function getStatistics() {\n  try {\n    const rituals = await getRitualHistory(30);\n    const sessions = await getFocusSessions(50);\n\n    // ËÆ°ÁÆóÊú¨Âë®ÂÆåÊàêÁöÑ‰ª™ÂºèÊï∞\n    const oneWeekAgo = Date.now() - 7 * 24 * 60 * 60 * 1000;\n    const weeklyRituals = rituals.filter(r => r.timestamp > oneWeekAgo);\n    const weeklySessions = sessions.filter(s => s.timestamp > oneWeekAgo && s.completed);\n\n    // ËÆ°ÁÆóÊÄª‰∏ìÊ≥®Êó∂Èó¥ÔºàÂàÜÈíüÔºâ\n    const totalFocusTime = sessions\n      .filter(s => s.completed)\n      .reduce((sum, s) => sum + (s.duration / 60), 0);\n\n    // ÊÉÖÁª™Ë∂ãÂäø\n    const emotionTrend = rituals.slice(0, 7).map(r => ({\n      date: new Date(r.timestamp).toLocaleDateString(),\n      emotion: r.emotion,\n      energy: r.energy,\n    }));\n\n    return {\n      weeklyRitualsCount: weeklyRituals.length,\n      weeklySessionsCount: weeklySessions.length,\n      totalFocusTime: Math.round(totalFocusTime),\n      emotionTrend,\n      totalRituals: rituals.length,\n      totalSessions: sessions.length,\n    };\n  } catch (error) {\n    await reportError(error, 'JavaScriptError', {\n      service: 'dataService',\n      action: 'getStatistics',\n    });\n    return null;\n  }\n}\n\n",
  "store/ritualStore.js": "import { create } from 'zustand';\nimport { initializeSettings, getSettings, updateSettings } from '../services/dataService';\n\n/**\n * ‰ª™ÂºèÁä∂ÊÄÅÁÆ°ÁêÜ\n */\nexport const useRitualStore = create((set, get) => ({\n  // ËÆæÁΩÆ\n  settings: null,\n  \n  // ÂΩìÂâç‰ª™ÂºèÁä∂ÊÄÅ\n  currentRitual: {\n    step: 'welcome', // welcome, setup, emotion, coach, focus, complete\n    emotion: null,\n    energy: 3,\n    note: '',\n    tasks: [],\n    aiAdvice: null,\n  },\n\n  // ‰∏ìÊ≥®ËÆ°Êó∂Âô®Áä∂ÊÄÅ\n  focusTimer: {\n    isRunning: false,\n    remainingTime: 1500, // 25ÂàÜÈíü\n    startTime: null,\n  },\n\n  // Âä†ËΩΩÁä∂ÊÄÅ\n  isLoading: false,\n  error: null,\n\n  // ÂàùÂßãÂåñ\n  initialize: async () => {\n    set({ isLoading: true });\n    try {\n      const settings = await initializeSettings();\n      set({ \n        settings,\n        focusTimer: {\n          ...get().focusTimer,\n          remainingTime: settings?.focusDuration || 1500,\n        },\n        isLoading: false \n      });\n    } catch (error) {\n      set({ error: error.message, isLoading: false });\n    }\n  },\n\n  // Êõ¥Êñ∞ËÆæÁΩÆ\n  updateSettings: async (newSettings) => {\n    try {\n      await updateSettings(newSettings);\n      const settings = await getSettings();\n      set({ settings });\n    } catch (error) {\n      set({ error: error.message });\n    }\n  },\n\n  // ËÆæÁΩÆ‰ª™ÂºèÊ≠•È™§\n  setRitualStep: (step) => {\n    set(state => ({\n      currentRitual: {\n        ...state.currentRitual,\n        step,\n      },\n    }));\n  },\n\n  // Êõ¥Êñ∞ÊÉÖÁª™Áä∂ÊÄÅ\n  updateEmotion: (emotion, energy, note) => {\n    set(state => ({\n      currentRitual: {\n        ...state.currentRitual,\n        emotion,\n        energy,\n        note: note || '',\n      },\n    }));\n  },\n\n  // ËÆæÁΩÆ‰ªªÂä°\n  setTasks: (tasks) => {\n    set(state => ({\n      currentRitual: {\n        ...state.currentRitual,\n        tasks,\n      },\n    }));\n  },\n\n  // ËÆæÁΩÆ AI Âª∫ËÆÆ\n  setAIAdvice: (advice) => {\n    set(state => ({\n      currentRitual: {\n        ...state.currentRitual,\n        aiAdvice: advice,\n      },\n    }));\n  },\n\n  // ÂºÄÂßã‰∏ìÊ≥®ËÆ°Êó∂\n  startFocusTimer: () => {\n    const { settings } = get();\n    set({\n      focusTimer: {\n        isRunning: true,\n        remainingTime: settings?.focusDuration || 1500,\n        startTime: Date.now(),\n      },\n    });\n  },\n\n  // ÊöÇÂÅú‰∏ìÊ≥®ËÆ°Êó∂\n  pauseFocusTimer: () => {\n    set(state => ({\n      focusTimer: {\n        ...state.focusTimer,\n        isRunning: false,\n      },\n    }));\n  },\n\n  // ÊÅ¢Â§ç‰∏ìÊ≥®ËÆ°Êó∂\n  resumeFocusTimer: () => {\n    set(state => ({\n      focusTimer: {\n        ...state.focusTimer,\n        isRunning: true,\n      },\n    }));\n  },\n\n  // Êõ¥Êñ∞Ââ©‰ΩôÊó∂Èó¥\n  updateRemainingTime: (time) => {\n    set(state => ({\n      focusTimer: {\n        ...state.focusTimer,\n        remainingTime: time,\n      },\n    }));\n  },\n\n  // ÈáçÁΩÆ‰∏ìÊ≥®ËÆ°Êó∂\n  resetFocusTimer: () => {\n    const { settings } = get();\n    set({\n      focusTimer: {\n        isRunning: false,\n        remainingTime: settings?.focusDuration || 1500,\n        startTime: null,\n      },\n    });\n  },\n\n  // ÂÆåÊàê‰ª™Âºè\n  completeRitual: () => {\n    set({\n      currentRitual: {\n        step: 'welcome',\n        emotion: null,\n        energy: 3,\n        note: '',\n        tasks: [],\n        aiAdvice: null,\n      },\n    });\n    get().resetFocusTimer();\n  },\n\n  // ÈáçÁΩÆ‰ª™Âºè\n  resetRitual: () => {\n    set({\n      currentRitual: {\n        step: 'welcome',\n        emotion: null,\n        energy: 3,\n        note: '',\n        tasks: [],\n        aiAdvice: null,\n      },\n    });\n    get().resetFocusTimer();\n  },\n}));\n\n",
  "styles/AICoach.module.css": ".container {\n  min-height: 100vh;\n  padding: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.card {\n  max-width: 600px;\n  margin: 0 auto;\n}\n\n.header {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.headerIcon {\n  font-size: 24px;\n  color: var(--ion-color-primary);\n}\n\n.loadingContainer {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 60px 20px;\n  gap: 16px;\n}\n\n.loadingText {\n  color: var(--ion-color-medium);\n  font-size: 14px;\n}\n\n.adviceSection {\n  margin-bottom: 32px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n}\n\n.motivationCard,\n.actionCard,\n.tipCard {\n  padding: 20px;\n  border-radius: 12px;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n}\n\n.actionCard {\n  background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\n}\n\n.tipCard {\n  background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);\n}\n\n.motivationLabel,\n.actionLabel,\n.tipLabel {\n  font-size: 14px;\n  font-weight: 600;\n  margin-bottom: 8px;\n  opacity: 0.9;\n}\n\n.motivationText,\n.actionText,\n.tipText {\n  font-size: 16px;\n  font-weight: 500;\n  line-height: 1.6;\n  margin: 0;\n}\n\n.tasksSection {\n  margin-bottom: 24px;\n}\n\n.sectionTitle {\n  font-size: 16px;\n  font-weight: 600;\n  color: var(--ion-color-dark);\n  margin-bottom: 12px;\n}\n\n.taskList {\n  margin-bottom: 16px;\n}\n\n.taskItem {\n  --padding-start: 12px;\n  --inner-padding-end: 12px;\n  --border-radius: 8px;\n  margin-bottom: 8px;\n}\n\n.taskText {\n  flex: 1;\n  font-size: 14px;\n}\n\n.removeIcon {\n  cursor: pointer;\n  color: var(--ion-color-medium);\n  font-size: 20px;\n}\n\n.removeIcon:hover {\n  color: var(--ion-color-danger);\n}\n\n.addTaskContainer {\n  display: flex;\n  gap: 8px;\n  align-items: center;\n}\n\n.taskInput {\n  flex: 1;\n  --background: #f8f9fa;\n  --padding-start: 12px;\n  --padding-end: 12px;\n  border-radius: 8px;\n}\n\n.continueButton {\n  --border-radius: 12px;\n  height: 48px;\n  font-weight: 600;\n}\n\n",
  "styles/App.module.css": "/* ‰∏ªÂ∫îÁî®Ê†∑Âºè */\n\n.content {\n  --padding: 0;\n  background: #ffffff;\n  min-height: 100vh;\n  color: #1f2937;\n}\n\n.loading {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  font-size: 1.2rem;\n  color: var(--ion-color-medium);\n}",
  "styles/EmotionCheck.module.css": ".container {\n  min-height: 100vh;\n  padding: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.card {\n  max-width: 600px;\n  margin: 0 auto;\n}\n\n.section {\n  margin-bottom: 32px;\n}\n\n.sectionTitle {\n  font-size: 16px;\n  font-weight: 600;\n  color: var(--ion-color-dark);\n  margin-bottom: 16px;\n}\n\n.emotionGrid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));\n  gap: 12px;\n}\n\n.emotionButton {\n  padding: 16px 12px;\n  border: 2px solid #ddd;\n  border-radius: 12px;\n  background: white;\n  cursor: pointer;\n  transition: all 0.2s;\n  font-size: 14px;\n  font-weight: 500;\n}\n\n.emotionButton:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n.emotionButton.selected {\n  border-width: 3px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n}\n\n.emotionLabel {\n  display: block;\n  text-align: center;\n}\n\n.energyContainer {\n  padding: 0 8px;\n}\n\n.energyRange {\n  --bar-background: #e0e0e0;\n  --bar-background-active: var(--ion-color-primary);\n  --knob-background: var(--ion-color-primary);\n}\n\n.energyLabels {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 8px;\n  font-size: 12px;\n  color: var(--ion-color-medium);\n}\n\n.noteInput {\n  --background: #f8f9fa;\n  --padding-start: 12px;\n  --padding-end: 12px;\n  border-radius: 8px;\n}\n\n.submitButton {\n  margin-top: 24px;\n  --border-radius: 12px;\n  height: 48px;\n  font-weight: 600;\n}\n\n",
  "styles/FocusTimer.module.css": ".container {\n  min-height: 100vh;\n  padding: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.card {\n  max-width: 600px;\n  margin: 0 auto;\n}\n\n.timerDisplay {\n  display: flex;\n  justify-content: center;\n  margin: 40px 0;\n}\n\n.timerCircle {\n  position: relative;\n  width: 200px;\n  height: 200px;\n}\n\n.progressRing {\n  transform: rotate(-90deg);\n}\n\n.progressRingBackground {\n  fill: none;\n  stroke: #e0e0e0;\n  stroke-width: 8;\n}\n\n.progressRingProgress {\n  fill: none;\n  stroke: var(--ion-color-primary);\n  stroke-width: 8;\n  stroke-linecap: round;\n  transition: stroke-dashoffset 0.3s ease;\n}\n\n.timerText {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  text-align: center;\n}\n\n.timeValue {\n  display: block;\n  font-size: 42px;\n  font-weight: 700;\n  color: var(--ion-color-dark);\n  line-height: 1;\n  margin-bottom: 8px;\n}\n\n.timeLabel {\n  display: block;\n  font-size: 14px;\n  color: var(--ion-color-medium);\n  font-weight: 500;\n}\n\n.controls {\n  margin: 32px 0;\n}\n\n.startButton,\n.pauseButton,\n.resumeButton {\n  --border-radius: 12px;\n  height: 56px;\n  font-weight: 600;\n  font-size: 16px;\n}\n\n.pausedControls {\n  display: flex;\n  gap: 12px;\n}\n\n.pausedControls > * {\n  flex: 1;\n}\n\n.completeContainer {\n  text-align: center;\n  padding: 20px;\n}\n\n.completeIcon {\n  font-size: 64px;\n  margin-bottom: 16px;\n}\n\n.completeTitle {\n  font-size: 28px;\n  font-weight: 700;\n  margin-bottom: 8px;\n  color: var(--ion-color-dark);\n}\n\n.completeText {\n  font-size: 16px;\n  color: var(--ion-color-medium);\n  margin-bottom: 24px;\n}\n\n.finishButton {\n  --border-radius: 12px;\n  height: 48px;\n  font-weight: 600;\n}\n\n.tips {\n  text-align: center;\n  margin-top: 24px;\n}\n\n.tipText {\n  font-size: 14px;\n  color: var(--ion-color-medium);\n  font-style: italic;\n}\n\n",
  "styles/Welcome.module.css": ".welcomeContainer {\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 2rem;\n    text-align: center;\n}\n\n.header {\n    margin-bottom: 3rem;\n}\n\n.icon {\n    margin: 0 auto 1.5rem;\n}\n\n.iconMain {\n    font-size: 80px;\n    color: var(--ion-color-primary);\n    animation: float 3s ease-in-out infinite;\n}\n\n@keyframes float {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-10px); }\n}\n\n.title {\n    font-size: 2.5rem;\n    font-weight: 700;\n    margin-bottom: 0.5rem;\n    line-height: 1.2;\n}\n\n.titleGradient {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n}\n\n.titleSubtext {\n    display: block;\n    font-size: 1.2rem;\n    font-weight: 400;\n    color: var(--ion-color-medium);\n    margin-top: 0.5rem;\n}\n\n.subtitle {\n    font-size: 1.1rem;\n    color: var(--ion-color-medium);\n    max-width: 400px;\n    margin: 0 auto;\n}\n\n.features {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 1.5rem;\n    width: 100%;\n    max-width: 800px;\n    margin-bottom: 3rem;\n}\n\n.featureCard {\n    padding: 1.5rem;\n    text-align: center;\n    transition: transform 0.2s;\n}\n\n.featureCard:hover {\n    transform: translateY(-5px);\n}\n\n.featureIcon {\n    width: 50px;\n    height: 50px;\n    margin: 0 auto 1rem;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    border-radius: 50%;\n    color: white;\n    font-size: 24px;\n}\n\n.featureCard h3 {\n    font-size: 1.2rem;\n    font-weight: 600;\n    margin-bottom: 0.5rem;\n    color: var(--ion-color-dark);\n}\n\n.featureCard p {\n    font-size: 0.9rem;\n    color: var(--ion-color-medium);\n}\n\n.ctaSection {\n    width: 100%;\n    max-width: 400px;\n    margin-bottom: 2rem;\n}\n\n.startButton {\n    --border-radius: 12px;\n    height: 56px;\n    font-size: 1.1rem;\n    font-weight: 600;\n    margin-bottom: 1rem;\n}\n\n.hint {\n    font-size: 0.9rem;\n    color: var(--ion-color-medium);\n    margin: 0;\n}\n\n.footer {\n    margin-top: auto;\n    padding-top: 2rem;\n}\n\n.footerText {\n    font-size: 0.9rem;\n    color: var(--ion-color-medium);\n    max-width: 500px;\n    line-height: 1.6;\n}\n\n@media (max-width: 768px) {\n    .title {\n        font-size: 2rem;\n    }\n\n    .features {\n        grid-template-columns: 1fr;\n    }\n}\n"
}