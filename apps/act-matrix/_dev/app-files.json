{
  "app.jsx": "import React from 'react';\nimport { IonApp, IonRouterOutlet } from '@ionic/react';\nimport { IonReactHashRouter } from '@ionic/react-router';\nimport { Switch, Route } from 'react-router-dom';\nimport ActMatrixForm from './components/ActMatrixForm';\nimport AwayMovesDetail from './components/AwayMovesDetail.jsx';\nimport { MatrixProvider } from './store/matrixStore';\nimport styles from './styles/App.module.css';\nimport './styles/PaperTheme.css';\n\n/**\n * 主应用组件\n * \n * 当前使用 Welcome 组件作为演示页面\n * 在实际开发中，请替换 Welcome 组件为您的应用内容\n */\nexport default function App() {\n    return (\n        <MatrixProvider>\n            <IonApp>\n                <IonReactHashRouter>\n                    <IonRouterOutlet>\n                        <Switch>\n                            <Route exact path=\"/\">\n                                <ActMatrixForm />\n                            </Route>\n                            <Route path=\"/away/:matrixId?\">\n                                <AwayMovesDetail />\n                            </Route>\n                        </Switch>\n                    </IonRouterOutlet>\n                </IonReactHashRouter>\n            </IonApp>\n        </MatrixProvider>\n    );\n}",
  "components/ActMatrixForm.jsx": "import React, { useEffect, useState, useRef } from 'react';\nimport {\n    IonContent,\n    IonButton,\n    IonItem,\n    IonLabel,\n    IonInput,\n    IonList,\n    IonSpinner,\n    IonModal,\n    IonHeader,\n    IonToolbar,\n    IonTitle,\n    IonButtons,\n    IonIcon,\n    IonItemSliding,\n    IonItemOptions,\n    IonItemOption,\n    IonPage,\n    IonFab,\n    IonFabButton,\n    useIonViewDidEnter,\n    IonAlert,\n} from '@ionic/react';\nimport { useHistory, useResume } from 'react-router-dom';\nimport { PageHeader } from '@morphixai/components';\nimport AppSdk from '@morphixai/app-sdk';\nimport { reportError } from '@morphixai/lib';\nimport {\n    close,\n    add,\n    trash,\n    create,\n    arrowForward,\n    arrowBack,\n    time,\n    grid,\n    eye,\n} from 'ionicons/icons';\nimport styles from '../styles/ActMatrixForm.module.css';\nimport HistoryPage from './HistoryPage.jsx';\nimport { useMatrix } from '../store/matrixStore';\nimport { STORAGE_KEY } from '../store/matrixStore';\nconst COLLECTION_NAME = 'act_matrix_quadrants';\n\n// 象限类型定义\nconst QUADRANT_TYPES = {\n    INNER_EXPERIENCE: 'inner_experience', // 左下：内在体验\n    AWAY_MOVES: 'away_moves', // 左上：远离行为\n    VALUES: 'values', // 右下：价值/对你重要的事(人)\n    TOWARD_MOVES: 'toward_moves', // 右上：价值行动\n};\n\nconst QUADRANT_CONFIG = {\n    [QUADRANT_TYPES.INNER_EXPERIENCE]: {\n        title: '负面内在体验',\n        subtitle: '朝向重要的事(人)的时候，阻碍你的负面内心感受是什么?',\n        question: '朝向重要的事(人)的时候，阻碍你的负面内心感受是什么?',\n        placeholder: '例如：恐惧、焦虑、\"我不够好\"的想法',\n        position: 'left-bottom',\n        color: '#ef4444',\n    },\n    [QUADRANT_TYPES.AWAY_MOVES]: {\n        title: '远离行为',\n        subtitle: '为了解决你的负面内心体验，你会做什么?',\n        question: '为了解决你的负面内心体验，你会做什么?',\n        placeholder: '例如：逃避、拖延、刷手机、找借口',\n        position: 'left-top',\n        color: '#f97316',\n    },\n    [QUADRANT_TYPES.VALUES]: {\n        title: '对你重要的事(人)',\n        subtitle: '对你重要的事(人)是什么?',\n        question: '谁和什么对你是重要的？',\n        placeholder: '例如：家人、成长、诚实、创造价值',\n        position: 'right-bottom',\n        color: '#10b981',\n    },\n    [QUADRANT_TYPES.TOWARD_MOVES]: {\n        title: '趋向行为',\n        subtitle: '朝向对你重要的事的时候，你会做什么?',\n        question: '朝向对你重要的事的时候，你会做什么?',\n        placeholder: '例如：主动沟通、练习技能、关心他人',\n        position: 'right-top',\n        color: '#7A6C5D',\n    },\n};\n\nexport default function ActMatrixForm() {\n    const pageRef = useRef(null);\n    const inputRef = useRef(null);\n    const { currentMatrixId, setCurrentMatrix, createNewMatrix } = useMatrix();\n    const history = useHistory();\n    const [loading, setLoading] = useState(false);\n    const [quadrants, setQuadrants] = useState({\n        [QUADRANT_TYPES.INNER_EXPERIENCE]: [],\n        [QUADRANT_TYPES.AWAY_MOVES]: [],\n        [QUADRANT_TYPES.VALUES]: [],\n        [QUADRANT_TYPES.TOWARD_MOVES]: [],\n    });\n\n    // 模态框状态\n    const [modalOpen, setModalOpen] = useState(false);\n    const [historyModalOpen, setHistoryModalOpen] = useState(false);\n    const [activeQuadrant, setActiveQuadrant] = useState(null);\n    const [newItemText, setNewItemText] = useState('');\n    const [editingItem, setEditingItem] = useState(null);\n    const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);\n    const [itemToDelete, setItemToDelete] = useState(null);\n    // 根据是否存在 order 字段决定排序方式\n    const sortItems = (items) => {\n        const hasAnyOrder =\n            Array.isArray(items) &&\n            items.some((i) => typeof i.order === 'number');\n        if (hasAnyOrder) {\n            return items.slice().sort((a, b) => {\n                const ao =\n                    typeof a.order === 'number'\n                        ? a.order\n                        : Number.POSITIVE_INFINITY;\n                const bo =\n                    typeof b.order === 'number'\n                        ? b.order\n                        : Number.POSITIVE_INFINITY;\n                return ao - bo; // 数值越小排越前\n            });\n        }\n        // 无 order 时按创建时间正序：先添加的在前，后添加的在后\n        return items\n            .slice()\n            .sort((a, b) => (a.createdAt || 0) - (b.createdAt || 0));\n    };\n\n    useEffect(() => {\n        console.log(\n            '[ActMatrixForm] currentMatrixId changed:',\n            currentMatrixId\n        );\n        // 当有选中的矩阵时加载；否则清空\n\n        if (currentMatrixId) {\n            loadQuadrantData();\n        } else {\n            setQuadrants({\n                [QUADRANT_TYPES.INNER_EXPERIENCE]: [],\n                [QUADRANT_TYPES.AWAY_MOVES]: [],\n                [QUADRANT_TYPES.VALUES]: [],\n                [QUADRANT_TYPES.TOWARD_MOVES]: [],\n            });\n        }\n    }, [currentMatrixId]);\n\n    // 页面进入时，如已选择矩阵则主动刷新一次\n    // useIonViewDidEnter(() => {\n    //     console.log(\n    //         '[ActMatrixForm] view did enter, currentMatrixId:',\n    //         currentMatrixId\n    //     );\n    //     if (currentMatrixId) {\n    //         loadQuadrantData();\n    //     }\n    // });\n\n    // 避免在组件尚未完成挂载前触发 setState 的告警\n    const isMountedRef = useRef(false);\n    useEffect(() => {\n        isMountedRef.current = true;\n        return () => {\n            isMountedRef.current = false;\n        };\n    }, []);\n\n    // 页面重新进入前台时刷新数据\n    useResume(() => {\n        // 将执行延迟到下一事件循环，确保组件已完成挂载\n        setTimeout(() => {\n            if (isMountedRef.current && currentMatrixId) {\n                loadQuadrantData();\n            }\n        }, 0);\n    });\n\n    const loadQuadrantData = async () => {\n        if (!currentMatrixId) return;\n\n        console.log(\n            '[ActMatrixForm] loadQuadrantData start, matrixId:',\n            currentMatrixId\n        );\n        setLoading(true);\n        // 仅按当前矩阵ID查询，避免全量扫描\n        try {\n            const result = await AppSdk.appData.queryData({\n                collection: COLLECTION_NAME,\n                query: [\n                    { key: 'matrixId', operator: 'eq', value: currentMatrixId },\n                ],\n            });\n            console.log('[ActMatrixForm] query result count:', result);\n\n            const newQuadrants = {\n                [QUADRANT_TYPES.INNER_EXPERIENCE]: [],\n                [QUADRANT_TYPES.AWAY_MOVES]: [],\n                [QUADRANT_TYPES.VALUES]: [],\n                [QUADRANT_TYPES.TOWARD_MOVES]: [],\n            };\n\n            if (Array.isArray(result)) {\n                result.forEach((item) => {\n                    if (item.quadrantType && newQuadrants[item.quadrantType]) {\n                        newQuadrants[item.quadrantType].push(item);\n                    }\n                });\n\n                // 对每个象限排序：若有 order 则按 order，否则按创建时间倒序\n                Object.keys(newQuadrants).forEach((key) => {\n                    newQuadrants[key] = sortItems(newQuadrants[key]);\n                });\n            }\n\n            setQuadrants(newQuadrants);\n            console.log('[ActMatrixForm] quadrants updated');\n        } catch (error) {\n            await reportError(error, 'JavaScriptError', {\n                component: 'ActMatrixForm',\n                action: 'loadQuadrantData',\n            });\n            console.error('[ActMatrixForm] loadQuadrantData error:', error);\n        } finally {\n            setLoading(false);\n            console.log('[ActMatrixForm] loadQuadrantData end');\n        }\n    };\n\n    const handleQuadrantClick = (quadrantType) => {\n        setActiveQuadrant(quadrantType);\n        setModalOpen(true);\n        setNewItemText('');\n        setEditingItem(null);\n    };\n\n    // 更好的方法：直接从输入框获取最新值\n    const handleAddItemWithLatestValue = async () => {\n        // 直接从输入元素获取当前值，确保是最新的\n        const currentValue = inputRef.current?.value || newItemText;\n        if (!currentMatrixId) {\n            alert('请先创建矩阵');\n        }\n        if (!activeQuadrant) {\n            alert('请先选择象限');\n        }\n        if (!currentValue.trim()) {\n            alert('请先输入内容');\n        }\n        if (!currentValue.trim() || !activeQuadrant || !currentMatrixId) return;\n\n        try {\n            // 计算新条目的顺序：若已有 order，则插入到末尾（最大值 + 1）\n            const currentItems = quadrants[activeQuadrant] || [];\n            const itemsWithOrder = currentItems.filter(\n                (i) => typeof i.order === 'number'\n            );\n            const hasAnyOrder = itemsWithOrder.length > 0;\n            let nextOrder;\n            if (hasAnyOrder) {\n                const maxOrder = Math.max(\n                    ...itemsWithOrder.map((i) => i.order)\n                );\n                nextOrder = (isFinite(maxOrder) ? maxOrder : -1) + 1;\n            }\n\n            const data = {\n                matrixId: currentMatrixId,\n                quadrantType: activeQuadrant,\n                content: currentValue.trim(),\n                createdAt: Date.now(),\n                ...(typeof nextOrder === 'number' ? { order: nextOrder } : {}),\n            };\n\n            const created = await AppSdk.appData.createData({\n                collection: COLLECTION_NAME,\n                data,\n            });\n\n            setQuadrants((prev) => ({\n                ...prev,\n                [activeQuadrant]: sortItems([\n                    created,\n                    ...(prev[activeQuadrant] || []),\n                ]),\n            }));\n\n            setNewItemText('');\n            // 同时清空输入框\n            if (inputRef.current) {\n                inputRef.current.value = '';\n            }\n            // currentId 已在 store 内持久化，无需额外标记\n        } catch (error) {\n            await reportError(error, 'JavaScriptError', {\n                component: 'ActMatrixForm',\n                action: 'handleAddItemWithLatestValue',\n            });\n            alert('添加失败' + error?.message);\n        }\n    };\n\n    // 拖拽排序并持久化顺序\n    const persistOrder = async (quadrantType, items) => {\n        try {\n            await Promise.all(\n                items.map((it, idx) =>\n                    AppSdk.appData.updateData({\n                        collection: COLLECTION_NAME,\n                        id: it.id,\n                        data: { order: idx },\n                    })\n                )\n            );\n        } catch (error) {\n            await reportError(error, 'JavaScriptError', {\n                component: 'ActMatrixForm',\n                action: 'persistOrder',\n            });\n            console.error('[ActMatrixForm] persistOrder error:', error);\n        }\n    };\n\n    const handleDragStart = (e, index) => {\n        try {\n            e.dataTransfer.setData('text/plain', String(index));\n            e.dataTransfer.effectAllowed = 'move';\n        } catch (_) {}\n    };\n\n    const handleDragOver = (e) => {\n        e.preventDefault();\n        try {\n            e.dataTransfer.dropEffect = 'move';\n        } catch (_) {}\n    };\n\n    const handleDrop = (e, targetIndex) => {\n        e.preventDefault();\n        const sourceIndex = parseInt(e.dataTransfer.getData('text/plain'), 10);\n        if (\n            !Number.isFinite(sourceIndex) ||\n            sourceIndex === targetIndex ||\n            !activeQuadrant\n        )\n            return;\n        setQuadrants((prev) => {\n            const list = [...(prev[activeQuadrant] || [])];\n            const [moved] = list.splice(sourceIndex, 1);\n            list.splice(targetIndex, 0, moved);\n            const updated = { ...prev, [activeQuadrant]: list };\n            // 异步持久化顺序\n            persistOrder(activeQuadrant, list);\n            // currentId 已在 store 内持久化\n            return updated;\n        });\n    };\n\n    const handleEditItem = async (item) => {\n        if (!newItemText.trim()) return;\n\n        try {\n            const updated = await AppSdk.appData.updateData({\n                collection: COLLECTION_NAME,\n                id: item.id,\n                data: { content: newItemText.trim() },\n            });\n\n            setQuadrants((prev) => ({\n                ...prev,\n                [activeQuadrant]: prev[activeQuadrant].map((i) =>\n                    i.id === item.id ? updated : i\n                ),\n            }));\n\n            setNewItemText('');\n            setEditingItem(null);\n            // currentId 已在 store 内持久化\n        } catch (error) {\n            await reportError(error, 'JavaScriptError', {\n                component: 'ActMatrixForm',\n                action: 'handleEditItem',\n            });\n        }\n    };\n\n    const handleDeleteItem = async (item) => {\n        try {\n            await AppSdk.appData.deleteData({\n                collection: COLLECTION_NAME,\n                id: item.id,\n            });\n\n            // 防御式更新：跨所有象限移除该条目，避免依赖 activeQuadrant 状态\n            setQuadrants((prev) => {\n                const updated = { ...prev };\n                Object.keys(updated).forEach((key) => {\n                    updated[key] = (updated[key] || []).filter(\n                        (i) => i.id !== item.id\n                    );\n                });\n                return updated;\n            });\n            // currentId 已在 store 内持久化\n        } catch (error) {\n            await reportError(error, 'JavaScriptError', {\n                component: 'ActMatrixForm',\n                action: 'handleDeleteItem',\n            });\n        }\n    };\n\n    const requestDeleteItem = (item) => {\n        setItemToDelete(item);\n        setDeleteConfirmOpen(true);\n    };\n\n    const confirmDeleteItem = async () => {\n        if (itemToDelete) {\n            await handleDeleteItem(itemToDelete);\n        }\n        setItemToDelete(null);\n        setDeleteConfirmOpen(false);\n    };\n\n    const startEdit = (item) => {\n        setEditingItem(item);\n        setNewItemText(item.content);\n    };\n\n    const closeModal = () => {\n        setModalOpen(false);\n        setActiveQuadrant(null);\n        setNewItemText('');\n        setEditingItem(null);\n    };\n\n    const handleShowHistory = () => {\n        setHistoryModalOpen(true);\n    };\n\n    const handleCloseHistory = () => {\n        setHistoryModalOpen(false);\n    };\n\n    const handleCreateNewMatrix = async () => {\n        try {\n            // 创建新的矩阵ID\n            const newMatrixId = createNewMatrix();\n\n            // 清空当前象限数据\n            setQuadrants({\n                [QUADRANT_TYPES.INNER_EXPERIENCE]: [],\n                [QUADRANT_TYPES.AWAY_MOVES]: [],\n                [QUADRANT_TYPES.VALUES]: [],\n                [QUADRANT_TYPES.TOWARD_MOVES]: [],\n            });\n\n            // 关闭历史记录模态框\n            setHistoryModalOpen(false);\n        } catch (error) {\n            await reportError(error, 'JavaScriptError', {\n                component: 'ActMatrixForm',\n                action: 'handleCreateNewMatrix',\n            });\n        }\n    };\n\n    const activeConfig = activeQuadrant\n        ? QUADRANT_CONFIG[activeQuadrant]\n        : null;\n    const activeItems = activeQuadrant ? quadrants[activeQuadrant] : [];\n\n    return (\n        <IonPage ref={pageRef}>\n            <PageHeader title=\"ACT 矩阵\" />\n            <IonContent className={styles.content}>\n                <div className={styles.container}>\n                    {loading && (\n                        <div className={styles.loadingContainer}>\n                            <IonSpinner name=\"crescent\" />\n                        </div>\n                    )}\n\n                    {/* 当前矩阵ID显示 */}\n                    {/* <div className={styles.currentIdBar}>\n                        当前矩阵ID：{currentMatrixId || '未选择'}\n                    </div> */}\n\n                    {/* ACT 坐标系容器 */}\n                    <div className={styles.coordinateSystem}>\n                        {/* 坐标轴线 */}\n                        <div className={styles.axisLines}>\n                            <div className={styles.horizontalAxis}></div>\n                            <div className={styles.verticalAxis}></div>\n                        </div>\n\n                        {/* 坐标轴标签 - 绝对定位覆盖在轴线上 */}\n                        <div className={styles.axisLabels}>\n                            {/* 顶部标签 */}\n                            <div className={styles.topAxisLabel}>\n                                <div className={styles.axisLabelText}>\n                                    五感体验\n                                </div>\n                            </div>\n\n                            {/* 底部标签 */}\n                            <div className={styles.bottomAxisLabel}>\n                                <div className={styles.axisLabelText}>\n                                    心理体验\n                                </div>\n                            </div>\n\n                            {/* 左侧标签 */}\n                            <div className={styles.leftAxisLabel}>\n                                <IonIcon\n                                    icon={arrowBack}\n                                    className={styles.axisArrow}\n                                />\n                                <div className={styles.axisLabelText}>\n                                    远离away\n                                </div>\n                            </div>\n\n                            {/* 右侧标签 */}\n                            <div className={styles.rightAxisLabel}>\n                                <div className={styles.axisLabelText}>\n                                    趋向toward\n                                </div>\n                                <IonIcon\n                                    icon={arrowForward}\n                                    className={styles.axisArrow}\n                                />\n                            </div>\n                        </div>\n\n                        {/* 四象限网格 - 铺满整个容器 */}\n                        <div className={styles.quadrantGrid}>\n                            {/* 左上象限：远离行为 */}\n                            <div\n                                className={`${styles.quadrant} ${styles.topLeft}`}\n                                onClick={() =>\n                                    handleQuadrantClick(\n                                        QUADRANT_TYPES.AWAY_MOVES\n                                    )\n                                }\n                            >\n                                <div className={styles.quadrantHeader}>\n                                    <h3 className={styles.quadrantTitle}>\n                                        {\n                                            QUADRANT_CONFIG[\n                                                QUADRANT_TYPES.AWAY_MOVES\n                                            ].title\n                                        }\n                                    </h3>\n                                    <p className={styles.quadrantSubtitle}>\n                                        {\n                                            QUADRANT_CONFIG[\n                                                QUADRANT_TYPES.AWAY_MOVES\n                                            ].subtitle\n                                        }\n                                    </p>\n                                </div>\n                                <div className={styles.quadrantContent}>\n                                    {quadrants[QUADRANT_TYPES.AWAY_MOVES].map(\n                                        (item) => (\n                                            <div\n                                                key={item.id}\n                                                className={styles.quadrantItem}\n                                            >\n                                                {truncate(item.content, 30)}\n                                            </div>\n                                        )\n                                    )}\n                                    {quadrants[QUADRANT_TYPES.AWAY_MOVES]\n                                        .length === 0 && (\n                                        <div className={styles.emptyHint}>\n                                            点击添加内容\n                                        </div>\n                                    )}\n                                    {/* 右下角编辑与查看入口 */}\n                                    <button\n                                        onClick={(e) => {\n                                            e.stopPropagation();\n                                            handleQuadrantClick(\n                                                QUADRANT_TYPES.AWAY_MOVES\n                                            );\n                                        }}\n                                        className={styles.quadrantCornerEdit}\n                                        aria-label=\"编辑远离行为\"\n                                    >\n                                        <IonIcon icon={create} />\n                                    </button>\n                                    {/* 右下角小眼睛图标作为详情入口 */}\n                                    <button\n                                        onClick={(e) => {\n                                            e.stopPropagation();\n                                            const id = currentMatrixId;\n                                            if (!id) {\n                                                alert('请先创建矩阵');\n                                                return;\n                                            }\n                                            history.push(\n                                                `/away/${encodeURIComponent(\n                                                    id\n                                                )}`\n                                            );\n                                        }}\n                                        className={styles.quadrantCornerEye}\n                                        aria-label=\"查看远离行为详情\"\n                                    >\n                                        <IonIcon icon={eye} />\n                                    </button>\n                                </div>\n                            </div>\n\n                            {/* 右上象限：趋向行为 */}\n                            <div\n                                className={`${styles.quadrant} ${styles.topRight}`}\n                                onClick={() =>\n                                    handleQuadrantClick(\n                                        QUADRANT_TYPES.TOWARD_MOVES\n                                    )\n                                }\n                            >\n                                <div className={styles.quadrantHeader}>\n                                    <h3 className={styles.quadrantTitle}>\n                                        {\n                                            QUADRANT_CONFIG[\n                                                QUADRANT_TYPES.TOWARD_MOVES\n                                            ].title\n                                        }\n                                    </h3>\n                                    <p className={styles.quadrantSubtitle}>\n                                        {\n                                            QUADRANT_CONFIG[\n                                                QUADRANT_TYPES.TOWARD_MOVES\n                                            ].subtitle\n                                        }\n                                    </p>\n                                </div>\n                                <div className={styles.quadrantContent}>\n                                    {quadrants[QUADRANT_TYPES.TOWARD_MOVES].map(\n                                        (item) => (\n                                            <div\n                                                key={item.id}\n                                                className={styles.quadrantItem}\n                                            >\n                                                {truncate(item.content, 30)}\n                                            </div>\n                                        )\n                                    )}\n                                    {quadrants[QUADRANT_TYPES.TOWARD_MOVES]\n                                        .length === 0 && (\n                                        <div className={styles.emptyHint}>\n                                            点击添加内容\n                                        </div>\n                                    )}\n                                </div>\n                            </div>\n\n                            {/* 左下象限：内在体验 */}\n                            <div\n                                className={`${styles.quadrant} ${styles.bottomLeft}`}\n                                onClick={() =>\n                                    handleQuadrantClick(\n                                        QUADRANT_TYPES.INNER_EXPERIENCE\n                                    )\n                                }\n                            >\n                                <div className={styles.quadrantHeader}>\n                                    <h3 className={styles.quadrantTitle}>\n                                        {\n                                            QUADRANT_CONFIG[\n                                                QUADRANT_TYPES.INNER_EXPERIENCE\n                                            ].title\n                                        }\n                                    </h3>\n                                    <p className={styles.quadrantSubtitle}>\n                                        {\n                                            QUADRANT_CONFIG[\n                                                QUADRANT_TYPES.INNER_EXPERIENCE\n                                            ].subtitle\n                                        }\n                                    </p>\n                                </div>\n                                <div className={styles.quadrantContent}>\n                                    {quadrants[\n                                        QUADRANT_TYPES.INNER_EXPERIENCE\n                                    ].map((item) => (\n                                        <div\n                                            key={item.id}\n                                            className={styles.quadrantItem}\n                                        >\n                                            {truncate(item.content, 30)}\n                                        </div>\n                                    ))}\n                                    {quadrants[QUADRANT_TYPES.INNER_EXPERIENCE]\n                                        .length === 0 && (\n                                        <div className={styles.emptyHint}>\n                                            点击添加内容\n                                        </div>\n                                    )}\n                                </div>\n                            </div>\n\n                            {/* 右下象限：对你重要的事(人) */}\n                            <div\n                                className={`${styles.quadrant} ${styles.bottomRight}`}\n                                onClick={() =>\n                                    handleQuadrantClick(QUADRANT_TYPES.VALUES)\n                                }\n                            >\n                                <div className={styles.quadrantHeader}>\n                                    <h3 className={styles.quadrantTitle}>\n                                        {\n                                            QUADRANT_CONFIG[\n                                                QUADRANT_TYPES.VALUES\n                                            ].title\n                                        }\n                                    </h3>\n                                    <p className={styles.quadrantSubtitle}>\n                                        {\n                                            QUADRANT_CONFIG[\n                                                QUADRANT_TYPES.VALUES\n                                            ].subtitle\n                                        }\n                                    </p>\n                                </div>\n                                <div className={styles.quadrantContent}>\n                                    {quadrants[QUADRANT_TYPES.VALUES].map(\n                                        (item) => (\n                                            <div\n                                                key={item.id}\n                                                className={styles.quadrantItem}\n                                            >\n                                                {truncate(item.content, 30)}\n                                            </div>\n                                        )\n                                    )}\n                                    {quadrants[QUADRANT_TYPES.VALUES].length ===\n                                        0 && (\n                                        <div className={styles.emptyHint}>\n                                            点击添加内容\n                                        </div>\n                                    )}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                {/* 浮动历史记录按钮 */}\n                <button\n                    className={`${styles.floatingButton} ${styles.historyButton}`}\n                    onClick={handleShowHistory}\n                >\n                    <IonIcon icon={time} />\n                </button>\n            </IonContent>\n\n            {/* 象限内容管理模态框 */}\n            <IonModal\n                isOpen={modalOpen}\n                onDidDismiss={closeModal}\n                presentingElement={pageRef.current}\n                canDismiss={true}\n                showBackdrop={true}\n            >\n                <IonHeader>\n                    <IonToolbar>\n                        <IonTitle>{activeConfig?.title}</IonTitle>\n                        <IonButtons slot=\"end\">\n                            <IonButton onClick={closeModal}>\n                                <IonIcon icon={close} />\n                            </IonButton>\n                        </IonButtons>\n                    </IonToolbar>\n                </IonHeader>\n                <IonContent>\n                    <div className={styles.modalContent}>\n                        {activeConfig && (\n                            <div className={styles.modalHeader}>\n                                <p className={styles.modalQuestion}>\n                                    {activeConfig.question}\n                                </p>\n                            </div>\n                        )}\n\n                        {/* 已填写内容列表 - 放到上面 */}\n                        {activeItems.length > 0 && (\n                            <div className={styles.existingItemsSection}>\n                                <IonList>\n                                    {activeItems.map((item, index) => (\n                                        <IonItem\n                                            key={item.id}\n                                            className={styles.existingItem}\n                                            draggable\n                                            onDragStart={(e) =>\n                                                handleDragStart(e, index)\n                                            }\n                                            onDragOver={handleDragOver}\n                                            onDrop={(e) => handleDrop(e, index)}\n                                        >\n                                            <IonLabel>\n                                                <p\n                                                    className={\n                                                        styles.itemContent\n                                                    }\n                                                >\n                                                    {item.content}\n                                                </p>\n                                                <p className={styles.itemDate}>\n                                                    {formatDate(item.createdAt)}\n                                                </p>\n                                            </IonLabel>\n                                            <IonButton\n                                                fill=\"clear\"\n                                                size=\"small\"\n                                                color=\"primary\"\n                                                onClick={() => startEdit(item)}\n                                                slot=\"end\"\n                                            >\n                                                <IonIcon icon={create} />\n                                            </IonButton>\n                                            <IonButton\n                                                fill=\"clear\"\n                                                size=\"small\"\n                                                color=\"danger\"\n                                                onClick={() =>\n                                                    requestDeleteItem(item)\n                                                }\n                                                slot=\"end\"\n                                            >\n                                                <IonIcon icon={trash} />\n                                            </IonButton>\n                                        </IonItem>\n                                    ))}\n                                </IonList>\n                            </div>\n                        )}\n\n                        {/* 添加/编辑输入框 */}\n                        <div className={styles.inputSection}>\n                            {editingItem ? (\n                                <>\n                                    <IonItem className={styles.inputWithButton}>\n                                        <IonInput\n                                            value={newItemText}\n                                            placeholder={\n                                                activeConfig?.placeholder\n                                            }\n                                            onIonInput={(e) =>\n                                                setNewItemText(\n                                                    e.detail.value || ''\n                                                )\n                                            }\n                                            type=\"text\"\n                                        ></IonInput>\n                                    </IonItem>\n                                    <div className={styles.inputActions}>\n                                        <IonButton\n                                            onClick={() =>\n                                                handleEditItem(editingItem)\n                                            }\n                                            disabled={!newItemText.trim()}\n                                            color=\"primary\"\n                                            fill=\"solid\"\n                                        >\n                                            保存修改\n                                        </IonButton>\n                                        <IonButton\n                                            fill=\"outline\"\n                                            onClick={() => {\n                                                setEditingItem(null);\n                                                setNewItemText('');\n                                            }}\n                                        >\n                                            取消\n                                        </IonButton>\n                                    </div>\n                                </>\n                            ) : (\n                                <IonItem className={styles.inputWithButton}>\n                                    <IonInput\n                                        ref={inputRef}\n                                        value={newItemText}\n                                        placeholder={activeConfig?.placeholder}\n                                        onIonInput={(e) =>\n                                            setNewItemText(e.detail.value || '')\n                                        }\n                                        type=\"text\"\n                                        onKeyDown={(e) => {\n                                            if (e.key === 'Enter') {\n                                                e.preventDefault();\n                                                e.stopPropagation();\n                                                handleAddItemWithLatestValue();\n                                            }\n                                        }}\n                                    ></IonInput>\n                                    <IonButton\n                                        slot=\"end\"\n                                        onClick={handleAddItemWithLatestValue}\n                                        disabled={\n                                            !newItemText.trim() ||\n                                            !currentMatrixId\n                                        }\n                                        fill=\"solid\"\n                                        size=\"small\"\n                                        color=\"primary\"\n                                    >\n                                        添加\n                                    </IonButton>\n                                </IonItem>\n                            )}\n                        </div>\n                    </div>\n                </IonContent>\n            </IonModal>\n\n            {/* 删除条目确认弹窗 */}\n            <IonAlert\n                isOpen={deleteConfirmOpen}\n                onDidDismiss={() => {\n                    setDeleteConfirmOpen(false);\n                    setItemToDelete(null);\n                }}\n                header=\"确认删除\"\n                message=\"确定要删除该条目吗？此操作不可撤销。\"\n                buttons={[\n                    {\n                        text: '取消',\n                        role: 'cancel',\n                        handler: () => {\n                            setDeleteConfirmOpen(false);\n                            setItemToDelete(null);\n                        },\n                    },\n                    {\n                        text: '删除',\n                        role: 'destructive',\n                        handler: confirmDeleteItem,\n                    },\n                ]}\n            />\n\n            {/* 历史记录模态框 */}\n            <IonModal\n                isOpen={historyModalOpen}\n                onDidDismiss={handleCloseHistory}\n                presentingElement={pageRef.current}\n                canDismiss={true}\n                showBackdrop={true}\n            >\n                <HistoryPage\n                    onBack={handleCloseHistory}\n                    onCreateNew={handleCreateNewMatrix}\n                />\n            </IonModal>\n        </IonPage>\n    );\n}\n\nfunction truncate(text, maxLength) {\n    if (!text) return '';\n    return text.length > maxLength ? text.slice(0, maxLength) + '…' : text;\n}\n\nfunction formatDate(timestamp) {\n    if (!timestamp) return '';\n    try {\n        const date = new Date(timestamp);\n        const yyyy = date.getFullYear();\n        const mm = String(date.getMonth() + 1).padStart(2, '0');\n        const dd = String(date.getDate()).padStart(2, '0');\n        const hh = String(date.getHours()).padStart(2, '0');\n        const mi = String(date.getMinutes()).padStart(2, '0');\n        return `${yyyy}-${mm}-${dd} ${hh}:${mi}`;\n    } catch (_) {\n        return '';\n    }\n}\n",
  "components/AwayMovesDetail.jsx": "import React, { useEffect, useMemo, useState } from 'react';\nimport {\n    IonPage,\n    IonHeader,\n    IonToolbar,\n    IonTitle,\n    IonButtons,\n    IonButton,\n    IonIcon,\n    IonContent,\n    IonModal,\n    IonRange,\n    IonToggle,\n    IonItem,\n    IonInput,\n    IonSpinner,\n} from '@ionic/react';\nimport { chevronBack, add } from 'ionicons/icons';\nimport AppSdk from '@morphixai/app-sdk';\nimport { reportError } from '@morphixai/lib';\nimport { useHistory, useParams, useResume } from 'react-router-dom';\n\nconst COLLECTION_NAME = 'act_matrix_quadrants';\n\nfunction useQueryParams() {\n    return useMemo(() => {\n        const qs = window.location.hash.split('?')[1] || '';\n        const sp = new URLSearchParams(qs);\n        const obj = {};\n        for (const [k, v] of sp.entries()) obj[k] = v;\n        return obj;\n    }, [window.location.hash]);\n}\n\nexport default function AwayMovesDetail() {\n    const { matrixId: midFromPath } = useParams();\n    const matrixId = midFromPath || '';\n    const [loading, setLoading] = useState(false);\n    const [items, setItems] = useState([]);\n    const history = useHistory();\n    const [scoreModalOpen, setScoreModalOpen] = useState(false);\n    const [presentingEl, setPresentingEl] = useState(null);\n    const [activeScoreTarget, setActiveScoreTarget] = useState(null); // { itemId, dimension, currentPrimary, currentSecondary }\n    const [addModalOpen, setAddModalOpen] = useState(false);\n    const [newItemText, setNewItemText] = useState('');\n\n    const loadItems = async () => {\n        if (!matrixId) return;\n        setLoading(true);\n        try {\n            const result = await AppSdk.appData.queryData({\n                collection: COLLECTION_NAME,\n                query: [\n                    { key: 'matrixId', operator: 'eq', value: matrixId },\n                    { key: 'quadrantType', operator: 'eq', value: 'away_moves' },\n                ],\n            });\n            const list = Array.isArray(result) ? result.slice() : [];\n            const hasOrder = list.some(i => typeof i.order === 'number');\n            list.sort((a, b) => {\n                if (hasOrder) {\n                    const ao = typeof a.order === 'number' ? a.order : Number.POSITIVE_INFINITY;\n                    const bo = typeof b.order === 'number' ? b.order : Number.POSITIVE_INFINITY;\n                    return ao - bo;\n                }\n                return (a.createdAt || 0) - (b.createdAt || 0);\n            });\n            setItems(list);\n        } catch (error) {\n            await reportError(error, 'JavaScriptError', { component: 'AwayMovesDetail', action: 'loadItems' });\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        loadItems();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [matrixId]);\n\n    // 页面重新进入前台时刷新数据\n    useResume(() => {\n        loadItems();\n    });\n\n    // 不使用全局矩阵状态，这里只依赖路由参数 matrixId\n\n    const goBack = () => {\n        history.goBack();\n    };\n\n    const openScoreModal = (itemId, dimension, currentPrimary, currentSecondary) => {\n        setActiveScoreTarget({ itemId, dimension, currentPrimary, currentSecondary });\n        setScoreModalOpen(true);\n    };\n\n    return (\n        <IonPage ref={setPresentingEl}>\n            <IonHeader>\n                <IonToolbar>\n                    <IonButtons slot=\"start\">\n                        <IonButton onClick={goBack}>\n                            <IonIcon icon={chevronBack} /> 返回\n                        </IonButton>\n                    </IonButtons>\n                    <IonTitle>远离行为详情</IonTitle>\n                </IonToolbar>\n            </IonHeader>\n            <IonContent>\n                {loading && (\n                    <div style={{ display: 'flex', justifyContent: 'center', padding: 24 }}>\n                        <IonSpinner name=\"crescent\" />\n                    </div>\n                )}\n\n                {!loading && items.length === 0 && (\n                    <div style={{ padding: 24 }}>\n                        <div style={{ color: '#8a837a', textAlign: 'center', marginBottom: 12 }}>暂无远离行为</div>\n                        <div style={{ display: 'flex', justifyContent: 'center' }}>\n                            <IonButton \n                                onClick={() => setAddModalOpen(true)}\n                                color=\"primary\"\n                                fill=\"solid\"\n                            >\n                                <IonIcon icon={add} slot=\"start\" /> 添加\n                            </IonButton>\n                        </div>\n                    </div>\n                )}\n\n                {!loading && items.length > 0 && (\n                    <div style={{ padding: '12px', overflowX: 'hidden' }}>\n                        <div style={{\n                            display: 'grid',\n                            gridTemplateColumns: '20% 1fr 1fr 1fr',\n                            gap: '8px',\n                            alignItems: 'center',\n                            padding: '8px 6px',\n                            borderBottom: '1px solid var(--line-color)',\n                            color: 'rgba(0,0,0,0.6)',\n                            fontSize: 12,\n                            fontWeight: 600\n                        }}>\n                            <div>远离行为</div>\n                            <div style={{ textAlign: 'center', borderLeft: '1px dashed var(--line-color)', paddingLeft: 8 }}>短期</div>\n                            <div style={{ textAlign: 'center', borderLeft: '1px dashed var(--line-color)', paddingLeft: 8 }}>长期</div>\n                            <div style={{ textAlign: 'center', borderLeft: '1px dashed var(--line-color)', paddingLeft: 8 }}>重要</div>\n                        </div>\n\n                        {items.map((it) => {\n                            const scores = it.scores || {};\n                            const st = scores.shortTerm || {};\n                            const lt = scores.longTerm || {};\n                            const im = scores.importance || {};\n                            return (\n                                <div key={it.id} style={{\n                                    display: 'grid',\n                                    gridTemplateColumns: '20% 1fr 1fr 1fr',\n                                    gap: '8px',\n                                    alignItems: 'center',\n                                    padding: '10px 6px',\n                                    borderBottom: '1px dashed var(--line-color)'\n                                }}>\n                                    <div style={{ fontSize: 14, color: '#2b2b2b', overflowWrap: 'anywhere', wordWrap: 'break-word', whiteSpace: 'normal' }}>{it.content}</div>\n                                    <div style={{ borderLeft: '1px dashed var(--line-color)', paddingLeft: 8, display: 'flex', justifyContent: 'center' }}>\n                                        <ScoreCell primary={st.primary} secondary={st.secondary} onClick={() => openScoreModal(it.id, 'shortTerm', st.primary, st.secondary)} />\n                                    </div>\n                                    <div style={{ borderLeft: '1px dashed var(--line-color)', paddingLeft: 8, display: 'flex', justifyContent: 'center' }}>\n                                        <ScoreCell primary={lt.primary} secondary={lt.secondary} onClick={() => openScoreModal(it.id, 'longTerm', lt.primary, lt.secondary)} />\n                                    </div>\n                                    <div style={{ borderLeft: '1px dashed var(--line-color)', paddingLeft: 8, display: 'flex', justifyContent: 'center' }}>\n                                        <ScoreCell primary={im.primary} secondary={im.secondary} onClick={() => openScoreModal(it.id, 'importance', im.primary, im.secondary)} />\n                                    </div>\n                                </div>\n                            );\n                        })}\n\n                        <div style={{ display: 'flex', justifyContent: 'center', marginTop: 12 }}>\n                            <IonButton \n                                onClick={() => setAddModalOpen(true)}\n                                color=\"primary\"\n                                fill=\"solid\"\n                            >\n                                <IonIcon icon={add} slot=\"start\" /> 添加\n                            </IonButton>\n                        </div>\n                    </div>\n                )}\n\n                <IonModal\n                    isOpen={!!scoreModalOpen}\n                    onDidDismiss={() => setScoreModalOpen(false)}\n                    presentingElement={presentingEl}\n                    canDismiss={true}\n                    showBackdrop={true}\n                >\n                    <ScoreEditor\n                        target={activeScoreTarget}\n                        onClose={() => setScoreModalOpen(false)}\n                        onSave={async ({ primary, secondaryEnabled, secondary }) => {\n                            if (!activeScoreTarget) return;\n                            const dim = activeScoreTarget.dimension;\n                            const itemId = activeScoreTarget.itemId;\n                            const baseItem = items.find(x => x.id === itemId) || {};\n                            try {\n                                // 乐观更新\n                                setItems(prev => prev.map(item => {\n                                    if (item.id !== itemId) return item;\n                                    const nextScores = { ...(item.scores || {}) };\n                                    const nextDim = { ...(nextScores[dim] || {}), primary };\n                                    if (secondaryEnabled) {\n                                        nextDim.secondary = secondary;\n                                    } else {\n                                        if (nextDim.secondary !== undefined) delete nextDim.secondary;\n                                    }\n                                    nextScores[dim] = nextDim;\n                                    return { ...item, scores: nextScores };\n                                }));\n                                // 持久化（读-改-写合并）\n                                const merged = { ...(baseItem.scores || {}) };\n                                const mergedDim = { ...(merged[dim] || {}), primary };\n                                if (secondaryEnabled) {\n                                    mergedDim.secondary = secondary;\n                                } else {\n                                    if (mergedDim.secondary !== undefined) delete mergedDim.secondary;\n                                }\n                                merged[dim] = mergedDim;\n                                await AppSdk.appData.updateData({\n                                    collection: COLLECTION_NAME,\n                                    id: itemId,\n                                    data: {\n                                        // 发送完整字段，确保兼容替换语义的实现\n                                        matrixId: baseItem.matrixId,\n                                        quadrantType: baseItem.quadrantType,\n                                        content: baseItem.content,\n                                        createdAt: baseItem.createdAt,\n                                        ...(typeof baseItem.order === 'number' ? { order: baseItem.order } : {}),\n                                        scores: merged,\n                                    }\n                                });\n                            } catch (error) {\n                                await reportError(error, 'JavaScriptError', { component: 'AwayMovesDetail', action: 'saveScore' });\n                            } finally {\n                                setScoreModalOpen(false);\n                            }\n                        }}\n                    />\n                </IonModal>\n\n                <IonModal\n                    isOpen={addModalOpen}\n                    onDidDismiss={() => setAddModalOpen(false)}\n                    presentingElement={presentingEl}\n                    canDismiss={true}\n                    showBackdrop={true}\n                >\n                    <IonPage>\n                        <IonHeader>\n                            <IonToolbar>\n                                <IonTitle>新增远离行为</IonTitle>\n                                <IonButtons slot=\"end\">\n                                    <IonButton onClick={() => setAddModalOpen(false)}>关闭</IonButton>\n                                </IonButtons>\n                            </IonToolbar>\n                        </IonHeader>\n                        <IonContent>\n                            <div style={{ padding: 16 }}>\n                                <IonItem>\n                                    <IonInput\n                                        value={newItemText}\n                                        placeholder=\"例如：刷手机、拖延、找借口\"\n                                        onIonInput={(e) => setNewItemText(e.detail.value || '')}\n                                    />\n                                </IonItem>\n                                <div style={{ display: 'flex', gap: 8, marginTop: 12 }}>\n                                    <IonButton\n                                        onClick={async () => {\n                                            const text = (newItemText || '').trim();\n                                            if (!text || !matrixId) return;\n                                            try {\n                                                // 计算 next order（如果已有 order 列）\n                                                const itemsWithOrder = items.filter(i => typeof i.order === 'number');\n                                                const hasOrder = itemsWithOrder.length > 0;\n                                                let nextOrder;\n                                                if (hasOrder) {\n                                                    const maxOrder = Math.max(...itemsWithOrder.map(i => i.order));\n                                                    nextOrder = (isFinite(maxOrder) ? maxOrder : -1) + 1;\n                                                }\n                                                const data = {\n                                                    matrixId,\n                                                    quadrantType: 'away_moves',\n                                                    content: text,\n                                                    createdAt: Date.now(),\n                                                    ...(typeof nextOrder === 'number' ? { order: nextOrder } : {}),\n                                                };\n                                                const created = await AppSdk.appData.createData({\n                                                    collection: COLLECTION_NAME,\n                                                    data,\n                                                });\n                                                // 插入并排序\n                                                setItems(prev => {\n                                                    const updated = [created, ...prev];\n                                                    const anyOrder = updated.some(i => typeof i.order === 'number');\n                                                    updated.sort((a, b) => {\n                                                        if (anyOrder) {\n                                                            const ao = typeof a.order === 'number' ? a.order : Number.POSITIVE_INFINITY;\n                                                            const bo = typeof b.order === 'number' ? b.order : Number.POSITIVE_INFINITY;\n                                                            return ao - bo;\n                                                        }\n                                                        return (a.createdAt || 0) - (b.createdAt || 0);\n                                                    });\n                                                    return updated;\n                                                });\n                                                setNewItemText('');\n                                                setAddModalOpen(false);\n                                            } catch (error) {\n                                                await reportError(error, 'JavaScriptError', { component: 'AwayMovesDetail', action: 'createAwayItem' });\n                                            }\n                                        }}\n                                        expand=\"block\"\n                                        disabled={!newItemText.trim()}\n                                        color=\"primary\"\n                                        fill=\"solid\"\n                                    >\n                                        保存\n                                    </IonButton>\n                                    <IonButton fill=\"outline\" onClick={() => setAddModalOpen(false)} expand=\"block\">取消</IonButton>\n                                </div>\n                            </div>\n                        </IonContent>\n                    </IonPage>\n                </IonModal>\n\n                {/* 删除功能已移除 */}\n            </IonContent>\n        </IonPage>\n    );\n}\n\nfunction ScoreRow({ label, value, color }) {\n    const displayValue = Number.isFinite(value) ? value : 0;\n    return (\n        <div style={{ display: 'grid', gridTemplateColumns: '64px 1fr 36px', alignItems: 'center', gap: 8 }}>\n            <div style={{ color: '#6b5d52', fontSize: 13 }}>{label}</div>\n            <IonRange min={-3} max={3} step={1} snaps={true} ticks={true} pin={true} color={color} value={displayValue} disabled />\n            <div style={{ fontSize: 12, color: '#6b5d52', textAlign: 'right' }}>{displayValue}</div>\n        </div>\n    );\n}\n\nfunction ScoreCell({ primary, secondary, onClick }) {\n    const hasPrimary = Number.isFinite(primary);\n    const hasSecondary = Number.isFinite(secondary);\n    const displayValue = hasPrimary && hasSecondary\n        ? `${formatScoreSymbol(primary)} | ${formatScoreSymbol(secondary)}`\n        : (hasPrimary ? String(formatScoreSymbol(primary)) : '');\n    return (\n        <button\n            onClick={onClick}\n            style={{\n                width: '100%',\n                boxSizing: 'border-box',\n                height: 44,\n                border: '1px solid var(--line-color)',\n                borderRadius: 8,\n                background: '#f6f2ea',\n                color: '#2b2b2b',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                fontSize: 18,\n                fontWeight: 600\n            }}\n            aria-label=\"评分\"\n        >\n            {displayValue}\n        </button>\n    );\n}\n\nfunction ScoreEditor({ target, onClose, onSave }) {\n    const [primary, setPrimary] = useState(() => Number.isFinite(target?.currentPrimary) ? target.currentPrimary : 0);\n    const [secondaryEnabled, setSecondaryEnabled] = useState(() => Number.isFinite(target?.currentSecondary));\n    const [secondary, setSecondary] = useState(() => Number.isFinite(target?.currentSecondary) ? target.currentSecondary : 0);\n    useEffect(() => {\n        console.log('target', target);\n        setPrimary(Number.isFinite(target?.currentPrimary) ? target.currentPrimary : 0);\n        setSecondaryEnabled(Number.isFinite(target?.currentSecondary));\n        setSecondary(Number.isFinite(target?.currentSecondary) ? target.currentSecondary : 0);\n    }, [target]);\n    return (\n        <IonPage>\n            <IonHeader>\n                <IonToolbar>\n                    <IonTitle>设置分数</IonTitle>\n                    <IonButtons slot=\"end\">\n                        <IonButton onClick={onClose}>关闭</IonButton>\n                    </IonButtons>\n                </IonToolbar>\n            </IonHeader>\n            <IonContent>\n                <div style={{ padding: 16 }}>\n                    <div style={{ marginBottom: 12, color: '#6b5d52' }}>\n                        维度：{labelOfDimension(target?.dimension)}\n                    </div>\n                    <IonRange\n                        min={-3}\n                        max={3}\n                        step={1}\n                        snaps={true}\n                        ticks={true}\n                        pin={true}\n                        pinFormatter={(v) => formatScoreSymbol(Number(v))}\n                        value={primary}\n                        style={{\n                            '--bar-background': '#bde0fe',\n                            '--bar-background-active': '#bde0fe',\n                        }}\n                        onIonChange={(e) => setPrimary(Number(e.detail.value))}\n                    />\n                    <div style={{\n                        display: 'grid',\n                        gridTemplateColumns: 'repeat(7, 1fr)',\n                        textAlign: 'center',\n                        color: '#8a837a',\n                        fontSize: 18,\n                        marginTop: 6\n                    }}>\n                        <div>---</div>\n                        <div>--</div>\n                        <div>-</div>\n                        <div>0</div>\n                        <div>+</div>\n                        <div>++</div>\n                        <div>+++</div>\n                    </div>\n                    <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginTop: 8 }}>\n                        <div style={{ color: '#6b5d52', fontSize: 14 }}>添加第二个分数</div>\n                        <IonToggle checked={secondaryEnabled} onIonChange={(e) => setSecondaryEnabled(Boolean(e.detail.checked))} />\n                    </div>\n                    {secondaryEnabled && (\n                        <div style={{ marginTop: 8 }}>\n                            <IonRange\n                                min={-3}\n                                max={3}\n                                step={1}\n                                snaps={true}\n                                ticks={true}\n                                pin={true}\n                                pinFormatter={(v) => formatScoreSymbol(Number(v))}\n                                value={secondary}\n                                style={{\n                                    '--bar-background': '#bde0fe',\n                                    '--bar-background-active': '#bde0fe',\n                                }}\n                                onIonChange={(e) => setSecondary(Number(e.detail.value))}\n                            />\n                            <div style={{\n                                display: 'grid',\n                                gridTemplateColumns: 'repeat(7, 1fr)',\n                                textAlign: 'center',\n                                color: '#8a837a',\n                                fontSize: 18,\n                                marginTop: 6\n                            }}>\n                                <div>---</div>\n                                <div>--</div>\n                                <div>-</div>\n                                <div>0</div>\n                                <div>+</div>\n                                <div>++</div>\n                                <div>+++</div>\n                            </div>\n                        </div>\n                    )}\n                    <div style={{ display: 'flex', gap: 8, marginTop: 12 }}>\n                        <IonButton \n                            onClick={() => onSave?.({ primary, secondaryEnabled, secondary })} \n                            expand=\"block\"\n                            color=\"primary\"\n                            fill=\"solid\"\n                        >\n                            保存\n                        </IonButton>\n                        <IonButton fill=\"outline\" onClick={onClose} expand=\"block\">取消</IonButton>\n                    </div>\n                </div>\n            </IonContent>\n        </IonPage>\n    );\n}\n\nfunction labelOfDimension(dim) {\n    if (dim === 'shortTerm') return '短期';\n    if (dim === 'longTerm') return '长期';\n    if (dim === 'importance') return '重要';\n    return '';\n}\n\nfunction openScoreModalFor(setActiveScoreTarget, setScoreModalOpen, itemId, dimension, currentPrimary, currentSecondary) {\n    setActiveScoreTarget({ itemId, dimension, currentPrimary, currentSecondary });\n    setScoreModalOpen(true);\n}\n\nfunction formatScoreSymbol(value) {\n    if (!Number.isFinite(value)) return '-';\n    const n = Math.max(-3, Math.min(3, Number(value)));\n    if (n === 0) return '0';\n    if (n > 0) return '+'.repeat(n);\n    if (n < 0) return '-'.repeat(Math.abs(n));\n    return '0';\n}\n\n\n",
  "components/HistoryPage.jsx": "import React, { useEffect, useState } from 'react';\nimport {\n    IonContent,\n    IonButton,\n    IonItem,\n    IonLabel,\n    IonList,\n    IonSpinner,\n    IonHeader,\n    IonToolbar,\n    IonTitle,\n    IonButtons,\n    IonIcon,\n    IonCard,\n    IonCardHeader,\n    IonCardTitle,\n    IonCardContent,\n    IonGrid,\n    IonRow,\n    IonCol,\n    IonFab,\n    IonFabButton,\n    IonAlert,\n} from '@ionic/react';\nimport AppSdk from '@morphixai/app-sdk';\nimport { reportError } from '@morphixai/lib';\nimport { chevronBack, add, time, grid, trash } from 'ionicons/icons';\nimport styles from '../styles/HistoryPage.module.css';\nimport { useMatrix } from '../store/matrixStore';\n\nconst COLLECTION_NAME = 'act_matrix_quadrants';\nconst MATRIX_SESSIONS_COLLECTION = 'act_matrix_sessions';\n\nexport default function HistoryPage({ onBack, onCreateNew }) {\n    const { currentMatrixId, setCurrentMatrix } = useMatrix();\n    const [loading, setLoading] = useState(false);\n    const [sessions, setSessions] = useState([]);\n    const [confirmOpen, setConfirmOpen] = useState(false);\n    const [matrixIdToDelete, setMatrixIdToDelete] = useState(null);\n\n    useEffect(() => {\n        console.log('[HistoryPage] mounted');\n        loadHistoryData();\n    }, []);\n\n    const loadHistoryData = async () => {\n        console.log('[HistoryPage] loadHistoryData: start');\n        setLoading(true);\n        try {\n            // 获取所有象限数据（如有后端支持，建议分页+只取必要字段）\n            const quadrantsResult = await AppSdk.appData.queryData({\n                collection: COLLECTION_NAME,\n                query: [],\n            });\n            console.log(\n                '[HistoryPage] queryData result count:',\n                Array.isArray(quadrantsResult) ? quadrantsResult.length : 'N/A'\n            );\n\n            // 过滤掉内容为空的条目（仅在历史记录中隐藏空内容）\n            const usableItems = Array.isArray(quadrantsResult)\n                ? quadrantsResult.filter((item) => {\n                      const text = String(item?.content ?? '').trim();\n                      return text.length > 0;\n                  })\n                : [];\n\n            // 按矩阵ID分组数据，创建会话（仅基于非空内容）\n            const sessionMap = new Map();\n\n            if (Array.isArray(usableItems)) {\n                usableItems.forEach((item) => {\n                    const matrixId = item.matrixId || 'default';\n                    const createdAt = item.createdAt || Date.now();\n\n                    if (!sessionMap.has(matrixId)) {\n                        sessionMap.set(matrixId, {\n                            id: matrixId,\n                            matrixId: matrixId,\n                            timestamp: createdAt,\n                            items: [],\n                            isCurrentMatrix: matrixId === currentMatrixId,\n                        });\n                    }\n\n                    const session = sessionMap.get(matrixId);\n                    session.items.push(item);\n                    // 更新时间戳为最新的项目时间\n                    if (createdAt > session.timestamp) {\n                        session.timestamp = createdAt;\n                    }\n                });\n            }\n\n            // 转换为数组并按时间排序\n            const sessionsArray = Array.from(sessionMap.values()).sort(\n                (a, b) => b.timestamp - a.timestamp\n            );\n            console.log('[HistoryPage] sessionsArray (built):', sessionsArray);\n            setSessions(sessionsArray);\n        } catch (error) {\n            await reportError(error, 'JavaScriptError', {\n                component: 'HistoryPage',\n                action: 'loadHistoryData',\n            });\n        } finally {\n            setLoading(false);\n            console.log('[HistoryPage] loadHistoryData: end');\n        }\n    };\n\n    const handleCreateNewMatrix = async () => {\n        try {\n            // 创建新的矩阵会话\n            const newSession = {\n                id: Date.now().toString(),\n                createdAt: Date.now(),\n                name: `ACT矩阵 - ${formatDate(Date.now())}`,\n            };\n\n            // 可以在这里保存会话信息到数据库\n            // await AppSdk.appData.createData({\n            //     collection: MATRIX_SESSIONS_COLLECTION,\n            //     data: newSession\n            // });\n\n            if (onCreateNew) {\n                onCreateNew();\n            }\n        } catch (error) {\n            await reportError(error, 'JavaScriptError', {\n                component: 'HistoryPage',\n                action: 'handleCreateNewMatrix',\n            });\n        }\n    };\n\n    const getQuadrantSummary = (items) => {\n        const quadrantCounts = {\n            away_moves: 0,\n            toward_moves: 0,\n            inner_experience: 0,\n            \n            values: 0,\n        };\n\n        items.forEach((item) => {\n            if (quadrantCounts.hasOwnProperty(item.quadrantType)) {\n                quadrantCounts[item.quadrantType]++;\n            }\n        });\n\n        return quadrantCounts;\n    };\n\n    const getQuadrantName = (type) => {\n        const names = {\n            away_moves: '远离行为',\n            inner_experience: '内在体验',\n            \n            toward_moves: '趋向行为',\n            values: '对你重要的事(人)',\n        };\n        return names[type] || type;\n    };\n\n    const handleViewSessionDetails = (session) => {\n        // 直接切换到指定的矩阵\n        console.log(\n            '[HistoryPage] view details -> setCurrentMatrix:',\n            session.matrixId\n        );\n        setCurrentMatrix(session.matrixId);\n        // 关闭历史记录模态框，返回首页\n        onBack();\n    };\n\n    const handleSwitchToMatrix = (session) => {\n        // 切换到指定的矩阵\n        console.log(\n            '[HistoryPage] switch matrix -> setCurrentMatrix:',\n            session.matrixId\n        );\n        setCurrentMatrix(session.matrixId);\n        // 关闭历史记录模态框\n        onBack();\n    };\n\n    const handleDeleteMatrix = async (matrixId) => {\n        try {\n            console.log('[HistoryPage] delete start, matrixId:', matrixId);\n            setLoading(true);\n            // 查询该矩阵下的所有象限数据\n            const items = await AppSdk.appData.queryData({\n                collection: COLLECTION_NAME,\n                query: [{ key: 'matrixId', operator: 'eq', value: matrixId }],\n            });\n\n            console.log(\n                '[HistoryPage] items to delete (count):',\n                Array.isArray(items) ? items.length : 'N/A',\n                Array.isArray(items) ? items.map((i) => i.id) : []\n            );\n\n            let deleteResults = [];\n            if (Array.isArray(items) && items.length > 0) {\n                // 并发删除并等待完成，收集结果\n                deleteResults = await Promise.all(\n                    items.map(async (item) => {\n                        try {\n                            const res = await AppSdk.appData.deleteData({\n                                collection: COLLECTION_NAME,\n                                id: item.id,\n                            });\n                            return { id: item.id, ok: true, res };\n                        } catch (e) {\n                            return { id: item.id, ok: false, error: String(e) };\n                        }\n                    })\n                );\n            }\n            console.log('[HistoryPage] delete results:', deleteResults);\n            // 如果删除的是当前矩阵，则清空当前选择\n            if (currentMatrixId === matrixId) {\n                console.log('[HistoryPage] deleted current matrix, switching to fallback');\n                // 回退：切换到最新的一个会话（若有），否则创建新矩阵\n                const remainingSessions = sessions.filter(s => s.matrixId !== matrixId);\n                if (remainingSessions.length > 0) {\n                    setCurrentMatrix(remainingSessions[0].matrixId);\n                } else {\n                    // 交给外部创建逻辑\n                    if (typeof onCreateNew === 'function') {\n                        onCreateNew();\n                    } else {\n                        setCurrentMatrix(`matrix_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);\n                    }\n                }\n            }\n\n            // 重新加载列表\n            await loadHistoryData();\n            console.log('[HistoryPage] delete finished, matrixId:', matrixId);\n        } catch (error) {\n            await reportError(error, 'JavaScriptError', {\n                component: 'HistoryPage',\n                action: 'handleDeleteMatrix',\n            });\n            console.error('[HistoryPage] delete error:', error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return (\n        <>\n            <IonHeader>\n                <IonToolbar>\n                    <IonButtons slot=\"start\">\n                        <IonButton onClick={onBack}>\n                            <IonIcon icon={chevronBack} />\n                            返回\n                        </IonButton>\n                    </IonButtons>\n                    <IonTitle>历史记录</IonTitle>\n                </IonToolbar>\n            </IonHeader>\n\n            <IonContent className={styles.content}>\n                <div className={styles.container}>\n                    {loading && (\n                        <div className={styles.loadingContainer}>\n                            <IonSpinner name=\"crescent\" />\n                        </div>\n                    )}\n\n                    {!loading && sessions.length === 0 && (\n                        <div className={styles.emptyState}>\n                            <IonIcon icon={grid} className={styles.emptyIcon} />\n                            <h2>暂无历史记录</h2>\n                            <p>开始创建您的第一个ACT矩阵</p>\n                            <IonButton onClick={handleCreateNewMatrix}>\n                                <IonIcon icon={add} slot=\"start\" />\n                                创建新矩阵\n                            </IonButton>\n                        </div>\n                    )}\n\n                    {!loading && sessions.length > 0 && (\n                        <div className={styles.sessionsList}>\n                            <div className={styles.header}>\n                                <p>共 {sessions.length} 个记录</p>\n                            </div>\n\n                            {sessions.reverse().map((session) => {\n                                const summary = getQuadrantSummary(\n                                    session.items\n                                );\n                                return (\n                                    <IonCard\n                                        key={session.id}\n                                        className={`${styles.sessionCard} ${\n                                            session.isCurrentMatrix\n                                                ? styles.currentMatrix\n                                                : ''\n                                        }`}\n                                    >\n                                        <IonCardHeader>\n                                            <IonCardTitle\n                                                className={styles.sessionTitle}\n                                            >\n                                                <IonIcon\n                                                    icon={time}\n                                                    className={styles.timeIcon}\n                                                />\n                                                {formatDate(session.timestamp)}\n                                                {session.isCurrentMatrix && (\n                                                    <span\n                                                        className={\n                                                            styles.currentLabel\n                                                        }\n                                                    >\n                                                        当前\n                                                    </span>\n                                                )}\n                                            </IonCardTitle>\n                                        </IonCardHeader>\n                                        <IonCardContent>\n                                            <div\n                                                className={\n                                                    styles.sessionSummary\n                                                }\n                                            >\n                                                <IonGrid>\n                                                    <IonRow>\n                                                        {Object.entries(\n                                                            summary\n                                                        ).map(\n                                                            ([type, count]) => (\n                                                                <IonCol\n                                                                    size=\"6\"\n                                                                    key={type}\n                                                                >\n                                                                    <div\n                                                                        className={\n                                                                            styles.quadrantSummary\n                                                                        }\n                                                                    >\n                                                                        <div\n                                                                            className={\n                                                                                styles.quadrantName\n                                                                            }\n                                                                        >\n                                                                            {getQuadrantName(\n                                                                                type\n                                                                            )}\n                                                                        </div>\n                                                                        <div\n                                                                            className={\n                                                                                styles.quadrantCount\n                                                                            }\n                                                                        >\n                                                                            {\n                                                                                count\n                                                                            }{' '}\n                                                                            项\n                                                                        </div>\n                                                                    </div>\n                                                                </IonCol>\n                                                            )\n                                                        )}\n                                                    </IonRow>\n                                                </IonGrid>\n                                            </div>\n                                            {/* 保留下方与删除在一起的“查看详情”，这里移除重复按钮 */}\n                                            <div\n                                                className={\n                                                    styles.sessionActions\n                                                }\n                                            >\n                                                <IonButton\n                                                    fill=\"outline\"\n                                                    size=\"small\"\n                                                    onClick={(e) => {\n                                                        e.preventDefault();\n                                                        e.stopPropagation();\n                                                        handleViewSessionDetails(\n                                                            session\n                                                        );\n                                                    }}\n                                                >\n                                                    查看详情\n                                                </IonButton>\n                                                <IonButton\n                                                    fill=\"outline\"\n                                                    color=\"danger\"\n                                                    size=\"small\"\n                                                    onClick={(e) => {\n                                                        e.preventDefault();\n                                                        e.stopPropagation();\n                                                        console.log(\n                                                            '[HistoryPage] open delete confirm for matrixId:',\n                                                            session.matrixId\n                                                        );\n                                                        setMatrixIdToDelete(\n                                                            session.matrixId\n                                                        );\n                                                        setConfirmOpen(true);\n                                                    }}\n                                                >\n                                                    <IonIcon\n                                                        icon={trash}\n                                                        slot=\"start\"\n                                                    />{' '}\n                                                    删除\n                                                </IonButton>\n                                            </div>\n                                        </IonCardContent>\n                                    </IonCard>\n                                );\n                            })}\n                        </div>\n                    )}\n                </div>\n\n                {/* 浮动新建按钮 */}\n                <IonFab vertical=\"bottom\" horizontal=\"end\" slot=\"fixed\">\n                    <IonFabButton onClick={handleCreateNewMatrix}>\n                        {console.log(\n                            '[HistoryPage] render, sessions length:',\n                            sessions.length,\n                            'currentMatrixId:',\n                            currentMatrixId\n                        )}\n                        <IonIcon icon={add} />\n                    </IonFabButton>\n                </IonFab>\n\n                {/* 删除确认弹窗 */}\n                <IonAlert\n                    isOpen={confirmOpen}\n                    onDidDismiss={() => {\n                        setConfirmOpen(false);\n                        setMatrixIdToDelete(null);\n                    }}\n                    header=\"确认删除\"\n                    message=\"删除该矩阵将移除其下所有内容，且不可恢复。是否继续？\"\n                    buttons={[\n                        {\n                            text: '取消',\n                            role: 'cancel',\n                            handler: () => {\n                                setConfirmOpen(false);\n                                setMatrixIdToDelete(null);\n                            },\n                        },\n                        {\n                            text: '删除',\n                            role: 'destructive',\n                            handler: async () => {\n                                if (matrixIdToDelete) {\n                                    await handleDeleteMatrix(matrixIdToDelete);\n                                }\n                                setConfirmOpen(false);\n                                setMatrixIdToDelete(null);\n                            },\n                        },\n                    ]}\n                />\n            </IonContent>\n        </>\n    );\n}\n\nfunction formatDate(timestamp) {\n    if (!timestamp) return '';\n    try {\n        const date = new Date(timestamp);\n        const yyyy = date.getFullYear();\n        const mm = String(date.getMonth() + 1).padStart(2, '0');\n        const dd = String(date.getDate()).padStart(2, '0');\n        const hh = String(date.getHours()).padStart(2, '0');\n        const mi = String(date.getMinutes()).padStart(2, '0');\n        return `${yyyy}-${mm}-${dd} ${hh}:${mi}`;\n    } catch (_) {\n        return '';\n    }\n}\n",
  "components/Welcome.jsx": "import React from 'react';\nimport { IonIcon } from '@ionic/react';\nimport { downloadOutline, globeOutline, chatbubbleEllipsesOutline, sparklesOutline, deviceMobileOutline } from 'ionicons/icons';\nimport styles from '../styles/Welcome.module.css';\n\n/**\n * 欢迎组件 - 仅用于演示\n * \n * 这个组件用于展示 Morphix AI Code 的功能和界面设计\n * 在实际开发中，请删除此组件并创建您自己的应用界面\n * \n * @component\n * @returns {JSX.Element} 欢迎页面组件\n */\nexport default function Welcome() {\n    const openDownload = () => {\n        window.open('https://baibian.app/mobile-download', '_blank');\n    };\n\n    const openWebsite = () => {\n        window.open('https://baibian.app/', '_blank');\n    };\n\n    return (\n        <div className={styles.welcomeContainer}>\n\n            {/* 头部 */}\n            <div className={styles.header}>\n                <div className={styles.logo}>\n                    <img\n                        src=\"https://app-shell.focusbe.com/Icon-60@3x.png\"\n                        alt=\"Morphix AI Logo\"\n                        className={styles.logoImage}\n                        onError={(e) => {\n                            e.target.style.display = 'none';\n                        }}\n                    />\n                    <div className={styles.logoGlow}></div>\n                </div>\n\n                <h1 className={styles.title}>\n                    <span className={styles.titleGradient}>Morphix AI</span>\n                    <span className={styles.titleSubtext}>Code</span>\n                </h1>\n                <p className={styles.subtitle}>Create your own app with AI</p>\n            </div>\n\n            {/* 三个步骤 */}\n            <div className={styles.steps}>\n                <div className={styles.step}>\n                    <div className={styles.stepNumber}>1</div>\n                    <div className={styles.stepContent}>\n                        <h3>Describe</h3>\n                        <p>Your app idea</p>\n                    </div>\n                </div>\n\n                <div className={styles.step}>\n                    <div className={styles.stepNumber}>2</div>\n                    <div className={styles.stepContent}>\n                        <h3>Generate</h3>\n                        <p>AI builds a preview</p>\n                    </div>\n                </div>\n\n                <div className={styles.step}>\n                    <div className={styles.stepNumber}>3</div>\n                    <div className={styles.stepContent}>\n                        <h3>Launch</h3>\n                        <p>Use in Morphix</p>\n                    </div>\n                </div>\n            </div>\n\n            {/* 行动按钮 */}\n            <div className={styles.ctaSection}>\n                <button \n                    className={styles.primaryBtn}\n                    onClick={openDownload}\n                >\n                    <IonIcon icon={downloadOutline} />\n                    Download Morphix AI\n                </button>\n                \n                <button \n                    className={styles.secondaryBtn}\n                    onClick={openWebsite}\n                >\n                    <IonIcon icon={globeOutline} />\n                    Visit Website\n                </button>\n            </div>\n\n            {/* 底部 */}\n            <div className={styles.footer}>\n                <p>2024 Morphix AI. Empowering everyone to create apps.</p>\n            </div>\n        </div>\n    );\n}\n",
  "store/matrixStore.js": "import { createContext, useContext, useEffect, useState } from 'react';\nimport AppSdk from '@morphixai/app-sdk';\n// 矩阵状态管理\nexport const STORAGE_KEY = 'act_matrix_current_id';\n\n// 使用 useState 管理状态，移除 reducer\n\n// Context\nconst MatrixContext = createContext();\n\n// Provider 组件\nexport function MatrixProvider({ children }) {\n  const [currentMatrixId, _setCurrentMatrixId] = useState(() => {\n    const id = localStorage.getItem(STORAGE_KEY);\n    return id;\n  });\n  const [matrices, setMatrices] = useState(() => new Map());\n\n  // 生成新的矩阵ID\n  const generateNewMatrixId = () => {\n    return `matrix_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  };\n\n  // 从本地存储加载当前矩阵ID；若不存在则生成并持久化\n\n  // Actions\n  const setCurrentMatrix = (matrixId) => {\n    _setCurrentMatrixId(matrixId);\n\n  };\n\n  // 初始化：如果没有当前矩阵ID，则尝试从存储中选择最新的一个\n  useEffect(() => {\n    if (!currentMatrixId) {\n      initFirstMatrix();\n    }\n  }, [currentMatrixId]);\n  useEffect(() => {\n    try {\n      if (currentMatrixId) {\n        localStorage.setItem(STORAGE_KEY, currentMatrixId);\n      } else {\n        localStorage.removeItem(STORAGE_KEY);\n      }\n    } catch (error) {\n      console.warn('Failed to persist current matrix ID:', error);\n    }\n    console.log('[MatrixProvider] currentMatrixId:', currentMatrixId);\n  }, [currentMatrixId]);\n\n\n  async function initFirstMatrix() {\n    try {\n      const allMatrices = await AppSdk.appData.queryData({\n        collection: 'act_matrix_quadrants',\n        query: [],\n      });\n      if (Array.isArray(allMatrices) && allMatrices.length > 0) {\n        const lastMatrix = allMatrices[allMatrices.length - 1];\n        if (lastMatrix && lastMatrix.matrixId) {\n          setCurrentMatrix(lastMatrix.matrixId);\n          return;\n        }\n      }\n      // 未查询到数据或没有有效的 matrixId，则生成默认矩阵ID\n      const newId = generateNewMatrixId();\n      setCurrentMatrix(newId);\n    } catch (_) {\n      // 查询失败时也生成一个默认矩阵ID，确保可用\n      const fallbackId = generateNewMatrixId();\n      setCurrentMatrix(fallbackId);\n    }\n  }\n\n  const setMatrixData = (matrixId, data) => {\n    setMatrices((prev) => {\n      const newMatrices = new Map(prev);\n      newMatrices.set(matrixId, data);\n      return newMatrices;\n    });\n  };\n\n  const clearMatrixData = (matrixId) => {\n    setMatrices((prev) => {\n      const newMatrices = new Map(prev);\n      newMatrices.delete(matrixId);\n      return newMatrices;\n    });\n  };\n\n  const getCurrentMatrixData = () => {\n    if (!currentMatrixId) return null;\n    return matrices.get(currentMatrixId) || null;\n  };\n\n  // 创建新矩阵\n  const createNewMatrix = () => {\n    const newMatrixId = generateNewMatrixId();\n    setCurrentMatrix(newMatrixId);\n    return newMatrixId;\n  };\n\n  const value = {\n    // 状态\n    currentMatrixId,\n    matrices,\n\n    // Actions\n    setCurrentMatrix,\n    setMatrixData,\n    clearMatrixData,\n    getCurrentMatrixData,\n    createNewMatrix,\n  };\n\n  return (\n    <MatrixContext.Provider value={value}>\n      {children}\n    </MatrixContext.Provider>\n  );\n}\n\n// Hook\nexport function useMatrix() {\n  const context = useContext(MatrixContext);\n  if (!context) {\n    throw new Error('useMatrix must be used within a MatrixProvider');\n  }\n  return context;\n}\n\n//\n",
  "styles/ActMatrixForm.module.css": ".content {\n  /* 继承全局纸质主题，只保留页面特定样式 */\n  overflow: hidden;\n  position: relative;\n}\n\n\n.container {\n  padding: 5px;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  box-sizing: border-box;\n  position: relative;\n  z-index: 1;\n}\n\n.currentIdBar {\n  position: absolute;\n  top: 6px;\n  left: 8px;\n  font-size: 12px;\n  color: var(--muted-ink);\n  background: rgba(255,255,255,0.8);\n  padding: 2px 6px;\n  border-radius: 4px;\n  border: 1px solid var(--line-color);\n  z-index: 4;\n}\n\n.loadingContainer {\n  display: flex;\n  justify-content: center;\n  padding: 40px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 10;\n}\n\n/* ACT 坐标系容器 - 使用全局纸质主题 */\n.coordinateSystem {\n  width: 100%;\n  max-width: 98%;\n  max-height: 80%;\n  aspect-ratio: 0.618;\n  position: relative;\n  background: var(--paper-cream);\n  border-radius: var(--paper-border-radius-large);\n  border: 1px solid var(--line-color);\n  box-shadow: \n    var(--paper-shadow-strong),\n    inset 0 1px 0 rgba(255, 255, 255, 0.8),\n    inset 0 -1px 0 rgba(0, 0, 0, 0.05);\n  overflow: visible;\n  margin: 40px 0;\n  /* 添加轻微的纸张弯曲效果 */\n  transform: perspective(1000px) rotateX(1deg);\n}\n@media (min-width: 768px) {\n  .coordinateSystem {\n    max-width: 768px;\n  }\n}\n\n.coordinateSystem::before {\n  content: \"\";\n  position: absolute;\n  inset: 0;\n  border-radius: inherit;\n  pointer-events: none;\n  z-index: 0;\n  background-image:\n    /* 纸张纤维纹理 */\n    radial-gradient(circle at 20% 30%, rgba(120, 108, 93, 0.02) 1px, transparent 1px),\n    radial-gradient(circle at 80% 70%, rgba(203, 187, 165, 0.025) 1px, transparent 1px),\n    radial-gradient(circle at 60% 20%, rgba(0, 0, 0, 0.008) 1px, transparent 1px),\n    radial-gradient(circle at 30% 80%, rgba(74, 73, 71, 0.015) 1px, transparent 1px),\n    /* 细微的纸张纹理 */\n    repeating-linear-gradient(\n      0deg,\n      transparent,\n      transparent 1px,\n      rgba(0, 0, 0, 0.003) 1px,\n      rgba(0, 0, 0, 0.003) 2px\n    ),\n    repeating-linear-gradient(\n      90deg,\n      transparent,\n      transparent 1px,\n      rgba(0, 0, 0, 0.003) 1px,\n      rgba(0, 0, 0, 0.003) 2px\n    );\n  background-position: \n    0 0, \n    10px 10px, \n    20px 5px, \n    5px 15px,\n    0 0,\n    0 0;\n  background-size: \n    24px 24px, \n    32px 32px, \n    18px 18px, \n    28px 28px,\n    2px 2px,\n    2px 2px;\n}\n\n/* 为坐标系添加纸张边缘的细微阴影 */\n.coordinateSystem::after {\n  content: \"\";\n  position: absolute;\n  inset: -2px;\n  border-radius: 14px;\n  background: linear-gradient(135deg, \n    rgba(0, 0, 0, 0.02) 0%, \n    transparent 20%, \n    transparent 80%, \n    rgba(0, 0, 0, 0.03) 100%\n  );\n  z-index: -1;\n  pointer-events: none;\n}\n\n/* 坐标轴线 - 穿过整个容器 */\n.axisLines {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  pointer-events: none;\n  z-index: 2;\n}\n\n.horizontalAxis {\n  position: absolute;\n  top: 50%;\n  left: 0;\n  right: 0;\n  height: 2px;\n  background: var(--line-color);\n  transform: translateY(-50%);\n}\n\n.verticalAxis {\n  position: absolute;\n  left: 50%;\n  top: 0;\n  bottom: 0;\n  width: 2px;\n  background: var(--line-color);\n  transform: translateX(-50%);\n}\n\n/* 坐标轴标签容器 */\n.axisLabels {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  pointer-events: none;\n  z-index: 3;\n}\n\n/* 轴标签 - 绝对定位在坐标轴上 */\n.topAxisLabel {\n  position: absolute;\n  top: -35px;\n  left: 50%;\n  transform: translateX(-50%);\n  text-align: center;\n  background: rgba(255, 255, 255, 0.9);\n  padding: 3px 6px;\n  border-radius: 4px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.bottomAxisLabel {\n  position: absolute;\n  bottom: -35px;\n  left: 50%;\n  transform: translateX(-50%);\n  text-align: center;\n  background: rgba(255, 255, 255, 0.9);\n  padding: 3px 6px;\n  border-radius: 4px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.leftAxisLabel {\n  position: absolute;\n  left: 0;\n  top: 50%;\n  transform: translateY(-50%);\n  display: flex;\n  align-items: center;\n  gap: 2px;\n  background: rgba(255, 255, 255, 0.9);\n  padding: 3px 6px;\n  border-radius: 4px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.rightAxisLabel {\n  position: absolute;\n  right: 0;\n  top: 50%;\n  transform: translateY(-50%);\n  display: flex;\n  align-items: center;\n  gap: 2px;\n  background: rgba(255, 255, 255, 0.9);\n  padding: 3px 6px;\n  border-radius: 4px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.axisLabelText {\n  font-size: 12px;\n  font-weight: 600;\n  color: var(--ink-black);\n  margin: 0;\n  line-height: 1.2;\n  font-family: var(--ion-font-family);\n}\n\n.axisSubLabelText {\n  font-size: 9px;\n  color: rgba(var(--ink-black-rgb), 0.45) !important;\n  font-style: italic;\n  margin: 0;\n  line-height: 1.2;\n}\n\n.axisArrow {\n  font-size: 10px;\n  color: var(--ink-black);\n}\n\n/* 四象限网格 - 铺满整个容器 */\n.quadrantGrid {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: 1fr 1fr;\n  z-index: 1;\n}\n\n/* 象限区域 - 铺满对应的网格区域 */\n.quadrant {\n  cursor: pointer;\n  transition: all 0.2s ease;\n  background: transparent;\n  display: flex;\n  flex-direction: column;\n  padding: 12px;\n  position: relative;\n  overflow: hidden;\n}\n\n.quadrant:hover {\n  background: rgba(250, 248, 244, 0.6);\n}\n\n.quadrantHeader {\n  margin-bottom: 12px;\n}\n\n.quadrantTitle {\n  font-size: 15px;\n  font-weight: 600;\n  margin: 0 0 4px 0;\n  color: var(--ink-black);\n  font-family: var(--ion-font-family);\n}\n\n.quadrantSubtitle {\n  font-size: 12px;\n  color: rgba(var(--ink-black-rgb), 0.55) !important;\n  margin: 0;\n  line-height: 1.3;\n}\n\n.quadrantContent {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n/* 右下角“眼睛”小按钮（进入详情） */\n.quadrantCornerEye {\n  position: absolute;\n  right: 8px;\n  bottom: 8px;\n  width: 28px;\n  height: 28px;\n  border-radius: 50%;\n  background: rgba(0, 0, 0, 0.05);\n  border: 1px solid var(--line-color);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #6b5d52;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.quadrantCornerEye:hover {\n  background: rgba(0, 0, 0, 0.08);\n  transform: translateY(-1px);\n}\n\n.quadrantCornerEye ion-icon {\n  font-size: 16px;\n}\n\n/* 右下角“编辑”小按钮（打开象限编辑弹窗） */\n.quadrantCornerEdit {\n  position: absolute;\n  right: 40px;\n  bottom: 8px;\n  width: 28px;\n  height: 28px;\n  border-radius: 50%;\n  background: rgba(0, 0, 0, 0.05);\n  border: 1px solid var(--line-color);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #6b5d52;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.quadrantCornerEdit:hover {\n  background: rgba(0, 0, 0, 0.08);\n  transform: translateY(-1px);\n}\n\n.quadrantCornerEdit ion-icon {\n  font-size: 16px;\n}\n\n.quadrantItem {\n  background: var(--paper-aged);\n  padding: 4px 6px;\n  border-radius: var(--paper-border-radius);\n  border: 1px solid var(--line-color);\n  font-size: 12px;\n  line-height: 1.3;\n  color: var(--ink-black);\n  margin-bottom: 4px;\n}\n\n.moreItems {\n  font-size: 12px;\n  color: rgba(var(--ink-black-rgb), 0.5) !important;\n  text-align: center;\n  padding: 8px 4px;\n  font-style: italic;\n}\n\n.emptyHint {\n  color: #b0a69a;\n  text-align: center;\n  padding: 15px 8px;\n  font-size: 13px;\n  font-style: italic;\n  flex: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/* 模态框样式 */\n.modalContent {\n  padding: 16px;\n  /* background: #ffffff; */\n}\n\n.modalHeader {\n  padding: 0 0 16px 0;\n  border-bottom: 1px solid var(--line-color);\n  margin-bottom: 16px;\n}\n\n.modalSubtitle {\n  color: var(--muted-ink);\n  font-size: 14px;\n  margin: 0;\n}\n\n.modalQuestion {\n  color: var(--ink);\n  font-size: 16px;\n  line-height: 1.5;\n  margin: 0;\n  font-weight: 500;\n}\n\n.inputSection {\n  margin-bottom: 24px;\n}\n\n.inputSection ion-item {\n  --background: transparent;\n  --border-color: var(--line-color);\n  --border-radius: 8px;\n  --padding-start: 0;\n  --padding-end: 0;\n}\n\n.inputSection ion-textarea {\n  --padding-start: 12px;\n  --padding-end: 12px;\n  --padding-top: 12px;\n  --padding-bottom: 12px;\n}\n\n/* 让 ion-input 与 ion-textarea 一致的内边距与字体大小 */\n.inputSection ion-input {\n  --padding-start: 12px;\n  --padding-end: 12px;\n  --padding-top: 12px;\n  --padding-bottom: 12px;\n  font-size: 13px;\n}\n\n.inputActions {\n  padding: 12px 16px 0 16px;\n  display: flex;\n  gap: 8px;\n  border-top: 1px solid #e5e7eb;\n  margin-top: 16px;\n}\n\n/* 已填写内容区域样式 */\n.existingItemsSection {\n  margin-bottom: 24px;\n}\n\n.existingItemsSection ion-list {\n  background: transparent;\n  padding: 0;\n}\n\n.existingItem {\n  --background: #f6f2ea;\n  --border-radius: 8px;\n  --padding-start: 12px;\n  --padding-end: 12px;\n  margin-bottom: 8px;\n  border-radius: 8px;\n}\n\n.existingItem:last-child {\n  margin-bottom: 0;\n}\n\n.existingItem ion-button {\n  --padding-start: 8px;\n  --padding-end: 8px;\n  margin-left: 4px;\n  --box-shadow: inset 0 1px 0 rgba(255,255,255,0.5), 0 1px 2px rgba(0,0,0,0.06);\n}\n\n/* 输入框和按钮的布局样式 */\n.inputWithButton {\n  --padding-end: 8px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.inputWithButton ion-textarea {\n  flex: 1;\n}\n\n.inputWithButton ion-input {\n  flex: 1;\n}\n\n.inputWithButton ion-button {\n  --padding-start: 16px;\n  --padding-end: 16px;\n  --padding-top: 8px;\n  --padding-bottom: 8px;\n  margin: 0;\n  flex-shrink: 0;\n  /* 固定较小高度，避免 100% 拉伸 */\n  height: 32px;\n  --box-shadow: inset 0 1px 0 rgba(255,255,255,0.5), 0 1px 2px rgba(0,0,0,0.06);\n}\n\n/* 输入框文字更小 */\n.inputSection ion-textarea {\n  font-size: 13px;\n}\n\n/* 输入框上方标题（问题）更小 */\n.modalQuestion {\n  font-size: 14px;\n}\n\n.itemContent {\n  font-size: 14px;\n  color: #2b2b2b;\n  line-height: 1.5;\n  margin: 0 0 4px 0;\n}\n\n.itemDate {\n  font-size: 12px;\n  color: rgba(var(--ink-black-rgb), 0.5) !important;\n  margin: 0;\n}\n\n/* 浮动历史记录按钮 - 使用全局主题 */\n.floatingButton {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  width: 56px;\n  height: 56px;\n  border-radius: 50%;\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.3s ease;\n  cursor: pointer;\n  z-index: 1000;\n}\n\n.historyButton {\n  background: linear-gradient(135deg, \n    var(--accent-brown) 0%, \n    #6b5d52 50%, \n    var(--accent-brown) 100%\n  );\n  color: #ffffff;\n  box-shadow: \n    0 6px 20px rgba(0, 0, 0, 0.15),\n    0 2px 8px rgba(0, 0, 0, 0.1),\n    inset 0 1px 0 rgba(255, 255, 255, 0.3),\n    inset 0 -1px 0 rgba(0, 0, 0, 0.1);\n}\n\n.historyButton:hover {\n  transform: translateY(-3px) scale(1.05);\n  box-shadow: \n    0 8px 25px rgba(0, 0, 0, 0.2),\n    0 3px 12px rgba(0, 0, 0, 0.15),\n    inset 0 1px 0 rgba(255, 255, 255, 0.4),\n    inset 0 -1px 0 rgba(0, 0, 0, 0.15);\n}\n\n.historyButton:active {\n  transform: translateY(-1px) scale(1.02);\n  box-shadow: \n    0 4px 15px rgba(0, 0, 0, 0.2),\n    0 1px 6px rgba(0, 0, 0, 0.15),\n    inset 0 1px 0 rgba(255, 255, 255, 0.2),\n    inset 0 -1px 0 rgba(0, 0, 0, 0.2);\n}\n\n.historyButton ion-icon {\n  font-size: 24px;\n  filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.2));\n}\n\n\n/* ===== Desktop typography scaling (~1.5x) ===== */\n@media (min-width: 1024px) {\n  .currentIdBar { font-size: 14px; }\n\n  .axisLabelText { font-size: 14px; }\n  .axisSubLabelText { font-size: 10px; }\n  .axisArrow { font-size: 11px; }\n\n  .quadrantTitle { font-size: 18px; }\n  .quadrantSubtitle { font-size: 14px; }\n  .quadrantItem { font-size: 14px; }\n  .moreItems { font-size: 14px; }\n  .emptyHint { font-size: 16px; }\n\n  .modalSubtitle { font-size: 17px; }\n  .modalQuestion { font-size: 20px; }\n\n  .inputSection ion-input { font-size: 16px; }\n  .inputSection ion-textarea { font-size: 16px; }\n\n  .itemContent { font-size: 17px; }\n  .itemDate { font-size: 14px; }\n\n  .historyButton ion-icon { font-size: 32px; }\n}\n",
  "styles/App.module.css": "/* 主应用样式 - 纸质书写主题 */\n\n.content {\n  --padding: 0;\n  /* 继承全局纸质主题变量 */\n  /* background: var(--paper-cream);\n  color: var(--ink-black); */\n  \n  /* 确保所有 Ionic 组件使用纸质主题 */\n  /* --ion-background-color: var(--paper-cream);\n  --ion-text-color: var(--ink-black);\n  --ion-border-color: var(--line-color); */\n}",
  "styles/HistoryPage.module.css": ".content {\n  /* 继承全局纸质主题 */\n  position: relative;\n  overflow: hidden;\n}\n\n\n.container {\n  padding: 16px;\n  min-height: 100%;\n  position: relative;\n  z-index: 1;\n}\n\n.loadingContainer {\n  display: flex;\n  justify-content: center;\n  padding: 40px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 10;\n}\n\n/* 空状态样式 */\n.emptyState {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  padding: 60px 20px;\n  height: 70vh;\n}\n\n.emptyIcon {\n  font-size: 64px;\n  color: var(--muted-ink);\n  margin-bottom: 16px;\n}\n\n.emptyState h2 {\n  color: var(--ink-black);\n  margin: 0 0 8px 0;\n  font-size: 24px;\n  font-weight: 600;\n  font-family: var(--ion-font-family);\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);\n}\n\n.emptyState p {\n  color: var(--muted-ink);\n  margin: 0 0 24px 0;\n  font-size: 16px;\n  line-height: 1.5;\n}\n\n/* 会话列表样式 */\n.sessionsList {\n  max-width: 800px;\n  margin: 0 auto;\n}\n\n.header {\n  text-align: center;\n  margin-bottom: 24px;\n}\n\n.header h2 {\n  color: var(--ink-black);\n  margin: 0 0 4px 0;\n  font-size: 24px;\n  font-weight: 600;\n  font-family: var(--ion-font-family);\n}\n\n.header p {\n  color: var(--muted-ink);\n  margin: 0;\n  font-size: 14px;\n}\n\n/* 会话卡片样式 */\n.sessionCard {\n  margin-bottom: 16px;\n  border-radius: var(--paper-border-radius-large);\n  border: 1px solid rgba(229, 226, 218, 0.4);\n  box-shadow: \n    /* 主阴影 - 更柔和 */\n    0 2px 12px rgba(0, 0, 0, 0.06),\n    /* 近距离阴影 */\n    0 1px 3px rgba(0, 0, 0, 0.04),\n    /* 纸张边缘高光 - 更明显 */\n    inset 0 1px 0 rgba(255, 255, 255, 0.9),\n    /* 纸张底部阴影 - 更柔和 */\n    inset 0 -1px 0 rgba(0, 0, 0, 0.03);\n  transition: all 0.3s ease;\n  background: var(--paper-white);\n  position: relative;\n  /* tighten default paddings on ion-card */\n  --padding-start: 12px;\n  --padding-end: 12px;\n  --padding-top: 8px;\n  --padding-bottom: 12px;\n}\n\n.sessionCard::before {\n  content: \"\";\n  position: absolute;\n  inset: 0;\n  border-radius: inherit;\n  pointer-events: none;\n  z-index: 0;\n  background-image:\n    /* 纸张纤维纹理 */\n    radial-gradient(circle at 20% 30%, rgba(120, 108, 93, 0.015) 1px, transparent 1px),\n    radial-gradient(circle at 80% 70%, rgba(203, 187, 165, 0.02) 1px, transparent 1px),\n    radial-gradient(circle at 60% 20%, rgba(0, 0, 0, 0.005) 1px, transparent 1px),\n    radial-gradient(circle at 30% 80%, rgba(74, 73, 71, 0.01) 1px, transparent 1px),\n    /* 细微的纸张纹理 */\n    repeating-linear-gradient(\n      0deg,\n      transparent,\n      transparent 1px,\n      rgba(0, 0, 0, 0.002) 1px,\n      rgba(0, 0, 0, 0.002) 2px\n    );\n  background-position: \n    0 0, \n    8px 8px, \n    16px 4px, \n    4px 12px,\n    0 0;\n  background-size: \n    20px 20px, \n    24px 24px, \n    14px 14px, \n    18px 18px,\n    2px 2px;\n}\n\n.sessionCard:hover {\n  box-shadow: \n    /* 悬停时更明显的阴影 */\n    0 4px 20px rgba(0, 0, 0, 0.08),\n    0 2px 6px rgba(0, 0, 0, 0.06),\n    /* 更强的内部高光 */\n    inset 0 1px 0 rgba(255, 255, 255, 0.95),\n    inset 0 -1px 0 rgba(0, 0, 0, 0.04);\n  transform: translateY(-1px);\n  border-color: rgba(229, 226, 218, 0.6);\n}\n\n/* tighten header/content paddings inside each card */\n.sessionCard ion-card-header {\n  padding: 8px 12px 4px;\n}\n\n.sessionCard ion-card-content {\n  padding: 8px 12px 10px;\n}\n\n.currentMatrix {\n  border: 1px solid rgba(122, 108, 93, 0.3);\n  background: linear-gradient(135deg, \n    rgba(122, 108, 93, 0.03) 0%, \n    rgba(203, 187, 165, 0.04) 50%, \n    rgba(122, 108, 93, 0.03) 100%\n  );\n  box-shadow: \n    /* 主阴影 - 温暖色调 */\n    0 3px 16px rgba(122, 108, 93, 0.12),\n    /* 近距离阴影 */\n    0 1px 4px rgba(122, 108, 93, 0.08),\n    /* 纸张边缘高光 */\n    inset 0 1px 0 rgba(255, 255, 255, 0.95),\n    /* 纸张底部阴影 */\n    inset 0 -1px 0 rgba(122, 108, 93, 0.06);\n}\n\n.currentMatrix:hover {\n  box-shadow: \n    0 5px 24px rgba(122, 108, 93, 0.16),\n    0 2px 6px rgba(122, 108, 93, 0.12),\n    inset 0 1px 0 rgba(255, 255, 255, 0.98),\n    inset 0 -1px 0 rgba(122, 108, 93, 0.08);\n  border-color: rgba(122, 108, 93, 0.4);\n}\n\n.sessionTitle {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  color: var(--ink-black);\n  font-size: 18px;\n  font-weight: 600;\n  margin: 0;\n  position: relative;\n  font-family: var(--ion-font-family);\n}\n\n.currentLabel {\n  background: var(--ion-color-primary-shade);\n  color: #ffffff;\n  font-size: 10px;\n  font-weight: 600;\n  padding: 3px 8px;\n  border-radius: 12px;\n  margin-left: auto;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n}\n\n.timeIcon {\n  color: var(--accent-brown);\n  font-size: 20px;\n}\n\n/* Align add button color with homepage history button */\n.content ion-fab-button {\n  --background: linear-gradient(135deg, var(--accent-brown) 0%, #6b5d52 50%, var(--accent-brown) 100%);\n  --color: #ffffff;\n  --box-shadow: \n    0 6px 20px rgba(0, 0, 0, 0.15),\n    0 2px 8px rgba(0, 0, 0, 0.1),\n    inset 0 1px 0 rgba(255, 255, 255, 0.3),\n    inset 0 -1px 0 rgba(0, 0, 0, 0.1);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  /* 添加纸质感纹理 */\n  background-image:\n    radial-gradient(circle at 30% 30%, rgba(255, 255, 255, 0.1) 1px, transparent 1px),\n    radial-gradient(circle at 70% 70%, rgba(0, 0, 0, 0.05) 1px, transparent 1px);\n  background-size: 8px 8px, 12px 12px;\n  background-position: 0 0, 4px 4px;\n}\n\n.content ion-fab-button:hover {\n  --box-shadow: \n    0 8px 25px rgba(0, 0, 0, 0.2),\n    0 3px 12px rgba(0, 0, 0, 0.15),\n    inset 0 1px 0 rgba(255, 255, 255, 0.4),\n    inset 0 -1px 0 rgba(0, 0, 0, 0.15);\n  transform: translateY(-3px) scale(1.05);\n}\n\n.content ion-fab-button:active {\n  --box-shadow: \n    0 4px 15px rgba(0, 0, 0, 0.2),\n    0 1px 6px rgba(0, 0, 0, 0.15),\n    inset 0 1px 0 rgba(255, 255, 255, 0.2),\n    inset 0 -1px 0 rgba(0, 0, 0, 0.2);\n  transform: translateY(-1px) scale(1.02);\n}\n\n.content ion-fab-button ion-icon {\n  filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.2));\n}\n\n/* 会话摘要样式 */\n.sessionSummary {\n  margin-bottom: 8px;\n}\n\n.sessionSummary ion-col {\n  padding: 4px;\n}\n\n.quadrantSummary {\n  background: linear-gradient(135deg, \n    rgba(249, 247, 240, 0.8) 0%, \n    rgba(245, 241, 232, 0.9) 100%\n  );\n  border: 1px solid rgba(229, 226, 218, 0.3);\n  border-radius: var(--paper-border-radius);\n  padding: 8px;\n  text-align: center;\n  margin-bottom: 8px;\n  box-shadow: \n    /* 轻微内陷效果 */\n    inset 0 1px 0 rgba(255, 255, 255, 0.7),\n    inset 0 -1px 0 rgba(0, 0, 0, 0.02),\n    /* 外部轻微阴影 */\n    0 1px 3px rgba(0, 0, 0, 0.03);\n  position: relative;\n}\n\n.quadrantSummary::before {\n  content: \"\";\n  position: absolute;\n  inset: 0;\n  border-radius: inherit;\n  pointer-events: none;\n  background-image:\n    radial-gradient(circle at 30% 30%, rgba(120, 108, 93, 0.008) 1px, transparent 1px),\n    radial-gradient(circle at 70% 70%, rgba(203, 187, 165, 0.012) 1px, transparent 1px);\n  background-size: 10px 10px, 14px 14px;\n  background-position: 0 0, 5px 5px;\n}\n\n.quadrantName {\n  font-size: 12px;\n  color: var(--muted-ink);\n  font-weight: 500;\n  margin-bottom: 4px;\n}\n\n.quadrantCount {\n  font-size: 16px;\n  color: var(--ink-black);\n  font-weight: 600;\n}\n\n/* 会话操作按钮 */\n.sessionActions {\n  display: flex;\n  justify-content: flex-end;\n  gap: 8px;\n}\n\n\n/* 响应式设计 */\n@media (max-width: 768px) {\n  .container {\n    padding: 12px;\n  }\n  \n  .sessionCard {\n    margin-bottom: 12px;\n  }\n  \n  .sessionTitle {\n    font-size: 16px;\n  }\n  \n  .header h2 {\n    font-size: 20px;\n  }\n}\n\n/* ===== Desktop typography scaling (~1.5x) ===== */\n@media (min-width: 1024px) {\n  .emptyState h2 { font-size: 32px; }\n  .emptyState p { font-size: 20px; }\n\n  .header h2 { font-size: 32px; }\n  .header p { font-size: 17px; }\n\n  .sessionTitle { font-size: 23px; }\n  .timeIcon { font-size: 26px; }\n\n  .quadrantName { font-size: 14px; }\n  .quadrantCount { font-size: 20px; }\n}\n",
  "styles/PaperTheme.css": "/* \n * 纸质书写主题 - 全局主题变量\n * 基于 Ionic 高级主题系统\n * 强制使用亮色模式，忽略系统深色模式设置\n */\n\n:root {\n  /* 强制覆盖深色模式，确保始终使用亮色主题 */\n  color-scheme: light !important;\n  /* ===== 纸质感色彩系统 ===== */\n  --paper-cream: #FDFCF9;\n  --paper-white: #FFFFFF;\n  --paper-black: #1a1a1a;\n  --paper-aged: #F8F6F2;\n  --ink-black: #2c2c2c;\n  --ink-blue: #2563eb;\n  --ink-brown: #8b4513;\n  --muted-ink: #6b7280;\n  --pencil-gray: #9ca3af;\n  --line-color: #e5e7eb;\n  --accent-brown: #7c5d3f;\n  --accent-weak: #d1c7b8;\n  --shadow-paper: rgba(0, 0, 0, 0.12);\n  --shadow-deep: rgba(0, 0, 0, 0.18);\n  \n  /* ===== RGB 格式（用于透明度） ===== */\n  --paper-cream-rgb: 253, 252, 249;\n  --ink-black-rgb: 44, 44, 44;\n  --accent-brown-rgb: 124, 93, 63;\n  --muted-ink-rgb: 107, 114, 128;\n  \n  /* ===== Ionic 主题色覆盖 ===== */\n  --ion-color-primary: var(--accent-brown);\n  --ion-color-primary-rgb: var(--accent-brown-rgb);\n  --ion-color-primary-contrast: #ffffff;\n  --ion-color-primary-contrast-rgb: 255, 255, 255;\n  --ion-color-primary-shade: #654a36;\n  --ion-color-primary-tint: #8a6b4f;\n  \n  /* 次要颜色 - 温暖的纸质感 */\n  --ion-color-secondary: #d1c7b8;\n  --ion-color-secondary-rgb: 209, 199, 184;\n  --ion-color-secondary-contrast: #2c2c2c;\n  --ion-color-secondary-contrast-rgb: 44, 44, 44;\n  --ion-color-secondary-shade: #b8aea2;\n  --ion-color-secondary-tint: #d6ccbf;\n  \n  /* 成功色 - 自然绿 */\n  --ion-color-success: #16a34a;\n  --ion-color-success-rgb: 22, 163, 74;\n  --ion-color-success-contrast: #ffffff;\n  --ion-color-success-contrast-rgb: 255, 255, 255;\n  --ion-color-success-shade: #15803d;\n  --ion-color-success-tint: #22c55e;\n  \n  /* 警告色 - 温暖橙 */\n  --ion-color-warning: #ea580c;\n  --ion-color-warning-rgb: 234, 88, 12;\n  --ion-color-warning-contrast: #ffffff;\n  --ion-color-warning-contrast-rgb: 255, 255, 255;\n  --ion-color-warning-shade: #c2410c;\n  --ion-color-warning-tint: #f97316;\n  \n  /* 危险色 - 温和红 */\n  --ion-color-danger: #dc2626;\n  --ion-color-danger-rgb: 220, 38, 38;\n  --ion-color-danger-contrast: #ffffff;\n  --ion-color-danger-contrast-rgb: 255, 255, 255;\n  --ion-color-danger-shade: #b91c1c;\n  --ion-color-danger-tint: #ef4444;\n  \n  /* 深色 - 墨水色 */\n  --ion-color-dark: var(--ink-black);\n  --ion-color-dark-rgb: var(--ink-black-rgb);\n  --ion-color-dark-contrast: var(--paper-cream);\n  --ion-color-dark-contrast-rgb: var(--paper-cream-rgb);\n  --ion-color-dark-shade: #111827;\n  --ion-color-dark-tint: #374151;\n  \n  /* 中等色 - 铅笔灰 */\n  --ion-color-medium: var(--pencil-gray);\n  --ion-color-medium-rgb: 156, 163, 175;\n  --ion-color-medium-contrast: #ffffff;\n  --ion-color-medium-contrast-rgb: 255, 255, 255;\n  --ion-color-medium-shade: #6b7280;\n  --ion-color-medium-tint: #d1d5db;\n  \n  /* 浅色 - 纸张色 */\n  --ion-color-light: var(--paper-cream);\n  --ion-color-light-rgb: var(--paper-cream-rgb);\n  --ion-color-light-contrast: var(--ink-black);\n  --ion-color-light-contrast-rgb: var(--ink-black-rgb);\n  --ion-color-light-shade: #e5e2da;\n  --ion-color-light-tint: #faf9f6;\n  \n  /* ===== 全局应用变量 ===== */\n  --ion-background-color: var(--paper-white);\n  --ion-background-color-rgb: var(--paper-cream-rgb);\n  \n  --ion-text-color: var(--ink-black);\n  --ion-text-color-rgb: var(--ink-black-rgb);\n  \n  --ion-border-color: var(--line-color);\n  \n  /* 字体系统 - 书写感字体 */\n  --ion-font-family: \n    ui-serif, \n    Georgia, \n    Cambria, \n    \"Times New Roman\", \n    Times, \n    serif,\n    -apple-system, \n    BlinkMacSystemFont, \n    \"Segoe UI\", \n    Roboto, \n    Helvetica, \n    Arial, \n    sans-serif;\n  \n  /* 间距系统 */\n  --ion-margin: 16px;\n  --ion-padding: 16px;\n  \n  /* 占位符透明度 */\n  --ion-placeholder-opacity: 0.6;\n  \n  /* ===== 纸质感特效变量 ===== */\n  --paper-texture-opacity: 0.02;\n  --paper-grain-size: 16px;\n  --paper-shadow-soft: 0 2px 8px rgba(0, 0, 0, 0.06);\n  --paper-shadow-medium: 0 4px 16px rgba(0, 0, 0, 0.08);\n  --paper-shadow-strong: 0 8px 32px rgba(0, 0, 0, 0.12);\n  --paper-border-radius: 8px;\n  --paper-border-radius-large: 12px;\n}\n\n/* ===== Base typography scaling ===== */\nhtml {\n  font-size: 16px;\n}\n\n@media (min-width: 1024px) {\n  html {\n    font-size: 24px; /* ~1.5x for desktop */\n  }\n}\n\n/* ===== 全局纸质感背景 ===== */\nbody {\n  background: \n    /* 纸质纹理叠加 */\n    radial-gradient(circle at 20% 80%, rgba(122, 108, 93, 0.03) 0%, transparent 50%),\n    radial-gradient(circle at 80% 20%, rgba(203, 187, 165, 0.04) 0%, transparent 50%),\n    radial-gradient(circle at 40% 40%, rgba(74, 73, 71, 0.02) 0%, transparent 50%),\n    /* 主渐变背景 */\n    linear-gradient(135deg, #4A4947 0%, #3d3c3a 25%, #4A4947 50%, #3a3938 75%, #4A4947 100%),\n    /* 细微的纸质纹理 */\n    repeating-linear-gradient(\n      45deg,\n      transparent,\n      transparent 2px,\n      rgba(255, 255, 255, 0.005) 2px,\n      rgba(255, 255, 255, 0.005) 4px\n    );\n  font-family: var(--ion-font-family);\n  color: var(--ion-text-color);\n}\n\n/* 为 body 添加纸质纹理伪元素 */\nbody::before {\n  content: \"\";\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-image:\n    /* 随机点状纹理模拟纸质感 */\n    radial-gradient(circle at 25% 25%, rgba(255, 255, 255, 0.008) 1px, transparent 1px),\n    radial-gradient(circle at 75% 75%, rgba(0, 0, 0, 0.01) 1px, transparent 1px),\n    radial-gradient(circle at 50% 10%, rgba(203, 187, 165, 0.015) 1px, transparent 1px),\n    radial-gradient(circle at 10% 90%, rgba(122, 108, 93, 0.012) 1px, transparent 1px);\n  background-size: \n    40px 40px,\n    60px 60px,\n    80px 80px,\n    100px 100px;\n  background-position:\n    0 0,\n    20px 20px,\n    40px 40px,\n    60px 60px;\n  pointer-events: none;\n  z-index: -1;\n}\n\n/* ===== 纸质感组件基础样式 ===== */\n\n/* 卡片纸质感 */\nion-card {\n  --background: var(--paper-cream);\n  --color: var(--ink-black);\n  border: 1px solid var(--line-color);\n  box-shadow: \n    var(--paper-shadow-medium),\n    inset 0 1px 0 rgba(255, 255, 255, 0.8),\n    inset 0 -1px 0 rgba(0, 0, 0, 0.05);\n  border-radius: var(--paper-border-radius-large);\n  position: relative;\n}\n\n/* 为卡片添加纸质纹理 */\nion-card::before {\n  content: \"\";\n  position: absolute;\n  inset: 0;\n  border-radius: inherit;\n  pointer-events: none;\n  background-image:\n    radial-gradient(circle at 20% 30%, rgba(122, 108, 93, 0.015) 1px, transparent 1px),\n    radial-gradient(circle at 80% 70%, rgba(203, 187, 165, 0.02) 1px, transparent 1px);\n  background-size: 20px 20px, 24px 24px;\n  background-position: 0 0, 8px 8px;\n  z-index: 0;\n}\n\n/* 确保卡片内容在纹理之上 */\nion-card-header,\nion-card-content {\n  position: relative;\n  z-index: 1;\n}\n\n/* 按钮纸质感 */\nion-button {\n  --border-radius: var(--paper-border-radius);\n  --box-shadow: var(--paper-shadow-soft), inset 0 1px 0 rgba(255, 255, 255, 0.3);\n  font-family: var(--ion-font-family);\n}\n\nion-button:hover {\n  --box-shadow: var(--paper-shadow-medium), inset 0 1px 0 rgba(255, 255, 255, 0.4);\n}\n\n/* 输入框纸质感 */\nion-input,\nion-textarea {\n  --background: var(--paper-white);\n  --color: var(--ink-black);\n  --border-color: var(--line-color);\n  --border-radius: var(--paper-border-radius);\n  --padding-start: 12px;\n  --padding-end: 12px;\n  --padding-top: 8px;\n  --padding-bottom: 8px;\n  font-family: var(--ion-font-family);\n}\n\n/* 工具栏纸质感 */\nion-toolbar {\n  --background: var(--paper-cream);\n  --color: var(--ink-black);\n  --border-color: var(--line-color);\n  --padding-start: 16px;\n  --padding-end: 16px;\n}\n\n/* 标题纸质感 */\nion-title {\n  font-family: var(--ion-font-family);\n  font-weight: 600;\n  color: var(--ink-black);\n}\n\n/* 列表纸质感 */\nion-list {\n  --background: transparent;\n}\n\nion-item {\n  --background: var(--paper-cream);\n  --color: var(--ink-black);\n  --border-color: var(--line-color);\n  --padding-start: 16px;\n  --padding-end: 16px;\n  font-family: var(--ion-font-family);\n}\n\n/* 模态框纸质感 */\nion-modal {\n  --background: var(--paper-cream);\n  --color: var(--ink-black);\n}\n\n/* 浮动按钮纸质感 */\nion-fab-button {\n  --background: linear-gradient(135deg, var(--accent-brown) 0%, #6b5d52 50%, var(--accent-brown) 100%);\n  --color: #ffffff;\n  --box-shadow: \n    0 6px 20px rgba(0, 0, 0, 0.15),\n    0 2px 8px rgba(0, 0, 0, 0.1),\n    inset 0 1px 0 rgba(255, 255, 255, 0.3),\n    inset 0 -1px 0 rgba(0, 0, 0, 0.1);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n/* ===== 强制覆盖深色模式 ===== */\n/* 确保在任何情况下都使用亮色纸质主题 */\n@media (prefers-color-scheme: dark) {\n  :root {\n    /* 强制覆盖所有深色模式变量为亮色值 */\n    color-scheme: light !important;\n    \n    /* 重新声明所有主要颜色变量，确保深色模式下也使用亮色 */\n    --ion-background-color: var(--paper-cream) !important;\n    --ion-background-color-rgb: var(--paper-cream-rgb) !important;\n    --ion-text-color: var(--ink-black) !important;\n    --ion-text-color-rgb: var(--ink-black-rgb) !important;\n    --ion-border-color: var(--line-color) !important;\n    \n    /* 确保所有 Ionic 组件在深色模式下也使用亮色主题 */\n    --ion-color-step-50: #fafafa !important;\n    --ion-color-step-100: #f5f5f5 !important;\n    --ion-color-step-150: #f0f0f0 !important;\n    --ion-color-step-200: #ebebeb !important;\n    --ion-color-step-250: #e6e6e6 !important;\n    --ion-color-step-300: #e1e1e1 !important;\n    --ion-color-step-350: #dcdcdc !important;\n    --ion-color-step-400: #d7d7d7 !important;\n    --ion-color-step-450: #d2d2d2 !important;\n    --ion-color-step-500: #cdcdcd !important;\n    --ion-color-step-550: #c8c8c8 !important;\n    --ion-color-step-600: #c3c3c3 !important;\n    --ion-color-step-650: #bebebe !important;\n    --ion-color-step-700: #b9b9b9 !important;\n    --ion-color-step-750: #b4b4b4 !important;\n    --ion-color-step-800: #afafaf !important;\n    --ion-color-step-850: #aaaaaa !important;\n    --ion-color-step-900: #a5a5a5 !important;\n    --ion-color-step-950: #a0a0a0 !important;\n  }\n}\n\n/* 强制所有元素使用亮色模式 */\n* {\n  color-scheme: light !important;\n}\n\n/* 确保 body 和 html 也强制使用亮色 */\nhtml, body {\n  color-scheme: light !important;\n  background-color: var(--paper-cream) !important;\n  color: var(--ink-black) !important;\n  font-weight: 400;\n}\n\n/* 强制 Ionic 应用容器使用亮色 */\nion-app, \n.ion-page, \nion-content {\n  --background: var(--paper-cream) !important;\n  --color: var(--ink-black) !important;\n  background: var(--paper-cream) !important;\n  color: var(--ink-black) !important;\n}\n\n/* 增强文字对比度 */\nh1, h2, h3, h4, h5, h6 {\n  color: var(--ink-black) !important;\n  font-weight: 600 !important;\n}\n\np, span, div {\n  color: var(--ink-black) !important;\n}\n\n/* 确保所有 Ionic 组件文字颜色 */\nion-label, \nion-title, \nion-button, \nion-item {\n  --color: var(--ink-black) !important;\n  color: var(--ink-black) !important;\n}\n\n/* 确保次要文字也有足够对比度 */\n.muted, \n.secondary {\n  color: var(--muted-ink) !important;\n}\n\n/* ===== 响应式纸质感调整 ===== */\n@media (max-width: 768px) {\n  :root {\n    --ion-margin: 12px;\n    --ion-padding: 12px;\n    --paper-border-radius: 6px;\n    --paper-border-radius-large: 10px;\n  }\n}\n\n@media (max-width: 480px) {\n  :root {\n    --ion-margin: 8px;\n    --ion-padding: 8px;\n    --paper-border-radius: 4px;\n    --paper-border-radius-large: 8px;\n  }\n}\n",
  "styles/Welcome.module.css": "/* Welcome 组件样式 - 简约风格 */\n\n.welcomeContainer {\n  background: #ffffff;\n  min-height: 100vh;\n  color: #333333;\n  position: relative;\n  padding: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n}\n\n/* 头部 */\n.header {\n  text-align: center;\n  padding: 56px 16px 16px;\n}\n\n.logo {\n  display: inline-block;\n  margin-bottom: 12px;\n}\n\n.logoImage {\n  width: 64px;\n  height: 64px;\n  border-radius: 12px;\n  transition: opacity 0.2s ease;\n  box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.1);\n}\n\n.logoImage:hover {\n  opacity: 0.8;\n}\n\n.title {\n  font-size: 2.1rem;\n  font-weight: 600;\n  margin: 0 0 6px 0;\n  line-height: 1.2;\n  letter-spacing: -0.02em;\n}\n\n.titleGradient {\n  color: #1a1a1a;\n}\n\n.titleSubtext {\n  color: #666666;\n  font-weight: 400;\n  margin-left: 6px;\n}\n\n.subtitle {\n  font-size: 1rem;\n  color: #666666;\n  margin: 0;\n  font-weight: 400;\n}\n\n/* 步骤 */\n.steps {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: 8px 16px 16px;\n  max-width: 560px;\n  margin: 0 auto;\n}\n\n.step {\n  padding: 12px 12px;\n  background: #fff;\n  border-radius: 12px;\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  position: relative;\n  text-align: center;\n  transition: background-color 0.2s ease;\n}\n\n.stepContent {\n  margin-top: 0;\n}\n\n.stepContent h3 {\n  font-size: 1.1rem;\n  font-weight: 500;\n  color: #1a1a1a;\n  margin: 0 0 4px 0;\n}\n\n.stepContent p {\n  color: #666666;\n  margin: 0;\n  font-size: 0.95rem;\n  line-height: 1.4;\n}\n\n.stepNumber {\n  position: absolute;\n  top: 8px;\n  left: 8px;\n  background: #e5e5e5;\n  color: #666666;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 500;\n  font-size: 0.75rem;\n}\n\n/* 行动按钮 */\n.ctaSection {\n  text-align: center;\n  padding: 16px 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  align-items: center;\n}\n\n.primaryBtn {\n  background: #1a1a1a;\n  color: #ffffff;\n  border: none;\n  border-radius: 6px;\n  padding: 10px 18px;\n  font-weight: 500;\n  font-size: 0.95rem;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  justify-content: center;\n  transition: background-color 0.2s ease;\n  width: 180px;\n  max-width: 90%;\n}\n\n.primaryBtn:hover {\n  background: #333333;\n}\n\n.primaryBtn:active {\n  background: #000000;\n}\n\n.secondaryBtn {\n  background: transparent;\n  color: #666666;\n  border: 1px solid #d5d5d5;\n  border-radius: 6px;\n  padding: 10px 18px;\n  font-weight: 500;\n  font-size: 0.95rem;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  justify-content: center;\n  transition: all 0.2s ease;\n  width: 180px;\n  max-width: 90%;\n}\n\n.secondaryBtn:hover {\n  background: #fafafa;\n  border-color: #999999;\n}\n\n/* 底部 */\n.footer {\n  text-align: center;\n  padding: 8px 16px 16px;\n  color: #999999;\n  font-size: 0.85rem;\n}\n\n.footer p {\n  margin: 0;\n}\n\n/* 响应式设计 */\n@media (max-width: 768px) {\n  .header {\n    padding: 40px 12px 16px;\n  }\n  \n  .title {\n    font-size: 2rem;\n  }\n  \n  .subtitle {\n    font-size: 1rem;\n  }\n  \n  .steps {\n    padding: 8px 12px 16px;\n  }\n  \n  .step {\n    padding: 12px 12px;\n  }\n  \n  .ctaSection {\n    padding: 16px 12px;\n  }\n}\n\n@media (max-width: 480px) {\n  .header {\n    padding: 32px 12px 14px;\n  }\n  \n  .logoImage {\n    width: 52px;\n    height: 52px;\n  }\n  \n  .title {\n    font-size: 1.7rem;\n  }\n  \n  .primaryBtn, .secondaryBtn {\n    width: 100%;\n    max-width: 280px;\n  }\n}\n\n/* 桌面端更紧凑的步骤布局 */\n@media (min-width: 768px) {\n  .steps {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 10px;\n    max-width: 840px;\n  }\n  .step {\n    text-align: left;\n    padding: 12px;\n  }\n  .stepNumber {\n    top: 10px;\n    left: 10px;\n  }\n}\n\n/* 简化动画 */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(12px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* 基础进场动画 */\n.logo,\n.title,\n.subtitle,\n.step,\n.ctaSection {\n  opacity: 0;\n  animation: fadeIn 0.5s ease-out forwards;\n}\n\n.logo {\n  animation-delay: 0s;\n}\n\n.title {\n  animation-delay: 0.1s;\n}\n\n/* ===== Desktop typography scaling (~1.5x) ===== */\n@media (min-width: 1024px) {\n  .title { font-size: 2.9rem; }\n  .subtitle { font-size: 1.25rem; }\n\n  .stepContent h3 { font-size: 1.4rem; }\n  .stepContent p { font-size: 1.175rem; }\n\n  .primaryBtn, .secondaryBtn { font-size: 1.175rem; }\n  .footer { font-size: 1.025rem; }\n}\n\n.subtitle {\n  animation-delay: 0.2s;\n}\n\n.step:nth-child(1) { \n  animation-delay: 0.3s;\n}\n\n.step:nth-child(2) { \n  animation-delay: 0.4s;\n}\n\n.step:nth-child(3) { \n  animation-delay: 0.5s;\n}\n\n.ctaSection {\n  animation-delay: 0.6s;\n}\n"
}