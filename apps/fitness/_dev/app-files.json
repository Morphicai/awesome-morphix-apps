{
  "ai_system_prompt.md": "# 健身助手应用 - AI系统提示词\n\n## 角色定义\n你是一个专业的健身计划管理助手，专门帮助用户创建、管理和执行个性化的健身计划。你具备丰富的健身知识和计划管理经验，能够为用户提供科学、实用的健身指导。\n\n## 核心能力\n\n### 1. 健身计划创建与管理\n- **计划设计**：根据用户的健身目标、经验水平和时间安排，设计个性化的健身计划\n- **动作配置**：为每个健身动作设置精确的参数：\n  - 组数：根据训练目标推荐合适的组数（力量训练通常3-5组，耐力训练可达8-12组）\n  - 次数：基于训练目的调整（力量1-6次，肌肥大6-12次，耐力12+次）\n  - 重量：根据用户能力和进阶需求建议合适重量\n  - 休息时间：组间休息（30秒-5分钟）和动作间休息的科学配置\n- **计划分类**：按身体部位（胸、背、腿、肩、臂）或训练类型（力量、有氧、功能性）组织计划\n- **模板管理**：将成功的计划保存为模板，支持快速复制和修改\n\n### 2. 日程安排与提醒\n- **日历集成**：将健身计划合理安排到日历中，避免过度训练\n- **重复计划**：设置周期性训练安排（如每周一三五练胸背腿）\n- **智能提醒**：\n  - 训练前提醒（可设置提前时间）\n  - 休息日提醒（避免连续高强度训练）\n  - 计划完成提醒\n- **时间优化**：根据用户可用时间推荐合适的训练计划\n\n### 3. 训练执行指导\n- **实时指导**：在训练过程中提供动作指导和参数提醒\n- **计时功能**：精确控制组间和动作间的休息时间\n- **进度追踪**：记录实际完成情况，包括：\n  - 实际使用重量\n  - 完成的组数和次数\n  - 训练感受和难度评估\n- **动态调整**：根据当天状态调整训练强度\n\n### 4. 数据分析与进步追踪\n- **进度监控**：追踪重量、次数、训练频率的变化趋势\n- **完成率统计**：计算计划执行的一致性\n- **力量曲线**：展示各个动作的力量增长情况\n- **训练分析**：分析训练模式，识别强项和弱项\n- **目标达成**：评估距离健身目标的进展\n\n### 5. 健身知识与建议\n- **动作指导**：提供正确的动作执行技巧和常见错误纠正\n- **训练原理**：解释不同训练方法的科学原理\n- **营养建议**：提供基础的运动营养指导\n- **恢复建议**：指导合理的休息和恢复安排\n- **安全提醒**：强调训练安全和伤病预防\n\n## 交互原则\n\n### 1. 个性化服务\n- 了解用户的健身经验、目标、时间安排和身体状况\n- 根据用户反馈动态调整计划难度和内容\n- 考虑用户的设备条件和训练环境\n\n### 2. 科学性与实用性\n- 基于运动科学原理提供建议\n- 确保计划的可执行性和可持续性\n- 避免过度复杂或不现实的安排\n\n### 3. 积极激励\n- 提供正面的反馈和鼓励\n- 庆祝用户的进步和成就\n- 在遇到困难时给予支持和调整建议\n\n### 4. 安全第一\n- 始终强调正确的动作执行\n- 提醒适当的热身和拉伸\n- 识别过度训练的风险信号\n\n## 应用场景\n\n### 新手用户\n- 提供基础的健身计划模板\n- 详细解释动作要领和训练原理\n- 设置较低的初始强度，逐步递增\n\n### 进阶用户\n- 提供更复杂的训练变化\n- 支持高级训练技巧（超级组、递减组等）\n- 关注突破平台期的策略\n\n### 时间紧张用户\n- 提供高效的短时间训练方案\n- 推荐复合动作和循环训练\n- 优化训练密度\n\n### 特定目标用户\n- 减脂：高频次、短休息的训练安排\n- 增肌：中等次数、充分休息的力量训练\n- 力量：低次数、长休息的大重量训练\n\n## 输出格式要求\n\n### 计划创建时\n```\n计划名称：[具体名称]\n训练目标：[力量/肌肥大/耐力/减脂]\n预计时长：[分钟]\n难度等级：[初级/中级/高级]\n\n动作列表：\n1. [动作名称]\n   - 组数：X组\n   - 次数：X次\n   - 重量：X公斤（或体重百分比）\n   - 组间休息：X分钟\n   - 要点：[关键技术要点]\n\n2. [下一个动作...]\n```\n\n### 执行指导时\n```\n当前动作：[动作名称]\n目标：第X组，X次，X公斤\n技术要点：[简洁的执行提醒]\n呼吸方式：[呼吸节奏指导]\n安全提醒：[重要注意事项]\n```\n\n### 进度分析时\n```\n训练总结：\n- 完成率：X%\n- 总训练时长：X分钟\n- 重点成就：[具体进步]\n- 改进建议：[下次训练调整]\n- 下周计划：[后续安排建议]\n```\n\n## 注意事项\n1. 始终询问用户的身体状况和任何限制\n2. 强调循序渐进的重要性\n3. 提醒用户倾听身体信号\n4. 鼓励保持训练记录的习惯\n5. 定期评估和调整训练计划\n6. 强调休息和恢复的重要性",
  "app.jsx": "import React, { useState, useEffect } from 'react';\nimport { \n  IonApp, \n  IonContent, \n  IonPage, \n  IonTabs,\n  IonTab,\n  IonTabBar, \n  IonTabButton, \n  IonIcon, \n  IonLabel,\n  IonRouterOutlet,\n  IonCard,\n  IonCardContent,\n  IonCardHeader,\n  IonCardTitle,\n  IonButton,\n  IonList,\n  IonItem,\n  IonFab,\n  IonFabButton,\n  IonInput,\n  IonTextarea,\n  IonAlert,\n  IonFooter,\n  IonSearchbar,\n  IonChip,\n  IonBadge\n} from '@ionic/react';\nimport { IonReactHashRouter } from '@ionic/react-router';\nimport { Switch, Route, Redirect, useHistory, useParams } from 'react-router-dom';\nimport { PageHeader } from '@morphixai/components';\nimport dayjs from 'dayjs';\nimport { \n  calendar, \n  barbell, \n  statsChart, \n  bookmark, \n  home, \n  addOutline,\n  timeOutline,\n  arrowForwardOutline,\n  searchOutline,\n  listOutline\n} from 'ionicons/icons';\nimport AppSdk from '@morphixai/app-sdk';\nimport { reportError } from '@morphixai/lib';\n\nimport './styles/global.css';\nimport useStore from './utils/store';\nimport useLanguage from './utils/useLanguage';\nimport CreatePlan from './components/CreatePlan';\nimport LoadingSpinner from './components/LoadingSpinner';\nimport HomePage from './components/HomePage';\nimport PlanLibrary from './components/PlanLibrary';\nimport StatsPage from './components/StatsPage';\nimport PlanExecution from './components/PlanExecution';\nimport WorkoutCalendar from './components/WorkoutCalendar';\n\n// 计划详情组件\nconst PlanDetail = () => {\n  const history = useHistory();\n  const { id } = useParams();\n  const { getPlanById, loadPlans, isLoading, scheduleWorkout, scheduledWorkouts, loadScheduledWorkouts } = useStore();\n  const { t } = useLanguage();\n  const [plan, setPlan] = useState(null);\n  \n  useEffect(() => {\n    Promise.all([loadPlans(), loadScheduledWorkouts()]).then(() => {\n      const planData = getPlanById(id);\n      setPlan(planData);\n    });\n  }, [id, loadPlans, loadScheduledWorkouts, getPlanById]);\n  \n  const startWorkout = async () => {\n    try {\n      const today = dayjs().format('YYYY-MM-DD');\n      \n      // 检查今天是否已有相同计划的安排\n      const todayWorkouts = scheduledWorkouts.filter(workout => \n        workout.planId === id && \n        workout.date && \n        workout.date.split('T')[0] === today\n      );\n      \n      if (todayWorkouts.length > 0) {\n        // 如果已有安排，直接使用现有的\n        history.push(`/execute/${todayWorkouts[0].id}`);\n      } else {\n        // 如果没有安排，创建新的（不设置提醒）\n        const scheduleData = {\n          planId: id,\n          date: new Date().toISOString(),\n          name: plan.name\n        };\n        \n        const result = await scheduleWorkout(scheduleData);\n        if (result && result.id) {\n          history.push(`/execute/${result.id}`);\n        }\n      }\n    } catch (error) {\n      console.error('开始健身失败:', error);\n    }\n  };\n  \n  if (isLoading || !plan) {\n    return (\n      <IonPage>\n        <PageHeader title={t('headers.planDetail')} />\n        <IonContent>\n          <LoadingSpinner message={t('loading.planDetails')} />\n        </IonContent>\n      </IonPage>\n    );\n  }\n  \n  // 根据部位获取标签类名和翻译\n  const getBodyPartClass = (part) => {\n    const partMap = {\n      '胸部': 'chest',\n      '背部': 'back',\n      '腿部': 'legs',\n      '肩部': 'shoulders',\n      '手臂': 'arms',\n      'Chest': 'chest',\n      'Back': 'back',\n      'Legs': 'legs',\n      'Shoulders': 'shoulders',\n      'Arms': 'arms'\n    };\n    return partMap[part] || '';\n  };\n  \n  const translateBodyPart = (part) => {\n    const partKeyMap = {\n      '胸部': 'chest',\n      '背部': 'back',\n      '腿部': 'legs',\n      '肩部': 'shoulders',\n      '手臂': 'arms',\n      'Chest': 'chest',\n      'Back': 'back',\n      'Legs': 'legs',\n      'Shoulders': 'shoulders',\n      'Arms': 'arms'\n    };\n    const key = partKeyMap[part];\n    return key ? t(`bodyParts.${key}`) : part;\n  };\n  \n  return (\n    <IonPage>\n      <PageHeader title={plan.name} />\n      <IonContent>\n        <IonCard className=\"workout-card\">\n          <IonCardHeader>\n            <IonCardTitle>{plan.name}</IonCardTitle>\n          </IonCardHeader>\n          <IonCardContent>\n            {plan.description && <p>{plan.description}</p>}\n            \n            {plan.bodyParts && plan.bodyParts.length > 0 && (\n              <div style={{ marginTop: '8px', display: 'flex', flexWrap: 'wrap' }}>\n                {plan.bodyParts.map((part, idx) => (\n                  <div key={idx} className={`body-part-tag ${getBodyPartClass(part)}`}>\n                    {translateBodyPart(part)}\n                  </div>\n                ))}\n              </div>\n            )}\n          </IonCardContent>\n        </IonCard>\n        \n        <div className=\"section-title\">{t('plans.exerciseList')}</div>\n        <IonList>\n          {plan.exercises && plan.exercises.map((exercise, index) => (\n            <IonItem key={exercise.id || index} className=\"exercise-list-item\">\n              <div style={{ marginRight: '12px' }}>\n                <div style={{\n                  width: '32px',\n                  height: '32px',\n                  borderRadius: '50%',\n                  backgroundColor: 'rgba(123, 104, 238, 0.1)',\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  color: 'var(--ion-color-primary)',\n                  fontWeight: 'bold'\n                }}>\n                  {index + 1}\n                </div>\n              </div>\n              <IonLabel>\n                <h2 style={{ fontWeight: '600' }}>{exercise.name}</h2>\n                <div className=\"exercise-detail\">\n                  <span>{exercise.sets} {t('createPlan.sets')} × {exercise.reps} {t('createPlan.reps')}</span>\n                  {exercise.weight > 0 && (\n                    <span style={{ marginLeft: '8px' }}>• {exercise.weight} {t('createPlan.weightUnit')}</span>\n                  )}\n                </div>\n              </IonLabel>\n            </IonItem>\n          ))}\n        </IonList>\n        \n        <div style={{ padding: '16px' }}>\n          <IonButton \n            expand=\"block\" \n            color=\"primary\"\n            className=\"action-button\"\n            onClick={startWorkout}\n          >\n            {t('plans.startWorkout')}\n          </IonButton>\n        </div>\n      </IonContent>\n    </IonPage>\n  );\n};\n\n// 主标签页组件\nfunction MainTabs() {\n  const history = useHistory();\n  const { t } = useLanguage();\n  \n  const handleAddPlan = () => {\n    history.push('/plan/create');\n  };\n  \n  return (\n    <IonTabs>\n      <IonTab tab=\"home\">\n        <IonPage>\n          <PageHeader title={t('headers.fitnessAssistant')} />\n          <HomePage onAddPlan={handleAddPlan} />\n        </IonPage>\n      </IonTab>\n      \n      <IonTab tab=\"calendar\">\n        <IonPage>\n          <PageHeader title={t('headers.fitnessCalendar')} />\n          <WorkoutCalendar />\n        </IonPage>\n      </IonTab>\n      \n      <IonTab tab=\"plans\">\n        <IonPage>\n          <PageHeader title={t('headers.fitnessPlans')} />\n          <PlanLibrary onAddPlan={handleAddPlan} />\n        </IonPage>\n      </IonTab>\n      \n      <IonTab tab=\"stats\">\n        <IonPage>\n          <PageHeader title={t('headers.fitnessStats')} />\n          <StatsPage />\n        </IonPage>\n      </IonTab>\n\n      <IonTabBar slot=\"bottom\">\n        <IonTabButton tab=\"home\">\n          <IonIcon icon={home} />\n          <IonLabel>{t('tabs.home')}</IonLabel>\n        </IonTabButton>\n        \n        <IonTabButton tab=\"calendar\">\n          <IonIcon icon={calendar} />\n          <IonLabel>{t('tabs.calendar')}</IonLabel>\n        </IonTabButton>\n        \n        <IonTabButton tab=\"plans\">\n          <IonIcon icon={barbell} />\n          <IonLabel>{t('tabs.plans')}</IonLabel>\n        </IonTabButton>\n        \n        <IonTabButton tab=\"stats\">\n          <IonIcon icon={statsChart} />\n          <IonLabel>{t('tabs.stats')}</IonLabel>\n        </IonTabButton>\n      </IonTabBar>\n    </IonTabs>\n  );\n}\n\n// 主应用组件\nexport default function App() {\n  const { initLanguage } = useLanguage();\n  \n  // 初始化语言\n  useEffect(() => {\n    initLanguage();\n  }, [initLanguage]);\n  \n  return (\n    <IonApp>\n      <IonReactHashRouter>\n        <Switch>\n          <Route path=\"/plan/create\" component={CreatePlan} />\n          <Route path=\"/plan/edit/:id\" component={CreatePlan} />\n          <Route path=\"/plan/:id\" component={PlanDetail} />\n          <Route path=\"/execute/:id\" component={PlanExecution} />\n          <Route path=\"/tabs\" component={MainTabs} />\n          <Route exact path=\"/\" render={() => <Redirect to=\"/tabs\" />} />\n        </Switch>\n      </IonReactHashRouter>\n    </IonApp>\n  );\n}",
  "components/CreatePlan.jsx": "import React, { useState, useEffect } from 'react';\nimport { \n  IonContent, \n  IonItem, \n  IonLabel, \n  IonInput, \n  IonTextarea,\n  IonButton,\n  IonIcon,\n  IonList,\n  IonReorder,\n  IonReorderGroup,\n  IonItemSliding,\n  IonItemOptions,\n  IonItemOption,\n  IonCard,\n  IonCardContent,\n  IonAlert,\n  IonModal,\n  IonToolbar,\n  IonTitle,\n  IonButtons,\n  IonRange,\n  IonSelect,\n  IonSelectOption,\n  IonGrid,\n  IonRow,\n  IonCol,\n  IonToast,\n  IonSearchbar,\n  IonSegment,\n  IonSegmentButton,\n  IonChip,\n  IonAvatar,\n  IonBadge,\n  IonNote,\n  IonRadioGroup,\n  IonRadio,\n  IonListHeader,\n  IonHeader\n} from '@ionic/react';\nimport { \n  addOutline, \n  removeOutline, \n  saveOutline, \n  closeOutline,\n  trashOutline,\n  copyOutline,\n  searchOutline,\n  barbellOutline,\n  listOutline,\n  informationCircleOutline\n} from 'ionicons/icons';\nimport { Header } from '@morphicai/components';\nimport { useParams, useHistory } from 'react-router-dom';\n\nimport useStore from '../utils/store';\nimport { createDefaultPlan, createNewExercise, generateId, deepClone } from '../utils/helpers';\nimport LoadingSpinner from './LoadingSpinner';\nimport { getAllCategories, getExercisesByCategory, searchExercisesByName } from '../utils/exerciseData';\n\nconst CreatePlan = () => {\n  const { id } = useParams();\n  const history = useHistory();\n  const { \n    getPlanById, \n    createPlan, \n    updatePlan, \n    loadPlans,\n    isLoading \n  } = useStore();\n  \n  const [plan, setPlan] = useState(createDefaultPlan());\n  const [editMode, setEditMode] = useState(false);\n  const [showExerciseModal, setShowExerciseModal] = useState(false);\n  const [currentExercise, setCurrentExercise] = useState(null);\n  const [currentExerciseIndex, setCurrentExerciseIndex] = useState(-1);\n  const [showDeleteAlert, setShowDeleteAlert] = useState(false);\n  const [exerciseToDelete, setExerciseToDelete] = useState(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  \n  // 动作选择相关状态\n  const [showExerciseSelector, setShowExerciseSelector] = useState(false);\n  const [exerciseSearchQuery, setExerciseSearchQuery] = useState('');\n  const [activeCategory, setActiveCategory] = useState('');\n  const [exerciseCategories, setExerciseCategories] = useState([]);\n  const [exerciseResults, setExerciseResults] = useState([]);\n  const [selectedExercise, setSelectedExercise] = useState(null);\n  const [exerciseSelectorMode, setExerciseSelectorMode] = useState('category'); // 'category' 或 'search'\n  \n  useEffect(() => {\n    if (id) {\n      setEditMode(true);\n      loadPlans().then(() => {\n        const existingPlan = getPlanById(id);\n        if (existingPlan) {\n          setPlan(existingPlan);\n        }\n      });\n    }\n    \n    // 加载健身动作分类\n    setExerciseCategories(getAllCategories());\n  }, [id, getPlanById, loadPlans]);\n  \n  const handleInputChange = (field, value) => {\n    setPlan(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n  \n  const handleReorder = (event) => {\n    const exercises = [...plan.exercises];\n    const movedItem = exercises.splice(event.detail.from, 1)[0];\n    exercises.splice(event.detail.to, 0, movedItem);\n    \n    setPlan(prev => ({\n      ...prev,\n      exercises\n    }));\n    \n    event.detail.complete();\n  };\n  \n  const addExercise = () => {\n    // 打开动作选择器\n    setShowExerciseSelector(true);\n    setExerciseSearchQuery('');\n    setActiveCategory('');\n    setExerciseResults([]);\n    setSelectedExercise(null);\n    setExerciseSelectorMode('category');\n  };\n  \n  const editExercise = (index) => {\n    setCurrentExercise(deepClone(plan.exercises[index]));\n    setCurrentExerciseIndex(index);\n    setShowExerciseModal(true);\n  };\n  \n  const confirmDeleteExercise = (index) => {\n    setExerciseToDelete(index);\n    setShowDeleteAlert(true);\n  };\n  \n  const deleteExercise = () => {\n    if (exerciseToDelete !== null) {\n      const exercises = [...plan.exercises];\n      exercises.splice(exerciseToDelete, 1);\n      \n      setPlan(prev => ({\n        ...prev,\n        exercises\n      }));\n    }\n    setExerciseToDelete(null);\n  };\n  \n  const duplicateExercise = (index) => {\n    const exercises = [...plan.exercises];\n    const newExercise = {\n      ...deepClone(exercises[index]),\n      id: generateId()\n    };\n    \n    exercises.splice(index + 1, 0, newExercise);\n    \n    setPlan(prev => ({\n      ...prev,\n      exercises\n    }));\n  };\n  \n  const handleExerciseChange = (field, value) => {\n    setCurrentExercise(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n  \n  const saveExercise = () => {\n    // 验证必填字段\n    if (!currentExercise.name) {\n      setToastMessage('请输入动作名称');\n      setShowToast(true);\n      return;\n    }\n    \n    const exercises = [...plan.exercises];\n    \n    if (currentExerciseIndex === -1) {\n      // 添加新动作\n      exercises.push(currentExercise);\n    } else {\n      // 更新现有动作\n      exercises[currentExerciseIndex] = currentExercise;\n    }\n    \n    setPlan(prev => ({\n      ...prev,\n      exercises\n    }));\n    \n    setShowExerciseModal(false);\n  };\n  \n  const savePlan = async () => {\n    // 验证必填字段\n    if (!plan.name) {\n      setToastMessage('请输入计划名称');\n      setShowToast(true);\n      return;\n    }\n    \n    if (!plan.exercises || plan.exercises.length === 0) {\n      setToastMessage('请至少添加一个动作');\n      setShowToast(true);\n      return;\n    }\n    \n    try {\n      if (editMode) {\n        await updatePlan(id, plan);\n      } else {\n        await createPlan(plan);\n      }\n      \n      history.goBack();\n    } catch (error) {\n      console.error('保存计划失败:', error);\n      setToastMessage('保存失败，请重试');\n      setShowToast(true);\n    }\n  };\n  \n  // 处理分类选择\n  const handleCategorySelect = (categoryId) => {\n    setActiveCategory(categoryId);\n    const exercises = getExercisesByCategory(categoryId);\n    setExerciseResults(exercises);\n  };\n  \n  // 处理搜索\n  const handleSearch = (query) => {\n    setExerciseSearchQuery(query);\n    if (query.trim() === '') {\n      setExerciseResults([]);\n      return;\n    }\n    const results = searchExercisesByName(query);\n    setExerciseResults(results);\n  };\n  \n  // 选择动作\n  const handleExerciseSelect = (exercise) => {\n    setSelectedExercise(exercise);\n  };\n  \n  // 确认选择动作\n  const confirmExerciseSelection = () => {\n    if (!selectedExercise) {\n      setToastMessage('请选择一个动作');\n      setShowToast(true);\n      return;\n    }\n    \n    const newExercise = {\n      id: generateId(),\n      name: selectedExercise.name,\n      sets: selectedExercise.defaultSets,\n      reps: selectedExercise.defaultReps,\n      weight: selectedExercise.defaultWeight,\n      restBetweenSets: selectedExercise.defaultRestBetweenSets,\n      restAfterExercise: selectedExercise.defaultRestAfterExercise\n    };\n    \n    // 添加到计划中\n    setPlan(prev => ({\n      ...prev,\n      exercises: [...prev.exercises, newExercise]\n    }));\n    \n    setShowExerciseSelector(false);\n  };\n  \n  // 切换自定义动作\n  const handleCustomExercise = () => {\n    setCurrentExercise(createNewExercise());\n    setCurrentExerciseIndex(-1);\n    setShowExerciseSelector(false);\n    setShowExerciseModal(true);\n  };\n  \n  if (isLoading && editMode) {\n    return <LoadingSpinner message=\"加载计划数据...\" />;\n  }\n  \n  return (\n    <>\n      <Header title={editMode ? '编辑计划' : '创建计划'} />\n      <IonContent>\n        <IonCard className=\"workout-card\">\n          <IonCardContent>\n            <IonItem className=\"form-group\">\n              <IonLabel position=\"stacked\">计划名称 *</IonLabel>\n              <IonInput\n                value={plan.name}\n                onIonInput={(e) => handleInputChange('name', e.detail.value)}\n                placeholder=\"例如：胸部训练、腿部日\"\n                required\n              />\n            </IonItem>\n            \n            <IonItem className=\"form-group\">\n              <IonLabel position=\"stacked\">计划描述</IonLabel>\n              <IonTextarea\n                value={plan.description}\n                onIonInput={(e) => handleInputChange('description', e.detail.value)}\n                placeholder=\"添加计划描述（可选）\"\n                rows={3}\n              />\n            </IonItem>\n          </IonCardContent>\n        </IonCard>\n        \n        <div className=\"section-title\">动作列表</div>\n        \n        {plan.exercises && plan.exercises.length > 0 ? (\n          <IonReorderGroup disabled={false} onIonItemReorder={handleReorder}>\n            {plan.exercises.map((exercise, index) => (\n              <IonItemSliding key={exercise.id || index}>\n                <IonItem className=\"exercise-list-item\">\n                  <IonLabel onClick={() => editExercise(index)}>\n                    <h2>{exercise.name || '未命名动作'}</h2>\n                    <div className=\"exercise-detail\">\n                      <span>{exercise.sets} 组 × {exercise.reps} 次</span>\n                      {exercise.weight > 0 && (\n                        <span> • {exercise.weight} kg</span>\n                      )}\n                    </div>\n                  </IonLabel>\n                  <IonReorder slot=\"end\" />\n                </IonItem>\n                \n                <IonItemOptions side=\"end\">\n                  <IonItemOption color=\"secondary\" onClick={() => duplicateExercise(index)}>\n                    <IonIcon slot=\"icon-only\" icon={copyOutline} />\n                  </IonItemOption>\n                  <IonItemOption color=\"danger\" onClick={() => confirmDeleteExercise(index)}>\n                    <IonIcon slot=\"icon-only\" icon={trashOutline} />\n                  </IonItemOption>\n                </IonItemOptions>\n              </IonItemSliding>\n            ))}\n          </IonReorderGroup>\n        ) : (\n          <IonCard className=\"workout-card\">\n            <IonCardContent className=\"center-content\" style={{ padding: '24px' }}>\n              <p>还没有添加动作</p>\n            </IonCardContent>\n          </IonCard>\n        )}\n        \n        <div style={{ padding: '16px' }}>\n          <IonButton \n            expand=\"block\" \n            fill=\"outline\" \n            onClick={addExercise}\n          >\n            <IonIcon slot=\"start\" icon={addOutline} />\n            添加动作\n          </IonButton>\n          \n          <IonButton \n            expand=\"block\" \n            color=\"primary\"\n            onClick={savePlan}\n            style={{ marginTop: '16px' }}\n          >\n            <IonIcon slot=\"start\" icon={saveOutline} />\n            保存计划\n          </IonButton>\n        </div>\n        \n        {/* 动作编辑模态框 */}\n        <IonModal isOpen={showExerciseModal} onDidDismiss={() => setShowExerciseModal(false)}>\n          <IonToolbar>\n            <IonTitle>{currentExerciseIndex === -1 ? '添加动作' : '编辑动作'}</IonTitle>\n            <IonButtons slot=\"end\">\n              <IonButton onClick={() => setShowExerciseModal(false)}>\n                <IonIcon icon={closeOutline} />\n              </IonButton>\n            </IonButtons>\n          </IonToolbar>\n          \n          <IonContent>\n            {currentExercise && (\n              <IonList>\n                <IonItem className=\"form-group\">\n                  <IonLabel position=\"stacked\">动作名称 *</IonLabel>\n                  <IonInput\n                    value={currentExercise.name}\n                    onIonInput={(e) => handleExerciseChange('name', e.detail.value)}\n                    placeholder=\"例如：卧推、深蹲\"\n                    required\n                  />\n                </IonItem>\n                \n                <IonItem className=\"form-group\">\n                  <IonLabel position=\"stacked\">组数</IonLabel>\n                  <IonGrid>\n                    <IonRow>\n                      <IonCol size=\"9\">\n                        <IonRange\n                          min={1}\n                          max={10}\n                          step={1}\n                          value={currentExercise.sets}\n                          onIonChange={(e) => handleExerciseChange('sets', e.detail.value)}\n                        />\n                      </IonCol>\n                      <IonCol size=\"3\">\n                        <IonInput\n                          type=\"number\"\n                          value={currentExercise.sets}\n                          onIonInput={(e) => handleExerciseChange('sets', parseInt(e.detail.value) || 1)}\n                        />\n                      </IonCol>\n                    </IonRow>\n                  </IonGrid>\n                </IonItem>\n                \n                <IonItem className=\"form-group\">\n                  <IonLabel position=\"stacked\">每组次数</IonLabel>\n                  <IonGrid>\n                    <IonRow>\n                      <IonCol size=\"9\">\n                        <IonRange\n                          min={1}\n                          max={30}\n                          step={1}\n                          value={currentExercise.reps}\n                          onIonChange={(e) => handleExerciseChange('reps', e.detail.value)}\n                        />\n                      </IonCol>\n                      <IonCol size=\"3\">\n                        <IonInput\n                          type=\"number\"\n                          value={currentExercise.reps}\n                          onIonInput={(e) => handleExerciseChange('reps', parseInt(e.detail.value) || 1)}\n                        />\n                      </IonCol>\n                    </IonRow>\n                  </IonGrid>\n                </IonItem>\n                \n                <IonItem className=\"form-group\">\n                  <IonLabel position=\"stacked\">重量 (kg)</IonLabel>\n                  <IonInput\n                    type=\"number\"\n                    value={currentExercise.weight}\n                    onIonInput={(e) => handleExerciseChange('weight', parseFloat(e.detail.value) || 0)}\n                  />\n                </IonItem>\n                \n                <IonItem className=\"form-group\">\n                  <IonLabel position=\"stacked\">组间休息时间 (秒)</IonLabel>\n                  <IonSelect\n                    value={currentExercise.restBetweenSets}\n                    onIonChange={(e) => handleExerciseChange('restBetweenSets', e.detail.value)}\n                  >\n                    <IonSelectOption value={30}>30秒</IonSelectOption>\n                    <IonSelectOption value={45}>45秒</IonSelectOption>\n                    <IonSelectOption value={60}>60秒</IonSelectOption>\n                    <IonSelectOption value={90}>90秒</IonSelectOption>\n                    <IonSelectOption value={120}>2分钟</IonSelectOption>\n                    <IonSelectOption value={180}>3分钟</IonSelectOption>\n                  </IonSelect>\n                </IonItem>\n                \n                <IonItem className=\"form-group\">\n                  <IonLabel position=\"stacked\">动作后休息时间 (秒)</IonLabel>\n                  <IonSelect\n                    value={currentExercise.restAfterExercise}\n                    onIonChange={(e) => handleExerciseChange('restAfterExercise', e.detail.value)}\n                  >\n                    <IonSelectOption value={60}>60秒</IonSelectOption>\n                    <IonSelectOption value={90}>90秒</IonSelectOption>\n                    <IonSelectOption value={120}>2分钟</IonSelectOption>\n                    <IonSelectOption value={180}>3分钟</IonSelectOption>\n                    <IonSelectOption value={240}>4分钟</IonSelectOption>\n                  </IonSelect>\n                </IonItem>\n              </IonList>\n            )}\n            \n            <div style={{ padding: '16px' }}>\n              <IonButton \n                expand=\"block\" \n                color=\"primary\"\n                onClick={saveExercise}\n              >\n                保存动作\n              </IonButton>\n            </div>\n          </IonContent>\n        </IonModal>\n        \n        {/* 动作选择模态框 */}\n        <IonModal isOpen={showExerciseSelector} onDidDismiss={() => setShowExerciseSelector(false)}>\n          <IonHeader>\n            <IonToolbar>\n              <IonTitle>选择健身动作</IonTitle>\n              <IonButtons slot=\"end\">\n                <IonButton onClick={() => setShowExerciseSelector(false)}>\n                  <IonIcon icon={closeOutline} />\n                </IonButton>\n              </IonButtons>\n            </IonToolbar>\n            \n            {/* 分段控制器：分类/搜索 */}\n            <IonToolbar>\n              <IonSegment value={exerciseSelectorMode} onIonChange={e => setExerciseSelectorMode(e.detail.value)}>\n                <IonSegmentButton value=\"category\">\n                  <IonIcon icon={listOutline} />\n                  <IonLabel>分类浏览</IonLabel>\n                </IonSegmentButton>\n                <IonSegmentButton value=\"search\">\n                  <IonIcon icon={searchOutline} />\n                  <IonLabel>搜索</IonLabel>\n                </IonSegmentButton>\n              </IonSegment>\n            </IonToolbar>\n            \n            {/* 搜索栏，仅在搜索模式显示 */}\n            {exerciseSelectorMode === 'search' && (\n              <IonToolbar>\n                <IonSearchbar\n                  value={exerciseSearchQuery}\n                  onIonInput={e => handleSearch(e.detail.value)}\n                  placeholder=\"搜索动作名称...\"\n                  showCancelButton=\"never\"\n                />\n              </IonToolbar>\n            )}\n          </IonHeader>\n          \n          <IonContent>\n            {/* 分类模式 */}\n            {exerciseSelectorMode === 'category' && (\n              <>\n                {/* 分类选择器 */}\n                {!activeCategory && (\n                  <IonList>\n                    <IonListHeader>\n                      <IonLabel>选择部位</IonLabel>\n                    </IonListHeader>\n                    {exerciseCategories.map(category => (\n                      <IonItem \n                        key={category.id} \n                        button \n                        onClick={() => handleCategorySelect(category.id)}\n                      >\n                        <IonIcon icon={barbellOutline} slot=\"start\" />\n                        <IonLabel>{category.name}</IonLabel>\n                      </IonItem>\n                    ))}\n                  </IonList>\n                )}\n                \n                {/* 分类下的动作列表 */}\n                {activeCategory && (\n                  <>\n                    <IonItem>\n                      <IonButton \n                        fill=\"clear\" \n                        onClick={() => setActiveCategory('')}\n                      >\n                        返回分类\n                      </IonButton>\n                      <IonLabel>\n                        {exerciseCategories.find(c => c.id === activeCategory)?.name} 动作\n                      </IonLabel>\n                    </IonItem>\n                    <IonRadioGroup value={selectedExercise?.name || ''}>\n                      {exerciseResults.map(exercise => (\n                        <IonItem key={exercise.name}>\n                          <IonLabel>\n                            <h2>{exercise.name}</h2>\n                            <IonNote>\n                              {exercise.defaultSets} 组 × {exercise.defaultReps} 次\n                              {exercise.defaultWeight > 0 && ` • ${exercise.defaultWeight} kg`}\n                            </IonNote>\n                          </IonLabel>\n                          <IonRadio \n                            slot=\"end\" \n                            value={exercise.name}\n                            onClick={() => handleExerciseSelect(exercise)}\n                          />\n                        </IonItem>\n                      ))}\n                    </IonRadioGroup>\n                  </>\n                )}\n              </>\n            )}\n            \n            {/* 搜索模式 */}\n            {exerciseSelectorMode === 'search' && (\n              <IonRadioGroup value={selectedExercise?.name || ''}>\n                {exerciseResults.length > 0 ? (\n                  exerciseResults.map(exercise => (\n                    <IonItem key={exercise.name}>\n                      <IonLabel>\n                        <h2>{exercise.name}</h2>\n                        <IonNote>\n                          {exercise.category?.name} • \n                          {exercise.defaultSets} 组 × {exercise.defaultReps} 次\n                          {exercise.defaultWeight > 0 && ` • ${exercise.defaultWeight} kg`}\n                        </IonNote>\n                      </IonLabel>\n                      <IonRadio \n                        slot=\"end\" \n                        value={exercise.name}\n                        onClick={() => handleExerciseSelect(exercise)}\n                      />\n                    </IonItem>\n                  ))\n                ) : (\n                  <IonItem>\n                    <IonLabel className=\"ion-text-center\">\n                      {exerciseSearchQuery ? '没有找到匹配的动作' : '请输入搜索关键词'}\n                    </IonLabel>\n                  </IonItem>\n                )}\n              </IonRadioGroup>\n            )}\n            \n            <div style={{ padding: '16px' }}>\n              <IonButton \n                expand=\"block\" \n                color=\"primary\"\n                onClick={confirmExerciseSelection}\n                disabled={!selectedExercise}\n              >\n                选择此动作\n              </IonButton>\n              \n              <IonButton \n                expand=\"block\" \n                fill=\"outline\"\n                onClick={handleCustomExercise}\n                style={{ marginTop: '8px' }}\n              >\n                创建自定义动作\n              </IonButton>\n            </div>\n          </IonContent>\n        </IonModal>\n        \n        <IonAlert\n          isOpen={showDeleteAlert}\n          onDidDismiss={() => setShowDeleteAlert(false)}\n          header=\"确认删除\"\n          message=\"确定要删除这个动作吗？\"\n          buttons={[\n            {\n              text: '取消',\n              role: 'cancel',\n              handler: () => setExerciseToDelete(null)\n            },\n            {\n              text: '删除',\n              role: 'destructive',\n              handler: deleteExercise\n            }\n          ]}\n        />\n        \n        <IonToast\n          isOpen={showToast}\n          onDidDismiss={() => setShowToast(false)}\n          message={toastMessage}\n          duration={2000}\n          position=\"top\"\n          color=\"danger\"\n        />\n      </IonContent>\n    </>\n  );\n};\n\nexport default CreatePlan;",
  "components/EmptyState.jsx": "import React from 'react';\nimport { IonIcon, IonButton } from '@ionic/react';\nimport { addOutline } from 'ionicons/icons';\n\n// 空状态组件，用于显示没有数据时的提示\nconst EmptyState = ({ \n  icon, \n  message, \n  subMessage,\n  actionText = '添加', \n  onAction,\n  hideAction = false,\n  customIcon = null,\n  height = '60vh'\n}) => {\n  return (\n    <div className=\"empty-state fade-in\" style={{\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      padding: '40px 20px',\n      height: height,\n      textAlign: 'center'\n    }}>\n      <div className=\"empty-state-icon-container pulse\" style={{\n        backgroundColor: 'rgba(123, 104, 238, 0.1)',\n        borderRadius: '50%',\n        width: '80px',\n        height: '80px',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        marginBottom: '20px'\n      }}>\n        {customIcon || (\n          <IonIcon \n            icon={icon} \n            style={{\n              fontSize: '40px',\n              color: 'var(--ion-color-primary)'\n            }} \n          />\n        )}\n      </div>\n      <p style={{\n        fontSize: '18px',\n        color: 'var(--ion-text-color)',\n        margin: '0 0 8px 0',\n        fontWeight: '600'\n      }}>\n        {message}\n      </p>\n      <p style={{\n        fontSize: '14px',\n        color: 'var(--app-medium-text)',\n        margin: '0 0 24px 0',\n        maxWidth: '280px',\n        lineHeight: '1.5'\n      }}>\n        {subMessage || '开始创建您的健身计划，记录和追踪您的健身进度'}\n      </p>\n      {!hideAction && onAction && (\n        <IonButton \n          onClick={onAction}\n          shape=\"round\"\n          size=\"large\"\n          className=\"action-button scale-in\"\n          style={{\n            '--border-radius': '50px',\n            '--padding-start': '24px',\n            '--padding-end': '24px',\n            marginTop: '8px',\n            fontWeight: '600',\n            fontSize: '16px'\n          }}\n        >\n          <IonIcon slot=\"start\" icon={addOutline} />\n          {actionText}\n        </IonButton>\n      )}\n    </div>\n  );\n};\n\nexport default EmptyState;",
  "components/ExerciseItem.jsx": "import React from 'react';\nimport { \n  IonItem, \n  IonLabel, \n  IonIcon, \n  IonBadge \n} from '@ionic/react';\nimport { \n  timeOutline, \n  barbell, \n  body, \n  bodyOutline, \n  handLeft, \n  bug, \n  resize, \n  sync, \n  disc, \n  trailSign, \n  walk, \n  bicycle, \n  footsteps, \n  pulse, \n  boat, \n  rocket, \n  fitness\n} from 'ionicons/icons';\n\nconst ExerciseItem = ({ exercise, onClick }) => {\n  // 图标映射表\n  const iconMap = {\n    'barbell': barbell,\n    'body': body,\n    'body-outline': bodyOutline,\n    'hand-left': handLeft,\n    'bug': bug,\n    'resize': resize,\n    'sync': sync,\n    'disc': disc,\n    'trail-sign': trailSign,\n    'walk': walk,\n    'bicycle': bicycle,\n    'footsteps': footsteps,\n    'pulse': pulse,\n    'boat': boat,\n    'rocket': rocket,\n    'fitness': fitness\n  };\n\n  // 获取动作对应的图标，如果没有指定则使用默认图标\n  const getExerciseIcon = () => {\n    if (exercise.icon && iconMap[exercise.icon]) {\n      return iconMap[exercise.icon];\n    }\n    return barbell; // 默认图标\n  };\n\n  // 获取图标颜色，根据运动类型设置不同的颜色\n  const getIconColor = () => {\n    if (exercise.category) {\n      switch (exercise.category.id) {\n        case 'chest': return 'primary';\n        case 'back': return 'secondary';\n        case 'shoulders': return 'tertiary';\n        case 'arms': return 'danger';\n        case 'legs': return 'warning';\n        case 'core': return 'success';\n        case 'cardio': return 'medium';\n        default: return 'primary';\n      }\n    }\n    return 'primary';\n  };\n\n  return (\n    <IonItem button onClick={onClick} className=\"exercise-list-item\">\n      <div style={{ \n        width: '36px', \n        height: '36px', \n        borderRadius: '50%', \n        backgroundColor: `rgba(var(--ion-color-${getIconColor()}-rgb), 0.1)`,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        marginRight: '12px'\n      }}>\n        <IonIcon \n          icon={getExerciseIcon()} \n          color={getIconColor()} \n          style={{ fontSize: '20px' }} \n        />\n      </div>\n      <IonLabel>\n        <h2 style={{ fontWeight: '500' }}>{exercise.name}</h2>\n        <div className=\"exercise-detail\">\n          <span>{exercise.sets} 组 × {exercise.reps} 次</span>\n          {exercise.weight > 0 && (\n            <span style={{ marginLeft: '8px' }}> • {exercise.weight} kg</span>\n          )}\n        </div>\n      </IonLabel>\n      <IonBadge \n        color=\"light\" \n        slot=\"end\"\n        style={{ \n          display: 'flex', \n          alignItems: 'center', \n          padding: '4px 8px', \n          borderRadius: '12px',\n          backgroundColor: 'rgba(var(--ion-color-medium-rgb), 0.1)',\n          color: 'var(--ion-color-medium)'\n        }}\n      >\n        <IonIcon icon={timeOutline} size=\"small\" />\n        &nbsp;{exercise.restBetweenSets}秒\n      </IonBadge>\n    </IonItem>\n  );\n};\n\nexport default ExerciseItem;",
  "components/HomePage.jsx": "import React, { useState, useEffect } from 'react';\nimport { \n  IonContent, \n  IonCard, \n  IonCardHeader, \n  IonCardTitle, \n  IonCardContent,\n  IonButton,\n  IonIcon,\n  IonFab,\n  IonFabButton,\n  IonGrid,\n  IonRow,\n  IonCol,\n  IonItem,\n  IonLabel,\n  IonBadge,\n  IonChip,\n  IonRippleEffect,\n  IonSkeletonText\n} from '@ionic/react';\nimport { \n  addOutline, \n  arrowForwardOutline, \n  barbellOutline,\n  timeOutline,\n  calendarOutline,\n  trendingUpOutline,\n  flameOutline,\n  checkmarkCircleOutline,\n  fitnessOutline\n} from 'ionicons/icons';\nimport { useHistory } from 'react-router-dom';\nimport dayjs from 'dayjs';\n\nimport useStore from '../utils/store';\nimport useLanguage from '../utils/useLanguage';\nimport LoadingSpinner from './LoadingSpinner';\nimport EmptyState from './EmptyState';\n\nconst HomePage = ({ onAddPlan }) => {\n  const history = useHistory();\n  const { plans, workoutRecords, loadPlans, loadWorkoutRecords, isLoading } = useStore();\n  const { t, language } = useLanguage();\n  const [recentWorkouts, setRecentWorkouts] = useState([]);\n  const [todayStats, setTodayStats] = useState({\n    completed: 0,\n    planned: 0,\n    streak: 0\n  });\n  const [progressPercentage, setProgressPercentage] = useState(0);\n  \n  useEffect(() => {\n    loadPlans();\n    loadWorkoutRecords();\n  }, [loadPlans, loadWorkoutRecords]);\n  \n  useEffect(() => {\n    if (workoutRecords.length > 0) {\n      // 获取最近的5条记录\n      const sorted = [...workoutRecords].sort((a, b) => \n        new Date(b.completedAt) - new Date(a.completedAt)\n      ).slice(0, 5);\n      \n      setRecentWorkouts(sorted);\n      \n      // 计算今日完成的健身计划\n      const today = dayjs().format('YYYY-MM-DD');\n      const todayCompleted = workoutRecords.filter(record => \n        dayjs(record.completedAt).format('YYYY-MM-DD') === today\n      ).length;\n      \n      // 模拟计算连续健身天数\n      let streak = 0;\n      const dates = [...new Set(workoutRecords.map(r => \n        dayjs(r.completedAt).format('YYYY-MM-DD')\n      ))].sort().reverse();\n      \n      if (dates.length > 0) {\n        streak = 1;\n        for (let i = 1; i < dates.length; i++) {\n          const prevDate = dayjs(dates[i-1]);\n          const currDate = dayjs(dates[i]);\n          if (prevDate.diff(currDate, 'day') === 1) {\n            streak++;\n          } else {\n            break;\n          }\n        }\n      }\n      \n      // 计算进度百分比\n      const percentage = plans.length > 0 ? (todayCompleted / plans.length) * 100 : 0;\n      setProgressPercentage(Math.min(percentage, 100));\n      \n      setTodayStats({\n        completed: todayCompleted,\n        planned: plans.length,\n        streak\n      });\n    }\n  }, [workoutRecords, plans]);\n  \n  const navigateToPlanDetail = (planId) => {\n    history.push(`/plan/${planId}`);\n  };\n  \n  // 获取部位标签类名和翻译\n  const getBodyPartClass = (part) => {\n    const partMap = {\n      '胸部': 'chest',\n      '背部': 'back',\n      '腿部': 'legs',\n      '肩部': 'shoulders',\n      '手臂': 'arms',\n      'Chest': 'chest',\n      'Back': 'back',\n      'Legs': 'legs',\n      'Shoulders': 'shoulders',\n      'Arms': 'arms'\n    };\n    return partMap[part] || '';\n  };\n  \n  const translateBodyPart = (part) => {\n    const partKeyMap = {\n      '胸部': 'chest',\n      '背部': 'back',\n      '腿部': 'legs',\n      '肩部': 'shoulders',\n      '手臂': 'arms',\n      'Chest': 'chest',\n      'Back': 'back',\n      'Legs': 'legs',\n      'Shoulders': 'shoulders',\n      'Arms': 'arms'\n    };\n    const key = partKeyMap[part];\n    return key ? t(`bodyParts.${key}`) : part;\n  };\n  \n  if (isLoading) {\n    return <LoadingSpinner message={t('loading.fitnessData')} />;\n  }\n  \n  return (\n    <IonContent>\n      {/* 今日概览卡片 */}\n      <IonCard className=\"workout-card\">\n        <IonCardHeader style={{ paddingBottom: '8px' }}>\n          <div style={{ display: 'flex', alignItems: 'center' }}>\n            <IonCardTitle>{t('home.todayOverview')}</IonCardTitle>\n            <div style={{ \n              marginLeft: 'auto', \n              fontSize: '13px', \n              color: 'var(--app-medium-text)',\n              display: 'flex',\n              alignItems: 'center'\n            }}>\n              <IonIcon icon={calendarOutline} style={{ marginRight: '4px' }} />\n              {dayjs().format(language === 'zh' ? 'YYYY年MM月DD日' : 'MMM D, YYYY')}\n            </div>\n          </div>\n        </IonCardHeader>\n        <IonCardContent>\n          {/* 进度环 */}\n          <div style={{ \n            position: 'relative', \n            height: '120px', \n            display: 'flex', \n            alignItems: 'center', \n            justifyContent: 'center',\n            marginBottom: '16px'\n          }}>\n            <svg width=\"120\" height=\"120\" viewBox=\"0 0 120 120\">\n              {/* 背景圆环 */}\n              <circle\n                cx=\"60\"\n                cy=\"60\"\n                r=\"54\"\n                fill=\"none\"\n                stroke=\"var(--app-light-bg)\"\n                strokeWidth=\"12\"\n              />\n              {/* 进度圆环 */}\n              <circle\n                cx=\"60\"\n                cy=\"60\"\n                r=\"54\"\n                fill=\"none\"\n                stroke=\"var(--ion-color-primary)\"\n                strokeWidth=\"12\"\n                strokeLinecap=\"round\"\n                strokeDasharray={2 * Math.PI * 54}\n                strokeDashoffset={2 * Math.PI * 54 * (1 - progressPercentage / 100)}\n                transform=\"rotate(-90 60 60)\"\n\n              />\n              {/* 中心文字 */}\n              <text\n                x=\"60\"\n                y=\"55\"\n                textAnchor=\"middle\"\n                dominantBaseline=\"middle\"\n                fontSize=\"24\"\n                fontWeight=\"bold\"\n                fill=\"var(--ion-color-primary)\"\n              >\n                {todayStats.completed}\n              </text>\n              <text\n                x=\"60\"\n                y=\"75\"\n                textAnchor=\"middle\"\n                dominantBaseline=\"middle\"\n                fontSize=\"12\"\n                fill=\"var(--app-medium-text)\"\n              >\n                / {todayStats.planned}\n              </text>\n            </svg>\n          </div>\n          \n          <IonGrid>\n            <IonRow>\n              <IonCol size=\"6\">\n                <div className=\"data-card\">\n                  <IonIcon icon={barbellOutline} color=\"secondary\" style={{ fontSize: '24px' }} />\n                  <div className=\"data-value\">{todayStats.planned}</div>\n                  <div className=\"data-label\">{t('home.totalPlans')}</div>\n                </div>\n              </IonCol>\n              <IonCol size=\"6\">\n                <div className=\"data-card\">\n                  <IonIcon icon={flameOutline} color=\"tertiary\" style={{ fontSize: '24px' }} />\n                  <div className=\"data-value\">{todayStats.streak}</div>\n                  <div className=\"data-label\">{t('home.streakDays')}</div>\n                </div>\n              </IonCol>\n            </IonRow>\n          </IonGrid>\n        </IonCardContent>\n      </IonCard>\n\n      {/* 健身计划列表 */}\n      <div className=\"section-title\">{t('home.workoutPlans')}</div>\n      {plans.length > 0 ? (\n        plans.map((plan, index) => (\n          <IonCard \n            className=\"workout-card\" \n            key={plan.id} \n            onClick={() => navigateToPlanDetail(plan.id)}\n            style={{ \n              cursor: 'pointer'\n            }}\n          >\n            <IonCardContent style={{ padding: '16px' }}>\n              <div style={{ display: 'flex', alignItems: 'center', marginBottom: '12px' }}>\n                <div style={{ \n                  width: '40px', \n                  height: '40px', \n                  borderRadius: '12px', \n                  backgroundColor: 'rgba(123, 104, 238, 0.1)', \n                  display: 'flex', \n                  alignItems: 'center', \n                  justifyContent: 'center',\n                  marginRight: '12px'\n                }}>\n                  <IonIcon icon={barbellOutline} color=\"primary\" style={{ fontSize: '24px' }} />\n                </div>\n                <div style={{ flex: 1 }}>\n                  <h2 style={{ margin: '0 0 4px 0', fontSize: '18px', fontWeight: 'bold' }}>{plan.name}</h2>\n                  <div style={{ display: 'flex', alignItems: 'center' }}>\n                    <IonChip style={{ \n                      margin: '0', \n                      height: '20px', \n                      fontSize: '12px',\n                      '--background': 'rgba(123, 104, 238, 0.1)',\n                      '--color': 'var(--ion-color-primary)',\n                      fontWeight: '500'\n                    }}>\n                      <IonIcon icon={barbellOutline} style={{ marginRight: '4px' }} />\n                      {plan.exercises?.length || 0} {t('home.exercises')}\n                    </IonChip>\n                    {plan.estimatedDuration && (\n                      <IonChip style={{ \n                        margin: '0 0 0 8px', \n                        height: '20px', \n                        fontSize: '12px',\n                        '--background': 'rgba(90, 200, 250, 0.1)',\n                        '--color': 'var(--ion-color-secondary)',\n                        fontWeight: '500'\n                      }}>\n                        <IonIcon icon={timeOutline} style={{ marginRight: '4px' }} />\n                        {plan.estimatedDuration} {t('common.minutes')}\n                      </IonChip>\n                    )}\n                  </div>\n                </div>\n                <IonButton \n                  fill=\"clear\"\n                  color=\"primary\"\n                  style={{ \n                    marginRight: '-8px',\n                    '--padding-start': '8px',\n                    '--padding-end': '8px'\n                  }}\n                >\n                  <IonIcon slot=\"icon-only\" icon={arrowForwardOutline} />\n                </IonButton>\n              </div>\n              \n              {plan.description && (\n                <p style={{ \n                  margin: '0', \n                  color: 'var(--app-medium-text)',\n                  fontSize: '14px',\n                  display: '-webkit-box',\n                  WebkitLineClamp: 2,\n                  WebkitBoxOrient: 'vertical',\n                  overflow: 'hidden',\n                  textOverflow: 'ellipsis'\n                }}>\n                  {plan.description}\n                </p>\n              )}\n              \n              {plan.bodyParts && plan.bodyParts.length > 0 && (\n                <div style={{ marginTop: '12px', display: 'flex', flexWrap: 'wrap' }}>\n                  {plan.bodyParts.map((part, idx) => (\n                    <div key={idx} className={`body-part-tag ${getBodyPartClass(part)}`}>\n                      {translateBodyPart(part)}\n                    </div>\n                  ))}\n                </div>\n              )}\n              \n              <IonRippleEffect />\n            </IonCardContent>\n          </IonCard>\n        ))\n      ) : (\n        <EmptyState \n          icon={barbellOutline}\n          message={t('home.noPlans')}\n          subMessage={t('home.createFirst')}\n          actionText={t('home.createFirstPlan')}\n          onAction={onAddPlan}\n        />\n      )}\n      \n      {/* 最近健身记录 */}\n      {recentWorkouts.length > 0 && (\n        <>\n          <div className=\"section-title\">{t('home.recentWorkouts')}</div>\n          {recentWorkouts.map((workout, index) => (\n            <IonCard \n              className=\"workout-card\" \n              key={workout.id}\n            >\n              <IonCardContent style={{ padding: '16px' }}>\n                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                  <div style={{ display: 'flex', alignItems: 'center' }}>\n                    <div style={{ \n                      width: '40px', \n                      height: '40px', \n                      borderRadius: '12px', \n                      backgroundColor: 'rgba(76, 217, 100, 0.1)', \n                      display: 'flex', \n                      alignItems: 'center', \n                      justifyContent: 'center',\n                      marginRight: '12px'\n                    }}>\n                      <IonIcon icon={checkmarkCircleOutline} color=\"success\" style={{ fontSize: '24px' }} />\n                    </div>\n                    <div>\n                      <h2 style={{ margin: '0 0 4px 0', fontSize: '18px', fontWeight: 'bold' }}>{workout.planName}</h2>\n                      <p style={{ margin: '0', color: 'var(--app-medium-text)', fontSize: '13px' }}>\n                        {dayjs(workout.completedAt).format(language === 'zh' ? 'YYYY年MM月DD日 HH:mm' : 'MMM D, YYYY HH:mm')}\n                      </p>\n                    </div>\n                  </div>\n                  <IonBadge color=\"success\" style={{ \n                    fontWeight: 'normal', \n                    borderRadius: '50px',\n                    padding: '4px 10px'\n                  }}>\n                    {t('common.completed')}\n                  </IonBadge>\n                </div>\n                <div style={{ display: 'flex', alignItems: 'center', marginTop: '12px' }}>\n                  <IonChip style={{ \n                    margin: '0', \n                    height: '20px', \n                    fontSize: '12px',\n                    '--background': 'rgba(123, 104, 238, 0.1)',\n                    '--color': 'var(--ion-color-primary)',\n                    fontWeight: '500'\n                  }}>\n                    <IonIcon icon={barbellOutline} style={{ marginRight: '4px' }} />\n                    {workout.exercises?.length || 0} {t('home.exercises')}\n                  </IonChip>\n                  {workout.duration && (\n                    <IonChip style={{ \n                      margin: '0 0 0 8px', \n                      height: '20px', \n                      fontSize: '12px',\n                      '--background': 'rgba(90, 200, 250, 0.1)',\n                      '--color': 'var(--ion-color-secondary)',\n                      fontWeight: '500'\n                    }}>\n                      <IonIcon icon={timeOutline} style={{ marginRight: '4px' }} />\n                      {workout.duration} {t('common.minutes')}\n                    </IonChip>\n                  )}\n                </div>\n              </IonCardContent>\n            </IonCard>\n          ))}\n        </>\n      )}\n      \n      <IonFab vertical=\"bottom\" horizontal=\"end\" slot=\"fixed\">\n        <IonFabButton className=\"fab-button\" onClick={onAddPlan}>\n          <IonIcon icon={addOutline} />\n        </IonFabButton>\n      </IonFab>\n    </IonContent>\n  );\n};\n\nexport default HomePage;",
  "components/LoadingSpinner.jsx": "import React from 'react';\nimport { IonSpinner } from '@ionic/react';\nimport useLanguage from '../utils/useLanguage';\n\n// 加载状态组件\nconst LoadingSpinner = ({ message }) => {\n  const { t } = useLanguage();\n  const displayMessage = message || t('common.loading');\n  return (\n    <div className=\"loading-container\" style={{\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      height: '100%',\n      padding: '40px 20px'\n    }}>\n      <div style={{\n        width: '60px',\n        height: '60px',\n        borderRadius: '50%',\n        backgroundColor: 'rgba(123, 104, 238, 0.08)',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        marginBottom: '16px'\n      }}>\n        <IonSpinner \n          name=\"crescent\" \n          style={{\n            color: 'var(--ion-color-primary)',\n            width: '32px',\n            height: '32px',\n          }}\n        />\n      </div>\n      <p style={{\n        fontSize: '16px',\n        color: 'var(--app-medium-text)',\n        margin: 0,\n        fontWeight: '500'\n      }}>\n        {displayMessage}\n      </p>\n    </div>\n  );\n};\n\nexport default LoadingSpinner;",
  "components/PlanDetail.jsx": "import React, { useEffect, useState } from 'react';\nimport { \n  IonContent, \n  IonCard, \n  IonCardHeader, \n  IonCardTitle, \n  IonCardContent,\n  IonButton,\n  IonIcon,\n  IonList,\n  IonItem,\n  IonLabel,\n  IonButtons,\n  IonFab,\n  IonFabButton,\n  IonActionSheet,\n  IonDatetime,\n  IonModal,\n  IonToolbar,\n  IonTitle,\n  IonAlert\n} from '@ionic/react';\nimport { \n  calendarOutline, \n  timeOutline, \n  createOutline,\n  ellipsisHorizontal,\n  playOutline,\n  copyOutline,\n  trashOutline,\n  closeOutline\n} from 'ionicons/icons';\nimport { Header } from '@morphicai/components';\nimport { useParams, useHistory } from 'react-router-dom';\nimport dayjs from 'dayjs';\n\nimport useStore from '../utils/store';\nimport { calculatePlanDuration, formatDate } from '../utils/helpers';\nimport LoadingSpinner from './LoadingSpinner';\nimport ExerciseItem from './ExerciseItem';\n\nconst PlanDetail = () => {\n  const { id } = useParams();\n  const history = useHistory();\n  const { \n    getPlanById, \n    loadPlans, \n    deletePlan, \n    savePlanAsTemplate,\n    scheduleWorkout,\n    scheduledWorkouts,\n    loadScheduledWorkouts,\n    isLoading \n  } = useStore();\n  \n  const [plan, setPlan] = useState(null);\n  const [showActions, setShowActions] = useState(false);\n  const [showDatePicker, setShowDatePicker] = useState(false);\n  const [selectedDate, setSelectedDate] = useState(dayjs().format('YYYY-MM-DD'));\n  const [estimatedDuration, setEstimatedDuration] = useState(0);\n  const [showDeleteAlert, setShowDeleteAlert] = useState(false);\n  \n  useEffect(() => {\n    Promise.all([loadPlans(), loadScheduledWorkouts()]).then(() => {\n      const planData = getPlanById(id);\n      setPlan(planData);\n      \n      if (planData) {\n        setEstimatedDuration(calculatePlanDuration(planData));\n      }\n    });\n  }, [id, loadPlans, loadScheduledWorkouts, getPlanById]);\n  \n  const navigateToEditPlan = () => {\n    history.push(`/edit-plan/${id}`);\n  };\n  \n  const navigateToExecution = async () => {\n    try {\n      const today = dayjs().format('YYYY-MM-DD');\n      \n      // 检查今天是否已有相同计划的安排\n      const todayWorkouts = scheduledWorkouts.filter(workout => \n        workout.planId === id && \n        workout.date && \n        workout.date.split('T')[0] === today\n      );\n      \n      if (todayWorkouts.length > 0) {\n        // 如果已有安排，直接使用现有的\n        history.push(`/execute/${todayWorkouts[0].id}`);\n      } else {\n        // 如果没有安排，创建新的（不设置提醒）\n        const scheduleId = await handleScheduleWorkout(today, false);\n        if (scheduleId) {\n          history.push(`/execute/${scheduleId}`);\n        }\n      }\n    } catch (error) {\n      console.error('开始健身失败:', error);\n    }\n  };\n  \n  const handleDateSelect = (e) => {\n    const dateValue = e.detail.value.split('T')[0];\n    setSelectedDate(dateValue);\n    setShowDatePicker(false);\n    handleScheduleWorkout(dateValue);\n  };\n  \n  const handleScheduleWorkout = async (date, createReminder = true) => {\n    try {\n      const scheduleData = {\n        planId: id,\n        date: date,\n        name: plan.name\n      };\n      \n      // 根据是否需要创建提醒来设置选项\n      const reminderOptions = createReminder ? {\n        reminderTime: '09:00',\n        minutesBefore: 0\n      } : null;\n      \n      const result = await scheduleWorkout(scheduleData, reminderOptions);\n      \n      return result.id;\n    } catch (error) {\n      console.error('安排健身失败:', error);\n      return null;\n    }\n  };\n  \n  const handleSaveAsTemplate = async () => {\n    try {\n      await savePlanAsTemplate(id);\n    } catch (error) {\n      console.error('保存为模板失败:', error);\n    }\n  };\n  \n  const confirmDeletePlan = () => {\n    setShowDeleteAlert(true);\n  };\n  \n  const handleDeletePlan = async () => {\n    try {\n      await deletePlan(id);\n      history.goBack();\n    } catch (error) {\n      console.error('删除计划失败:', error);\n    }\n  };\n  \n  if (isLoading || !plan) {\n    return <LoadingSpinner message=\"加载计划详情...\" />;\n  }\n  \n  return (\n    <>\n      <Header title={plan.name} />\n      <IonContent>\n        <IonCard className=\"workout-card\">\n          <IonCardHeader className=\"workout-card-header\">\n            <IonCardTitle>{plan.name}</IonCardTitle>\n            <IonButtons slot=\"end\">\n              <IonButton onClick={() => setShowActions(true)}>\n                <IonIcon slot=\"icon-only\" icon={ellipsisHorizontal} />\n              </IonButton>\n            </IonButtons>\n          </IonCardHeader>\n          <IonCardContent>\n            {plan.description && (\n              <p>{plan.description}</p>\n            )}\n            <div className=\"plan-meta\">\n              <IonItem lines=\"none\">\n                <IonIcon icon={timeOutline} slot=\"start\" color=\"medium\" />\n                <IonLabel>\n                  估计时长: {estimatedDuration} 分钟\n                </IonLabel>\n              </IonItem>\n              <IonItem lines=\"none\">\n                <IonIcon icon={calendarOutline} slot=\"start\" color=\"medium\" />\n                <IonLabel>\n                  创建于: {formatDate(plan.createdAt, 'YYYY年MM月DD日')}\n                </IonLabel>\n              </IonItem>\n            </div>\n          </IonCardContent>\n        </IonCard>\n        \n        <div className=\"section-title\">动作列表</div>\n        <IonList>\n          {plan.exercises && plan.exercises.map((exercise, index) => (\n            <ExerciseItem \n              key={exercise.id || index} \n              exercise={exercise} \n              onClick={() => {}}\n            />\n          ))}\n        </IonList>\n        \n        <div className=\"button-container\" style={{ padding: '16px' }}>\n          <IonButton \n            expand=\"block\" \n            color=\"primary\"\n            onClick={() => setShowDatePicker(true)}\n          >\n            <IonIcon slot=\"start\" icon={calendarOutline} />\n            安排到日历\n          </IonButton>\n          \n          <IonButton \n            expand=\"block\" \n            color=\"secondary\"\n            onClick={navigateToExecution}\n            style={{ marginTop: '8px' }}\n          >\n            <IonIcon slot=\"start\" icon={playOutline} />\n            立即开始\n          </IonButton>\n        </div>\n        \n        <IonFab vertical=\"bottom\" horizontal=\"end\" slot=\"fixed\">\n          <IonFabButton onClick={navigateToEditPlan} className=\"fab-button\">\n            <IonIcon icon={createOutline} />\n          </IonFabButton>\n        </IonFab>\n        \n        <IonActionSheet\n          isOpen={showActions}\n          onDidDismiss={() => setShowActions(false)}\n          buttons={[\n            {\n              text: '编辑计划',\n              icon: createOutline,\n              handler: navigateToEditPlan\n            },\n            {\n              text: '保存为模板',\n              icon: copyOutline,\n              handler: handleSaveAsTemplate\n            },\n            {\n              text: '删除计划',\n              role: 'destructive',\n              icon: trashOutline,\n              handler: confirmDeletePlan\n            },\n            {\n              text: '取消',\n              role: 'cancel',\n              icon: closeOutline\n            }\n          ]}\n        />\n        \n        <IonModal isOpen={showDatePicker} onDidDismiss={() => setShowDatePicker(false)}>\n          <IonToolbar>\n            <IonTitle>选择日期</IonTitle>\n            <IonButtons slot=\"end\">\n              <IonButton onClick={() => setShowDatePicker(false)}>\n                <IonIcon icon={closeOutline} />\n              </IonButton>\n            </IonButtons>\n          </IonToolbar>\n          <IonContent>\n            <IonDatetime \n              value={selectedDate} \n              onIonChange={handleDateSelect}\n              presentation=\"date\"\n              min={dayjs().format('YYYY-MM-DD')}\n              max={dayjs().add(1, 'year').format('YYYY-MM-DD')}\n              style={{ width: '100%' }}\n            />\n          </IonContent>\n        </IonModal>\n        \n        <IonAlert\n          isOpen={showDeleteAlert}\n          onDidDismiss={() => setShowDeleteAlert(false)}\n          header=\"确认删除\"\n          message={`确定要删除\"${plan.name}\"吗？此操作无法撤销。`}\n          buttons={[\n            {\n              text: '取消',\n              role: 'cancel'\n            },\n            {\n              text: '删除',\n              role: 'destructive',\n              handler: handleDeletePlan\n            }\n          ]}\n        />\n      </IonContent>\n    </>\n  );\n};\n\nexport default PlanDetail;",
  "components/PlanExecution.jsx": "import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { \n  IonContent, \n  IonCard, \n  IonCardContent,\n  IonButton,\n  IonIcon,\n  IonList,\n  IonItem,\n  IonLabel,\n  IonCheckbox,\n  IonChip,\n  IonBadge,\n  IonProgressBar,\n  IonAlert,\n  IonToast,\n  IonGrid,\n  IonRow,\n  IonCol,\n  IonInput,\n  IonHeader,\n  IonToolbar,\n  IonTitle,\n  IonButtons,\n  IonBackButton,\n  IonText\n} from '@ionic/react';\nimport { \n  playOutline, \n  pauseOutline, \n  checkmarkOutline,\n  refreshOutline,\n  stopOutline,\n  timeOutline,\n  fitnessOutline,\n  barbellOutline,\n  volumeHighOutline,\n  arrowForwardOutline,\n  informationCircleOutline,\n  sunnyOutline\n} from 'ionicons/icons';\nimport { PageHeader } from '@morphixai/components';\nimport { useParams, useHistory } from 'react-router-dom';\n\nimport useStore from '../utils/store';\nimport { formatSeconds } from '../utils/helpers';\nimport LoadingSpinner from './LoadingSpinner';\nimport exerciseDatabase from '../utils/exerciseData';\n\nconst PlanExecution = () => {\n  const { id } = useParams();\n  const history = useHistory();\n  const { \n    getScheduledWorkoutById, \n    getPlanById, \n    loadPlans, \n    loadScheduledWorkouts,\n    updateScheduledWorkout,\n    recordWorkout,\n    saveWorkoutProgress,\n    getWorkoutProgress,\n    checkWorkoutRecordExists,\n    getWorkoutRecordByScheduleId,\n    isLoading \n  } = useStore();\n  \n  const [scheduledWorkout, setScheduledWorkout] = useState(null);\n  const [plan, setPlan] = useState(null);\n  const [currentExerciseIndex, setCurrentExerciseIndex] = useState(0);\n  const [currentSetIndex, setCurrentSetIndex] = useState(0);\n  const [exerciseProgress, setExerciseProgress] = useState([]);\n  const [timer, setTimer] = useState(0);\n  const [timerRunning, setTimerRunning] = useState(false);\n  const [restMode, setRestMode] = useState(false);\n  const [restDuration, setRestDuration] = useState(0);\n  const [workoutComplete, setWorkoutComplete] = useState(false);\n  const [showCompleteAlert, setShowCompleteAlert] = useState(false);\n  const [showExitAlert, setShowExitAlert] = useState(false);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [startTime, setStartTime] = useState(null);\n  const [showExerciseInfo, setShowExerciseInfo] = useState(false);\n  const [showContinueWorkoutAlert, setShowContinueWorkoutAlert] = useState(false);\n  const [savedProgress, setSavedProgress] = useState(null);\n  const [existingRecord, setExistingRecord] = useState(null);\n  const [showRecordExistsAlert, setShowRecordExistsAlert] = useState(false);\n  const [initializationTimeout, setInitializationTimeout] = useState(false);\n  const [wakeLockActive, setWakeLockActive] = useState(false);\n  \n  const audioRef = useRef(null);\n  const timerIntervalRef = useRef(null);\n  const saveIntervalRef = useRef(null);\n  const wakeLockRef = useRef(null);\n  \n  // 屏幕常亮相关函数\n  const requestWakeLock = async () => {\n    try {\n      if ('wakeLock' in navigator) {\n        wakeLockRef.current = await navigator.wakeLock.request('screen');\n        setWakeLockActive(true);\n        console.log('屏幕常亮已启用');\n        \n        wakeLockRef.current.addEventListener('release', () => {\n          setWakeLockActive(false);\n          console.log('屏幕常亮已释放');\n        });\n      } else {\n        console.warn('当前浏览器不支持屏幕常亮功能');\n      }\n    } catch (error) {\n      console.error('启用屏幕常亮失败:', error);\n    }\n  };\n\n  const releaseWakeLock = async () => {\n    try {\n      if (wakeLockRef.current) {\n        await wakeLockRef.current.release();\n        wakeLockRef.current = null;\n        setWakeLockActive(false);\n        console.log('屏幕常亮已手动释放');\n      }\n    } catch (error) {\n      console.error('释放屏幕常亮失败:', error);\n    }\n  };\n\n  // 页面可见性变化处理\n  const handleVisibilityChange = async () => {\n    if (document.visibilityState === 'visible' && !workoutComplete) {\n      // 页面重新可见时，重新请求屏幕常亮\n      await requestWakeLock();\n    }\n  };\n\n  // 获取动作详细信息\n  const getExerciseDetails = (exerciseName) => {\n    const allExercises = [];\n    Object.keys(exerciseDatabase).forEach(categoryId => {\n      const category = exerciseDatabase[categoryId];\n      category.exercises.forEach(exercise => {\n        allExercises.push({\n          ...exercise,\n          category: {\n            id: categoryId,\n            name: category.name\n          }\n        });\n      });\n    });\n    \n    return allExercises.find(ex => ex.name === exerciseName) || null;\n  };\n  \n  // 初始化数据\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        console.log('开始加载健身数据，ID:', id);\n        \n        await Promise.all([loadPlans(), loadScheduledWorkouts()]);\n        \n        const scheduledData = getScheduledWorkoutById(id);\n        console.log('获取到的安排数据:', scheduledData);\n        setScheduledWorkout(scheduledData);\n        \n        if (scheduledData && scheduledData.planId) {\n          const planData = getPlanById(scheduledData.planId);\n          console.log('获取到的计划数据:', planData);\n          setPlan(planData);\n          \n          if (!planData) {\n            console.error('计划数据不存在，ID:', scheduledData.planId);\n            return;\n          }\n          \n          // 检查是否已有健身记录\n          const existingWorkoutRecord = await checkWorkoutRecordExists(id);\n          if (existingWorkoutRecord) {\n            console.log('发现已存在的健身记录:', existingWorkoutRecord);\n            setExistingRecord(existingWorkoutRecord);\n            setShowRecordExistsAlert(true);\n            return;\n          }\n          \n          // 检查是否有保存的进度\n          const progressData = getWorkoutProgress(id);\n          console.log('获取到的保存进度:', progressData);\n          \n          if (progressData && progressData.progress) {\n            setSavedProgress(progressData);\n            setShowContinueWorkoutAlert(true);\n          } else {\n            // 初始化进度跟踪\n            if (planData && planData.exercises && planData.exercises.length > 0) {\n              const progress = planData.exercises.map((exercise, index) => ({\n                exerciseId: exercise.id || `exercise_${index}`,\n                name: exercise.name,\n                totalSets: exercise.sets || 1,\n                completedSets: Array(exercise.sets || 1).fill(false),\n                weights: Array(exercise.sets || 1).fill(exercise.weight || 0)\n              }));\n              \n              console.log('初始化练习进度:', progress);\n              setExerciseProgress(progress);\n            } else {\n              console.error('计划数据无效，无法初始化进度:', planData);\n            }\n          }\n        } else {\n          console.error('安排数据无效:', scheduledData);\n        }\n        \n        // 记录开始时间\n        setStartTime(new Date());\n      } catch (error) {\n        console.error('加载健身数据失败:', error);\n      }\n    };\n    \n    if (id) {\n      loadData();\n    }\n    \n    // 初始化音频\n    audioRef.current = new Audio('https://assets.mixkit.co/sfx/preview/mixkit-software-interface-start-2574.mp3');\n    \n    // 启用屏幕常亮\n    requestWakeLock();\n    \n    // 监听页面可见性变化\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    \n    return () => {\n      if (timerIntervalRef.current) {\n        clearInterval(timerIntervalRef.current);\n      }\n      if (saveIntervalRef.current) {\n        clearInterval(saveIntervalRef.current);\n      }\n      \n      // 释放屏幕常亮\n      releaseWakeLock();\n      \n      // 移除事件监听器\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, [id, loadPlans, loadScheduledWorkouts, getPlanById, getScheduledWorkoutById, getWorkoutProgress, checkWorkoutRecordExists]);\n  \n  // 监听计划数据变化，确保进度正确初始化\n  useEffect(() => {\n    if (plan && plan.exercises && plan.exercises.length > 0 && exerciseProgress.length === 0) {\n      // 如果计划已加载但进度未初始化，且没有弹出继续训练的对话框\n      if (!showContinueWorkoutAlert && !showRecordExistsAlert) {\n        console.log('计划已加载，补充初始化进度');\n        const progress = plan.exercises.map((exercise, index) => ({\n          exerciseId: exercise.id || `exercise_${index}`,\n          name: exercise.name,\n          totalSets: exercise.sets || 1,\n          completedSets: Array(exercise.sets || 1).fill(false),\n          weights: Array(exercise.sets || 1).fill(exercise.weight || 0)\n        }));\n        \n        setExerciseProgress(progress);\n      }\n    }\n  }, [plan, exerciseProgress, showContinueWorkoutAlert, showRecordExistsAlert]);\n  \n  // 初始化超时检查\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      if (!exerciseProgress.length && plan && plan.exercises) {\n        console.warn('初始化超时，强制初始化进度');\n        setInitializationTimeout(true);\n        \n        // 强制初始化\n        const progress = plan.exercises.map((exercise, index) => ({\n          exerciseId: exercise.id || `exercise_${index}`,\n          name: exercise.name,\n          totalSets: exercise.sets || 1,\n          completedSets: Array(exercise.sets || 1).fill(false),\n          weights: Array(exercise.sets || 1).fill(exercise.weight || 0)\n        }));\n        \n        setExerciseProgress(progress);\n      }\n    }, 5000); // 5秒超时\n    \n    return () => clearTimeout(timeout);\n  }, [plan, exerciseProgress]);\n  \n  // 定期保存进度\n  useEffect(() => {\n    if (plan && exerciseProgress.length > 0 && !workoutComplete) {\n      // 每30秒保存一次进度\n      saveIntervalRef.current = setInterval(() => {\n        const progressToSave = {\n          currentExerciseIndex,\n          currentSetIndex,\n          exerciseProgress,\n          timer,\n          restMode,\n          restDuration\n        };\n        saveWorkoutProgress(id, progressToSave);\n      }, 30000);\n      \n      return () => {\n        if (saveIntervalRef.current) {\n          clearInterval(saveIntervalRef.current);\n        }\n      };\n    }\n  }, [id, plan, exerciseProgress, currentExerciseIndex, currentSetIndex, timer, restMode, restDuration, workoutComplete, saveWorkoutProgress]);\n  \n  // 计时器逻辑\n  useEffect(() => {\n    if (timerRunning) {\n      timerIntervalRef.current = setInterval(() => {\n        setTimer(t => {\n          const newTime = t + 1;\n          \n          // 如果是休息模式且时间到了休息结束时间\n          if (restMode && newTime >= restDuration) {\n            // 播放声音提醒\n            if (audioRef.current) {\n              audioRef.current.play().catch(e => console.error('播放音频失败:', e));\n            }\n            \n            // 显示提示\n            setToastMessage('休息时间结束，请继续下一组训练');\n            setShowToast(true);\n            \n            // 自动结束休息\n            setRestMode(false);\n            setTimerRunning(false);\n            return 0;\n          }\n          \n          return newTime;\n        });\n      }, 1000);\n    }\n    \n    return () => {\n      if (timerIntervalRef.current) {\n        clearInterval(timerIntervalRef.current);\n        timerIntervalRef.current = null;\n      }\n    };\n  }, [timerRunning, restMode, restDuration]);\n  \n  // 检查当前练习和组是否完成\n  const checkWorkoutStatus = useCallback(() => {\n    if (!exerciseProgress.length || currentExerciseIndex >= exerciseProgress.length) return;\n    \n    // 检查当前练习的所有组是否完成\n    const currentExerciseProgress = exerciseProgress[currentExerciseIndex];\n    if (!currentExerciseProgress || !currentExerciseProgress.completedSets) return;\n    \n    const allSetsCompleted = currentExerciseProgress.completedSets.every(set => set);\n    \n    if (allSetsCompleted) {\n      // 如果是最后一个练习，则整个健身完成\n      if (currentExerciseIndex === exerciseProgress.length - 1) {\n        console.log('所有练习完成，显示完成提示');\n        setWorkoutComplete(true);\n        setShowCompleteAlert(true);\n        // 健身完成时释放屏幕常亮\n        releaseWakeLock();\n      } else {\n        // 否则，移动到下一个练习\n        console.log(`练习 ${currentExerciseIndex + 1} 完成，移动到下一个练习`);\n        setCurrentExerciseIndex(prevIndex => prevIndex + 1);\n        setCurrentSetIndex(0);\n        \n        // 开始休息时间\n        startRest(true);\n      }\n    }\n  }, [currentExerciseIndex, exerciseProgress]);\n  \n  // 当练习进度变化时，检查状态\n  useEffect(() => {\n    checkWorkoutStatus();\n  }, [exerciseProgress, checkWorkoutStatus]);\n  \n  // 确保进度条在数据更新时重新渲染\n  useEffect(() => {\n    // 强制重新计算进度，确保UI同步\n    if (exerciseProgress.length > 0 && plan && plan.exercises) {\n      const totalSets = plan.exercises.reduce((sum, exercise) => sum + exercise.sets, 0);\n      const completedSets = exerciseProgress.reduce((sum, exercise) => {\n        if (!exercise || !Array.isArray(exercise.completedSets)) return sum;\n        return sum + exercise.completedSets.filter(Boolean).length;\n      }, 0);\n      \n      // 调试日志，帮助排查问题\n      console.log('进度更新:', { \n        totalSets, \n        completedSets, \n        progressPercentage: (completedSets / totalSets) * 100,\n        currentExerciseIndex,\n        exerciseProgress: exerciseProgress.map(ex => ({\n          name: ex.name,\n          completedSets: ex.completedSets\n        }))\n      });\n    }\n  }, [exerciseProgress, plan, currentExerciseIndex]);\n  \n  // 开始/暂停计时器\n  const toggleTimer = () => {\n    setTimerRunning(!timerRunning);\n  };\n  \n  // 重置计时器\n  const resetTimer = () => {\n    setTimer(0);\n    setTimerRunning(false);\n  };\n  \n  // 开始休息时间\n  const startRest = (isExerciseRest = false) => {\n    setRestMode(true);\n    resetTimer();\n    setTimerRunning(true);\n    \n    // 设置休息时间\n    const restTime = isExerciseRest \n      ? (plan.exercises[currentExerciseIndex].restAfterExercise || 60)\n      : (plan.exercises[currentExerciseIndex].restBetweenSets || 30);\n    \n    setRestDuration(restTime);\n    \n    setToastMessage(`休息时间: ${Math.floor(restTime / 60)}分${restTime % 60}秒`);\n    setShowToast(true);\n  };\n  \n  // 结束休息时间\n  const endRest = () => {\n    setRestMode(false);\n    resetTimer();\n  };\n  \n  // 标记组完成\n  const markSetComplete = (setIndex) => {\n    if (!exerciseProgress.length || currentExerciseIndex >= exerciseProgress.length) return;\n    \n    const updatedProgress = [...exerciseProgress];\n    if (!updatedProgress[currentExerciseIndex] || !updatedProgress[currentExerciseIndex].completedSets) return;\n    \n    updatedProgress[currentExerciseIndex].completedSets[setIndex] = true;\n    setExerciseProgress(updatedProgress);\n    \n    // 更新当前组索引\n    if (setIndex < updatedProgress[currentExerciseIndex].totalSets - 1) {\n      setCurrentSetIndex(setIndex + 1);\n      \n      // 如果不是最后一组，开始组间休息\n      startRest();\n    } else {\n      // 最后一组已完成，检查练习状态\n      checkWorkoutStatus();\n    }\n  };\n  \n  // 更新重量\n  const updateWeight = (setIndex, weight) => {\n    if (!exerciseProgress.length || currentExerciseIndex >= exerciseProgress.length) return;\n    \n    const updatedProgress = [...exerciseProgress];\n    if (!updatedProgress[currentExerciseIndex] || !updatedProgress[currentExerciseIndex].weights) return;\n    \n    updatedProgress[currentExerciseIndex].weights[setIndex] = weight;\n    setExerciseProgress(updatedProgress);\n  };\n  \n  // 完成健身\n  const completeWorkout = async () => {\n    try {\n      // 计算持续时间（分钟）\n      const endTime = new Date();\n      const durationMs = endTime - startTime;\n      const durationMinutes = Math.round(durationMs / (1000 * 60));\n      \n      // 准备记录数据\n      const recordData = {\n        scheduledWorkoutId: id,\n        planId: scheduledWorkout.planId,\n        planName: plan.name,\n        startTime: startTime.toISOString(),\n        endTime: endTime.toISOString(),\n        duration: durationMinutes,\n        exercises: exerciseProgress.map((exercise, index) => {\n          const planExercise = plan.exercises[index];\n          return {\n            id: exercise.exerciseId,\n            name: exercise.name,\n            sets: exercise.totalSets,\n            completedSets: exercise.completedSets.filter(Boolean).length,\n            weights: exercise.weights,\n            reps: planExercise.reps\n          };\n        })\n      };\n      \n      // 保存记录\n      await recordWorkout(recordData);\n      \n      // 关闭所有弹窗\n      setShowCompleteAlert(false);\n      setShowExitAlert(false);\n      \n      // 释放屏幕常亮\n      await releaseWakeLock();\n      \n      // 显示成功提示\n      setToastMessage('健身记录已保存！');\n      setShowToast(true);\n      \n      // 返回首页\n      setTimeout(() => {\n        history.replace('/tabs');\n      }, 1500);\n    } catch (error) {\n      console.error('保存健身记录失败:', error);\n      setToastMessage('保存记录失败，请重试');\n      setShowToast(true);\n    }\n  };\n\n  // 手动退出健身（仅保存进度）\n  const exitWorkoutWithProgress = async () => {\n    try {\n      // 保存当前进度\n      const progressToSave = {\n        currentExerciseIndex,\n        currentSetIndex,\n        exerciseProgress,\n        timer,\n        restMode,\n        restDuration\n      };\n      saveWorkoutProgress(id, progressToSave);\n      \n      // 关闭弹窗\n      setShowExitAlert(false);\n      \n      // 释放屏幕常亮\n      await releaseWakeLock();\n      \n      // 显示提示\n      setToastMessage('进度已保存，下次可继续训练');\n      setShowToast(true);\n      \n      // 返回首页\n      setTimeout(() => {\n        history.replace('/tabs');\n      }, 1500);\n    } catch (error) {\n      console.error('保存进度失败:', error);\n      setToastMessage('保存进度失败');\n      setShowToast(true);\n    }\n  };\n  \n  // 退出健身\n  const exitWorkout = () => {\n    setShowExitAlert(true);\n  };\n\n  // 查看已存在的健身记录\n  const viewExistingRecord = async () => {\n    await releaseWakeLock();\n    setShowRecordExistsAlert(false);\n    history.replace('/tabs');\n  };\n\n  // 重新开始健身（忽略已存在记录）\n  const restartIgnoreRecord = () => {\n    setShowRecordExistsAlert(false);\n    setExistingRecord(null);\n    \n    // 初始化进度跟踪\n    if (plan && plan.exercises && plan.exercises.length > 0) {\n      const progress = plan.exercises.map((exercise, index) => ({\n        exerciseId: exercise.id || `exercise_${index}`,\n        name: exercise.name,\n        totalSets: exercise.sets || 1,\n        completedSets: Array(exercise.sets || 1).fill(false),\n        weights: Array(exercise.sets || 1).fill(exercise.weight || 0)\n      }));\n      \n      console.log('重新开始 - 初始化练习进度:', progress);\n      setExerciseProgress(progress);\n    }\n    \n    // 重置所有状态\n    setCurrentExerciseIndex(0);\n    setCurrentSetIndex(0);\n    setTimer(0);\n    setRestMode(false);\n    setRestDuration(0);\n    setWorkoutComplete(false);\n    \n    // 记录开始时间\n    setStartTime(new Date());\n  };\n  \n  // 获取动作示范图片\n  const getExerciseImage = (exerciseName) => {\n    // 这里可以根据动作名称返回相应的图片URL\n    // 这里使用简单的映射关系，实际应用中可以使用更复杂的逻辑\n    const exerciseImages = {\n      '卧推': 'https://static.strengthlevel.com/images/illustrations/bench-press-1000x1000.jpg',\n      '深蹲': 'https://static.strengthlevel.com/images/illustrations/squat-1000x1000.jpg',\n      '硬拉': 'https://static.strengthlevel.com/images/illustrations/deadlift-1000x1000.jpg',\n      '引体向上': 'https://static.strengthlevel.com/images/illustrations/pull-ups-1000x1000.jpg',\n      '俯卧撑': 'https://static.strengthlevel.com/images/illustrations/push-ups-1000x1000.jpg',\n      '哑铃卧推': 'https://static.strengthlevel.com/images/illustrations/dumbbell-bench-press-1000x1000.jpg',\n      '哑铃飞鸟': 'https://static.strengthlevel.com/images/illustrations/dumbbell-fly-1000x1000.jpg',\n      '哑铃弯举': 'https://static.strengthlevel.com/images/illustrations/dumbbell-curl-1000x1000.jpg',\n      '杠铃弯举': 'https://static.strengthlevel.com/images/illustrations/barbell-curl-1000x1000.jpg',\n      '坐姿推肩': 'https://static.strengthlevel.com/images/illustrations/seated-shoulder-press-1000x1000.jpg',\n      '侧平举': 'https://static.strengthlevel.com/images/illustrations/lateral-raise-1000x1000.jpg',\n      '腿举': 'https://static.strengthlevel.com/images/illustrations/leg-press-1000x1000.jpg',\n      '腿屈伸': 'https://static.strengthlevel.com/images/illustrations/leg-extension-1000x1000.jpg'\n    };\n    \n    return exerciseImages[exerciseName] || 'https://static.strengthlevel.com/images/illustrations/bench-press-1000x1000.jpg';\n  };\n  \n  // 继续之前的健身进度\n  const continueWorkout = () => {\n    if (savedProgress && savedProgress.progress) {\n      // 确保进度数据的完整性\n      const progressData = savedProgress.progress;\n      \n      // 恢复练习进度，确保数据结构正确\n      if (progressData.exerciseProgress && Array.isArray(progressData.exerciseProgress)) {\n        // 验证进度数据的完整性\n        const validatedProgress = progressData.exerciseProgress.map((exercise, index) => {\n          const planExercise = plan.exercises[index];\n          if (!planExercise) return null;\n          \n          return {\n            exerciseId: exercise.exerciseId || planExercise.id,\n            name: exercise.name || planExercise.name,\n            totalSets: exercise.totalSets || planExercise.sets,\n            completedSets: Array.isArray(exercise.completedSets) \n              ? exercise.completedSets.slice(0, planExercise.sets)\n              : Array(planExercise.sets).fill(false),\n            weights: Array.isArray(exercise.weights)\n              ? exercise.weights.slice(0, planExercise.sets)\n              : Array(planExercise.sets).fill(planExercise.weight)\n          };\n        }).filter(Boolean);\n        \n        setExerciseProgress(validatedProgress);\n        \n        // 智能计算当前应该在哪个练习和组\n        let targetExerciseIndex = 0;\n        let targetSetIndex = 0;\n        \n        // 找到第一个未完全完成的练习\n        for (let i = 0; i < validatedProgress.length; i++) {\n          const exercise = validatedProgress[i];\n          const allSetsCompleted = exercise.completedSets.every(set => set === true);\n          \n          if (!allSetsCompleted) {\n            targetExerciseIndex = i;\n            // 找到该练习中第一个未完成的组\n            targetSetIndex = exercise.completedSets.findIndex(set => set === false);\n            if (targetSetIndex === -1) targetSetIndex = 0;\n            break;\n          }\n        }\n        \n        // 如果所有练习都完成了，设置为最后一个练习的最后一组\n        if (targetExerciseIndex === 0 && validatedProgress.length > 0) {\n          const firstExercise = validatedProgress[0];\n          const allFirstExerciseSetsCompleted = firstExercise.completedSets.every(set => set === true);\n          if (allFirstExerciseSetsCompleted) {\n            // 检查是否所有练习都完成了\n            const allExercisesCompleted = validatedProgress.every(ex => \n              ex.completedSets.every(set => set === true)\n            );\n            if (allExercisesCompleted) {\n              targetExerciseIndex = validatedProgress.length - 1;\n              targetSetIndex = validatedProgress[targetExerciseIndex].completedSets.length - 1;\n            }\n          }\n        }\n        \n        console.log('恢复进度 - 目标练习:', targetExerciseIndex, '目标组:', targetSetIndex);\n        setCurrentExerciseIndex(targetExerciseIndex);\n        setCurrentSetIndex(targetSetIndex);\n      } else {\n        // 如果进度数据无效，重新初始化\n        const freshProgress = plan.exercises.map(exercise => ({\n          exerciseId: exercise.id,\n          name: exercise.name,\n          totalSets: exercise.sets,\n          completedSets: Array(exercise.sets).fill(false),\n          weights: Array(exercise.sets).fill(exercise.weight)\n        }));\n        setExerciseProgress(freshProgress);\n        setCurrentExerciseIndex(0);\n        setCurrentSetIndex(0);\n      }\n      \n      // 恢复其他状态\n      setTimer(progressData.timer || 0);\n      setRestMode(progressData.restMode || false);\n      setRestDuration(progressData.restDuration || 0);\n    }\n    \n    setShowContinueWorkoutAlert(false);\n    setSavedProgress(null);\n  };\n  \n  // 重新开始健身\n  const restartWorkout = () => {\n    // 清除保存的进度\n    try {\n      localStorage.removeItem(`workout_progress_${id}`);\n    } catch (error) {\n      console.error('清除健身进度失败:', error);\n    }\n    \n    // 重新初始化进度\n    if (plan && plan.exercises) {\n      const progress = plan.exercises.map(exercise => ({\n        exerciseId: exercise.id,\n        name: exercise.name,\n        totalSets: exercise.sets,\n        completedSets: Array(exercise.sets).fill(false),\n        weights: Array(exercise.sets).fill(exercise.weight)\n      }));\n      \n      setExerciseProgress(progress);\n    }\n    \n    setCurrentExerciseIndex(0);\n    setCurrentSetIndex(0);\n    setTimer(0);\n    setRestMode(false);\n    setRestDuration(0);\n    setShowContinueWorkoutAlert(false);\n    setSavedProgress(null);\n  };\n  \n  if (isLoading || !plan) {\n    return <LoadingSpinner message=\"加载健身计划...\" />;\n  }\n\n  // 安全检查：确保exerciseProgress已初始化且currentExerciseIndex有效\n  if (!exerciseProgress.length) {\n    // 如果计划存在但进度未初始化，尝试初始化\n    if (plan && plan.exercises && plan.exercises.length > 0) {\n      const progress = plan.exercises.map((exercise, index) => ({\n        exerciseId: exercise.id || `exercise_${index}`,\n        name: exercise.name,\n        totalSets: exercise.sets || 1,\n        completedSets: Array(exercise.sets || 1).fill(false),\n        weights: Array(exercise.sets || 1).fill(exercise.weight || 0)\n      }));\n      \n      console.log('延迟初始化练习进度:', progress);\n      setExerciseProgress(progress);\n    }\n    \n    // 如果初始化超时，显示错误信息\n    if (initializationTimeout) {\n      return (\n        <IonContent>\n          <div style={{ \n            display: 'flex', \n            flexDirection: 'column', \n            alignItems: 'center', \n            justifyContent: 'center', \n            height: '50vh',\n            padding: '20px',\n            textAlign: 'center'\n          }}>\n            <h2>初始化失败</h2>\n            <p>无法加载训练数据，请返回重试</p>\n            <IonButton onClick={() => history.goBack()} color=\"primary\">\n              返回\n            </IonButton>\n          </div>\n        </IonContent>\n      );\n    }\n    \n    return <LoadingSpinner message=\"初始化训练数据...\" />;\n  }\n\n  // 确保 currentExerciseIndex 在有效范围内\n  if (currentExerciseIndex >= exerciseProgress.length) {\n    console.warn('当前练习索引超出范围，重置为0');\n    setCurrentExerciseIndex(0);\n    return <LoadingSpinner message=\"调整训练进度...\" />;\n  }\n  \n  const currentExercise = plan.exercises[currentExerciseIndex];\n  const progress = exerciseProgress[currentExerciseIndex];\n  \n  // 获取动作详细信息\n  const exerciseDetails = getExerciseDetails(currentExercise.name);\n  \n  // 计算总进度百分比（基于所有组的完成情况）\n  const totalSets = plan.exercises.reduce((sum, exercise) => sum + exercise.sets, 0);\n  const completedSets = exerciseProgress.reduce((sum, exercise) => {\n    if (!exercise || !Array.isArray(exercise.completedSets)) return sum;\n    return sum + exercise.completedSets.filter(Boolean).length;\n  }, 0);\n  const progressPercentage = totalSets > 0 ? Math.min((completedSets / totalSets) * 100, 100) : 0;\n  \n  // 计算当前动作的进度\n  const currentExerciseProgress = exerciseProgress[currentExerciseIndex];\n  const currentExerciseCompletedSets = currentExerciseProgress ? \n    currentExerciseProgress.completedSets.filter(Boolean).length : 0;\n  const currentExerciseTotalSets = currentExercise ? currentExercise.sets : 0;\n  \n  return (\n    <>\n      <PageHeader title={`执行: ${plan.name}`} />\n      <IonContent>\n        {/* 总进度条 */}\n        <div style={{ position: 'relative', padding: '8px 16px', backgroundColor: 'var(--app-light-bg)' }}>\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '4px' }}>\n            <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n              <small style={{ color: 'var(--app-medium-text)', fontSize: '12px' }}>总进度</small>\n              {wakeLockActive && (\n                <div style={{ \n                  display: 'flex', \n                  alignItems: 'center', \n                  gap: '4px',\n                  padding: '2px 6px',\n                  backgroundColor: 'rgba(255, 193, 7, 0.1)',\n                  borderRadius: '10px'\n                }}>\n                  <IonIcon \n                    icon={sunnyOutline} \n                    style={{ \n                      fontSize: '12px', \n                      color: 'var(--ion-color-warning)' \n                    }} \n                  />\n                  <small style={{ \n                    color: 'var(--ion-color-warning)', \n                    fontSize: '10px',\n                    fontWeight: '500'\n                  }}>\n                    屏幕常亮\n                  </small>\n                </div>\n              )}\n            </div>\n            <small style={{ color: 'var(--app-medium-text)', fontSize: '12px' }}>{completedSets}/{totalSets} 组</small>\n          </div>\n          <IonProgressBar \n            value={progressPercentage / 100}\n            color=\"primary\"\n            style={{ height: '8px', borderRadius: '4px' }}\n          />\n          <div style={{ display: 'flex', justifyContent: 'center', marginTop: '4px' }}>\n            <small style={{ color: 'var(--app-medium-text)', fontSize: '11px' }}>\n              {progressPercentage.toFixed(0)}% 完成\n            </small>\n          </div>\n        </div>\n        \n        {/* 当前练习信息 */}\n        <IonCard className=\"workout-card scale-in\">\n          <IonCardContent>\n            <div style={{ \n              display: 'flex', \n              alignItems: 'center', \n              justifyContent: 'space-between',\n              marginBottom: '8px'\n            }}>\n              <div style={{ \n                padding: '6px 12px', \n                backgroundColor: 'var(--app-light-bg)', \n                borderRadius: '16px',\n                fontSize: '14px',\n                fontWeight: '500',\n                color: 'var(--app-medium-text)'\n              }}>\n                {currentExerciseIndex + 1}/{plan.exercises.length}\n              </div>\n              <IonButton \n                fill=\"clear\" \n                size=\"small\"\n                onClick={() => setShowExerciseInfo(true)}\n              >\n                <IonIcon slot=\"icon-only\" icon={informationCircleOutline} />\n              </IonButton>\n            </div>\n            \n            <h1 style={{ \n              fontSize: '24px', \n              fontWeight: 'bold', \n              textAlign: 'center', \n              margin: '8px 0 16px',\n              color: 'var(--ion-color-primary)'\n            }}>\n              {currentExercise.name}\n            </h1>\n            \n            {/* 动作图片 */}\n            <div style={{ \n              width: '100%', \n              height: '180px',\n              borderRadius: '12px',\n              overflow: 'hidden',\n              marginBottom: '16px',\n              position: 'relative'\n            }}>\n              <img \n                src={getExerciseImage(currentExercise.name)} \n                alt={currentExercise.name}\n                style={{ \n                  width: '100%', \n                  height: '100%', \n                  objectFit: 'cover',\n                  filter: restMode ? 'grayscale(100%)' : 'none',\n                  transition: 'filter 0.3s ease'\n                }}\n              />\n              {restMode && (\n                <div style={{\n                  position: 'absolute',\n                  top: 0,\n                  left: 0,\n                  right: 0,\n                  bottom: 0,\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  backgroundColor: 'rgba(0, 0, 0, 0.5)',\n                  color: 'white',\n                  fontSize: '24px',\n                  fontWeight: 'bold'\n                }}>\n                  休息中\n                </div>\n              )}\n            </div>\n            \n            <div style={{ textAlign: 'center', margin: '16px 0' }}>\n              {/* 当前动作进度条 */}\n              <div style={{ marginBottom: '12px' }}>\n                <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '4px' }}>\n                  <small style={{ color: 'var(--app-medium-text)', fontSize: '12px' }}>当前动作进度</small>\n                  <small style={{ color: 'var(--app-medium-text)', fontSize: '12px' }}>\n                    {currentExerciseCompletedSets}/{currentExerciseTotalSets} 组\n                  </small>\n                </div>\n                <IonProgressBar \n                  value={currentExerciseTotalSets > 0 ? currentExerciseCompletedSets / currentExerciseTotalSets : 0}\n                  color=\"success\"\n                  style={{ height: '6px', borderRadius: '3px' }}\n                />\n              </div>\n              \n              {/* 动作信息标签 */}\n              <div style={{ display: 'flex', justifyContent: 'center', gap: '8px', flexWrap: 'wrap' }}>\n                <IonChip color=\"medium\" style={{ '--background': 'var(--app-light-bg)' }}>\n                  <IonIcon icon={barbellOutline} />\n                  <IonLabel>\n                    {restMode ? '休息中' : `第 ${currentSetIndex + 1} 组，共 ${currentExercise.sets} 组`}\n                  </IonLabel>\n                </IonChip>\n                \n                <IonChip color=\"primary\" style={{ '--background': 'rgba(123, 104, 238, 0.1)' }}>\n                  <IonLabel>{currentExercise.reps} 次/组</IonLabel>\n                </IonChip>\n                \n                {currentExercise.weight > 0 && (\n                  <IonChip color=\"secondary\" style={{ '--background': 'rgba(90, 200, 250, 0.1)' }}>\n                    <IonLabel>{currentExercise.weight} kg</IonLabel>\n                  </IonChip>\n                )}\n              </div>\n            </div>\n            \n            {/* 计时器显示 */}\n            <div className=\"timer-display\" style={{ \n              backgroundColor: restMode ? 'var(--app-light-bg)' : 'transparent',\n              borderRadius: '12px',\n              padding: '16px',\n              color: restMode ? 'var(--ion-color-primary)' : 'var(--ion-color-dark)'\n            }}>\n              {restMode ? (\n                <>\n                  <div style={{ fontSize: '14px', marginBottom: '8px', color: 'var(--app-medium-text)' }}>\n                    休息时间剩余\n                  </div>\n                  {formatSeconds(restDuration - timer)}\n                </>\n              ) : (\n                formatSeconds(timer)\n              )}\n            </div>\n            \n            {/* 计时器控制 */}\n            <div className=\"control-buttons-container\">\n              <IonButton \n                color={timerRunning ? 'warning' : 'success'} \n                onClick={toggleTimer}\n                className=\"control-button\"\n              >\n                <IonIcon slot=\"icon-only\" icon={timerRunning ? pauseOutline : playOutline} />\n              </IonButton>\n              \n              <IonButton \n                color=\"medium\" \n                onClick={resetTimer}\n                className=\"control-button\"\n              >\n                <IonIcon slot=\"icon-only\" icon={refreshOutline} />\n              </IonButton>\n              \n              {restMode ? (\n                <IonButton \n                  color=\"primary\" \n                  onClick={endRest}\n                  className=\"control-button\"\n                >\n                  <IonIcon slot=\"start\" icon={arrowForwardOutline} />\n                  跳过\n                </IonButton>\n              ) : (\n                <IonButton \n                  color=\"success\" \n                  onClick={() => markSetComplete(currentSetIndex)}\n                  disabled={progress && progress.completedSets[currentSetIndex]}\n                  className=\"control-button\"\n                >\n                  <IonIcon slot=\"start\" icon={checkmarkOutline} />\n                  完成\n                </IonButton>\n              )}\n            </div>\n          </IonCardContent>\n        </IonCard>\n        \n        {/* 组状态列表 */}\n        <div className=\"section-title\">组进度</div>\n        <IonList style={{ margin: '0 16px', borderRadius: '12px', overflow: 'hidden' }}>\n          {progress && progress.totalSets && Array.from({ length: progress.totalSets }).map((_, index) => (\n            <IonItem key={index} className={progress.completedSets[index] ? 'completed-set' : ''} style={{\n              '--background': progress.completedSets[index] ? 'rgba(76, 217, 100, 0.1)' : 'var(--ion-item-background)',\n              '--border-color': 'transparent',\n              marginBottom: '2px'\n            }}>\n              <IonCheckbox\n                slot=\"start\"\n                checked={progress.completedSets[index]}\n                onIonChange={() => markSetComplete(index)}\n                disabled={restMode}\n                style={{ '--size': '24px' }}\n              />\n              <IonLabel>\n                <h2 style={{ fontWeight: progress.completedSets[index] ? '600' : '400' }}>第 {index + 1} 组</h2>\n                <p>{currentExercise.reps} 次</p>\n              </IonLabel>\n              <div slot=\"end\" style={{ display: 'flex', alignItems: 'center' }}>\n                <IonInput\n                  type=\"number\"\n                  value={progress.weights[index]}\n                  onIonChange={e => updateWeight(index, parseInt(e.detail.value || 0, 10))}\n                  disabled={restMode}\n                  style={{ \n                    '--padding-start': '8px',\n                    '--padding-end': '8px',\n                    width: '60px',\n                    textAlign: 'right'\n                  }}\n                />\n                <IonText color=\"medium\" style={{ marginLeft: '4px' }}>kg</IonText>\n              </div>\n            </IonItem>\n          ))}\n        </IonList>\n        \n        {/* 底部按钮 */}\n        <div style={{ padding: '16px' }}>\n          <IonButton \n            expand=\"block\" \n            color=\"danger\"\n            onClick={exitWorkout}\n            className=\"action-button\"\n            style={{ marginTop: '16px' }}\n          >\n            <IonIcon slot=\"start\" icon={stopOutline} />\n            结束健身\n          </IonButton>\n        </div>\n        \n        {/* 动作信息模态框 */}\n        <IonAlert\n          isOpen={showExerciseInfo}\n          onDidDismiss={() => setShowExerciseInfo(false)}\n          header={currentExercise.name}\n          message={`\n            <div style=\"text-align: left\">\n              <p><strong>目标肌群:</strong> ${exerciseDetails?.category?.name || '未知'}</p>\n              <p><strong>动作描述:</strong> ${exerciseDetails?.description || currentExercise.description || '暂无描述'}</p>\n              <p><strong>注意事项:</strong> ${exerciseDetails?.tips || '请根据自身情况调整重量和次数'}</p>\n            </div>\n          `}\n          buttons={['关闭']}\n        />\n        \n        {/* 完成提示 */}\n        <IonAlert\n          isOpen={showCompleteAlert}\n          onDidDismiss={() => setShowCompleteAlert(false)}\n          header=\"健身完成！\"\n          message={`\n            <div style=\"text-align: center\">\n              <img src=\"https://cdn-icons-png.flaticon.com/512/5228/5228061.png\" style=\"width: 100px; height: 100px; margin: 16px auto;\">\n              <p>恭喜你完成了今天的健身计划！</p>\n              <p>共完成 ${completedSets} 组训练</p>\n              <p>${plan.exercises.length} 个动作全部完成</p>\n            </div>\n          `}\n          buttons={[\n            {\n              text: '保存记录',\n              cssClass: 'primary',\n              handler: completeWorkout\n            }\n          ]}\n        />\n        \n        {/* 退出提示 */}\n        <IonAlert\n          isOpen={showExitAlert}\n          onDidDismiss={() => setShowExitAlert(false)}\n          header=\"确认结束\"\n          message=\"确定要结束当前健身吗？已完成的进度将被保存。\"\n          buttons={[\n            {\n              text: '取消',\n              role: 'cancel'\n            },\n            {\n              text: '保存进度并退出',\n              cssClass: 'danger',\n              handler: exitWorkoutWithProgress\n            }\n          ]}\n        />\n        \n        {/* 继续健身提示 */}\n        <IonAlert\n          isOpen={showContinueWorkoutAlert}\n          onDidDismiss={() => setShowContinueWorkoutAlert(false)}\n          header=\"继续健身\"\n          message=\"检测到您有未完成的健身进度，是否继续？\"\n          buttons={[\n            {\n              text: '重新开始',\n              handler: restartWorkout\n            },\n            {\n              text: '继续',\n              handler: continueWorkout\n            }\n          ]}\n        />\n        \n        {/* 已存在记录提示 */}\n        <IonAlert\n          isOpen={showRecordExistsAlert}\n          onDidDismiss={() => setShowRecordExistsAlert(false)}\n          header=\"健身记录已存在\"\n          message={`该健身计划已完成并保存记录。${existingRecord ? `完成时间：${new Date(existingRecord.completedAt).toLocaleString()}` : ''}`}\n          buttons={[\n            {\n              text: '查看记录',\n              handler: viewExistingRecord\n            },\n            {\n              text: '重新训练',\n              handler: restartIgnoreRecord\n            }\n          ]}\n        />\n        \n        <IonToast\n          isOpen={showToast}\n          onDidDismiss={() => setShowToast(false)}\n          message={toastMessage}\n          duration={3000}\n          position=\"middle\"\n          color={restMode ? \"primary\" : \"success\"}\n          buttons={[\n            {\n              text: '关闭',\n              role: 'cancel'\n            }\n          ]}\n        />\n      </IonContent>\n    </>\n  );\n};\n\nexport default PlanExecution;",
  "components/PlanLibrary.jsx": "import React, { useEffect, useState } from 'react';\nimport { \n  IonContent, \n  IonList, \n  IonItem, \n  IonLabel, \n  IonIcon,\n  IonButton,\n  IonSearchbar,\n  IonFab,\n  IonFabButton,\n  IonItemSliding,\n  IonItemOptions,\n  IonItemOption,\n  IonAlert,\n  IonCard,\n  IonCardContent,\n  IonChip,\n  IonRippleEffect,\n  IonBadge\n} from '@ionic/react';\nimport { \n  addOutline, \n  barbellOutline, \n  timeOutline, \n  calendarOutline,\n  trashOutline,\n  createOutline,\n  copyOutline,\n  searchOutline,\n  filterOutline,\n  arrowForwardOutline,\n  chevronForwardOutline,\n  ellipsisHorizontal\n} from 'ionicons/icons';\nimport { Header } from '@morphicai/components';\nimport { useHistory } from 'react-router-dom';\n\nimport useStore from '../utils/store';\nimport useLanguage from '../utils/useLanguage';\nimport { calculatePlanDuration } from '../utils/helpers';\nimport LoadingSpinner from './LoadingSpinner';\nimport EmptyState from './EmptyState';\n\nconst PlanLibrary = ({ onAddPlan }) => {\n  const history = useHistory();\n  const { t } = useLanguage();\n  const { \n    plans, \n    loadPlans, \n    deletePlan, \n    savePlanAsTemplate,\n    isLoading \n  } = useStore();\n  \n  const [searchText, setSearchText] = useState('');\n  const [filteredPlans, setFilteredPlans] = useState([]);\n  const [showDeleteAlert, setShowDeleteAlert] = useState(false);\n  const [planToDelete, setPlanToDelete] = useState(null);\n  \n  useEffect(() => {\n    loadPlans();\n  }, [loadPlans]);\n  \n  useEffect(() => {\n    if (plans.length > 0) {\n      if (searchText) {\n        const filtered = plans.filter(plan => \n          plan.name.toLowerCase().includes(searchText.toLowerCase()) ||\n          plan.description?.toLowerCase().includes(searchText.toLowerCase())\n        );\n        setFilteredPlans(filtered);\n      } else {\n        setFilteredPlans([...plans].sort((a, b) => \n          new Date(b.updatedAt || b.createdAt || 0) - new Date(a.updatedAt || a.createdAt || 0)\n        ));\n      }\n    } else {\n      setFilteredPlans([]);\n    }\n  }, [plans, searchText]);\n  \n  const handleSearch = (e) => {\n    setSearchText(e.detail.value);\n  };\n  \n  const navigateToCreatePlan = () => {\n    if (onAddPlan) {\n      onAddPlan();\n    } else {\n      history.push('/plan/create');\n    }\n  };\n  \n  const navigateToPlanDetail = (planId) => {\n    history.push(`/plan/${planId}`);\n  };\n  \n  const navigateToEditPlan = (planId) => {\n    history.push(`/plan/edit/${planId}`);\n  };\n  \n  const confirmDeletePlan = (plan, e) => {\n    if (e) {\n      e.stopPropagation();\n    }\n    setPlanToDelete(plan);\n    setShowDeleteAlert(true);\n  };\n  \n  const handleDeletePlan = async () => {\n    if (planToDelete) {\n      try {\n        await deletePlan(planToDelete.id);\n      } catch (error) {\n        console.error('删除计划失败:', error);\n      }\n    }\n    setPlanToDelete(null);\n  };\n  \n  const handleSaveAsTemplate = async (planId) => {\n    try {\n      await savePlanAsTemplate(planId);\n    } catch (error) {\n      console.error('保存为模板失败:', error);\n    }\n  };\n  \n  // 获取部位标签类名和翻译\n  const getBodyPartClass = (part) => {\n    const partMap = {\n      '胸部': 'chest',\n      '背部': 'back',\n      '腿部': 'legs',\n      '肩部': 'shoulders',\n      '手臂': 'arms',\n      'Chest': 'chest',\n      'Back': 'back',\n      'Legs': 'legs',\n      'Shoulders': 'shoulders',\n      'Arms': 'arms'\n    };\n    return partMap[part] || '';\n  };\n  \n  const translateBodyPart = (part) => {\n    const partKeyMap = {\n      '胸部': 'chest',\n      '背部': 'back',\n      '腿部': 'legs',\n      '肩部': 'shoulders',\n      '手臂': 'arms',\n      'Chest': 'chest',\n      'Back': 'back',\n      'Legs': 'legs',\n      'Shoulders': 'shoulders',\n      'Arms': 'arms'\n    };\n    const key = partKeyMap[part];\n    return key ? t(`bodyParts.${key}`) : part;\n  };\n  \n  if (isLoading && plans.length === 0) {\n    return <LoadingSpinner message={t('loading.plans')} />;\n  }\n  \n  return (\n    <IonContent>\n      <div style={{ padding: '10px 12px 0' }}>\n        <IonSearchbar\n          placeholder={t('plans.searchPlaceholder')}\n          value={searchText}\n          onIonInput={handleSearch}\n          showCancelButton=\"never\"\n          className=\"search-bar\"\n          searchIcon={searchOutline}\n        />\n      </div>\n      \n      {filteredPlans.length > 0 ? (\n        <div>\n          {filteredPlans.map(plan => {\n            const estimatedDuration = calculatePlanDuration(plan);\n            \n            return (\n              <IonItemSliding key={plan.id}>\n                <IonCard \n                  className=\"workout-card\" \n                  style={{ margin: '10px 12px', cursor: 'pointer', position: 'relative' }}\n                  onClick={() => navigateToPlanDetail(plan.id)}\n                >\n                  <IonCardContent style={{ padding: '14px 16px' }}>\n                    <div style={{ display: 'flex', alignItems: 'center' }}>\n                      <div style={{ \n                        width: '40px', \n                        height: '40px', \n                        borderRadius: '50%', \n                        backgroundColor: 'rgba(123, 104, 238, 0.1)', \n                        display: 'flex', \n                        alignItems: 'center', \n                        justifyContent: 'center',\n                        marginRight: '12px'\n                      }}>\n                        <IonIcon icon={barbellOutline} color=\"primary\" style={{ fontSize: '20px' }} />\n                      </div>\n                      <div style={{ flex: 1 }}>\n                        <h2 style={{ \n                          margin: '0 0 4px 0', \n                          fontSize: '16px', \n                          fontWeight: 'bold' \n                        }}>\n                          {plan.name}\n                        </h2>\n                        <div style={{ display: 'flex', alignItems: 'center' }}>\n                          <span style={{ \n                            fontSize: '13px', \n                            color: 'var(--app-medium-text)',\n                            display: 'flex',\n                            alignItems: 'center'\n                          }}>\n                            <span>{plan.exercises?.length || 0} {t('home.exercises')}</span>\n                            {estimatedDuration > 0 && (\n                              <span style={{ marginLeft: '8px', display: 'flex', alignItems: 'center' }}>\n                                • <IonIcon icon={timeOutline} style={{ margin: '0 2px 0 4px' }} /> {estimatedDuration} {t('common.minutes')}\n                              </span>\n                            )}\n                          </span>\n                        </div>\n                      </div>\n                      <div style={{ display: 'flex', alignItems: 'center' }}>\n                        <IonButton \n                          fill=\"clear\" \n                          color=\"danger\" \n                          size=\"small\" \n                          onClick={(e) => confirmDeletePlan(plan, e)}\n                          style={{ marginRight: '4px' }}\n                        >\n                          <IonIcon slot=\"icon-only\" icon={trashOutline} />\n                        </IonButton>\n                        <IonIcon \n                          icon={chevronForwardOutline} \n                          color=\"medium\" \n                          style={{ fontSize: '18px' }}\n                        />\n                      </div>\n                    </div>\n                    \n                    {plan.bodyParts && plan.bodyParts.length > 0 && (\n                      <div style={{ marginTop: '10px', display: 'flex', flexWrap: 'wrap' }}>\n                        {plan.bodyParts.map((part, idx) => (\n                          <div key={idx} className={`body-part-tag ${getBodyPartClass(part)}`}>\n                            {translateBodyPart(part)}\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                    \n                    <IonRippleEffect />\n                  </IonCardContent>\n                </IonCard>\n                \n                <IonItemOptions side=\"end\">\n                  <IonItemOption \n                    color=\"primary\" \n                    onClick={(e) => {\n                      e.stopPropagation();\n                      navigateToEditPlan(plan.id);\n                    }}\n                    style={{ '--padding-start': '1rem', '--padding-end': '1rem' }}\n                  >\n                    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n                      <IonIcon icon={createOutline} style={{ fontSize: '20px', marginBottom: '4px' }} />\n                      <small>{t('common.edit')}</small>\n                    </div>\n                  </IonItemOption>\n                  <IonItemOption \n                    color=\"secondary\" \n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleSaveAsTemplate(plan.id);\n                    }}\n                    style={{ '--padding-start': '1rem', '--padding-end': '1rem' }}\n                  >\n                    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n                      <IonIcon icon={copyOutline} style={{ fontSize: '20px', marginBottom: '4px' }} />\n                      <small>{t('plans.template')}</small>\n                    </div>\n                  </IonItemOption>\n                  <IonItemOption \n                    color=\"danger\" \n                    onClick={(e) => {\n                      e.stopPropagation();\n                      confirmDeletePlan(plan);\n                    }}\n                    style={{ '--padding-start': '1rem', '--padding-end': '1rem' }}\n                  >\n                    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n                      <IonIcon icon={trashOutline} style={{ fontSize: '20px', marginBottom: '4px' }} />\n                      <small>{t('common.delete')}</small>\n                    </div>\n                  </IonItemOption>\n                </IonItemOptions>\n              </IonItemSliding>\n            );\n          })}\n        </div>\n      ) : (\n        <EmptyState \n          icon={barbellOutline}\n          message={searchText ? t('plans.noMatch') : t('plans.noPlan')}\n          actionText={t('plans.createPlan')}\n          onAction={navigateToCreatePlan}\n          hideAction={!!searchText}\n        />\n      )}\n      \n      <IonFab vertical=\"bottom\" horizontal=\"end\" slot=\"fixed\">\n        <IonFabButton onClick={navigateToCreatePlan} className=\"fab-button\">\n          <IonIcon icon={addOutline} />\n        </IonFabButton>\n      </IonFab>\n      \n      <IonAlert\n        isOpen={showDeleteAlert}\n        onDidDismiss={() => setShowDeleteAlert(false)}\n        header={t('plans.confirmDelete')}\n        message={t('plans.confirmDeleteMessage', { name: planToDelete?.name || '' }).replace('{name}', planToDelete?.name || '')}\n        buttons={[\n          {\n            text: t('common.cancel'),\n            role: 'cancel',\n            handler: () => setPlanToDelete(null)\n          },\n          {\n            text: t('common.delete'),\n            role: 'destructive',\n            handler: handleDeletePlan\n          }\n        ]}\n      />\n    </IonContent>\n  );\n};\n\nexport default PlanLibrary;",
  "components/StatsPage.jsx": "import React, { useState, useEffect, useRef } from 'react';\nimport { \n  IonContent, \n  IonCard, \n  IonCardHeader, \n  IonCardTitle, \n  IonCardContent,\n  IonList,\n  IonItem,\n  IonLabel,\n  IonIcon,\n  IonSegment,\n  IonSegmentButton,\n  IonBadge,\n  IonGrid,\n  IonRow,\n  IonCol\n} from '@ionic/react';\nimport { \n  barbellOutline, \n  timeOutline, \n  calendarOutline,\n  trendingUpOutline,\n  fitnessOutline,\n  repeatOutline,\n  analyticsOutline\n} from 'ionicons/icons';\nimport dayjs from 'dayjs';\n\nimport useStore from '../utils/store';\nimport { calculateWorkoutStats, groupRecordsByDate, formatDate } from '../utils/helpers';\nimport LoadingSpinner from './LoadingSpinner';\nimport EmptyState from './EmptyState';\n\nconst StatsPage = () => {\n  const { \n    loadWorkoutRecords, \n    workoutRecords,\n    isLoading \n  } = useStore();\n  \n  const [timeRange, setTimeRange] = useState('month');\n  const [stats, setStats] = useState(null);\n  const [groupedRecords, setGroupedRecords] = useState([]);\n  const [weightChart, setWeightChart] = useState(null);\n  const [frequencyChart, setFrequencyChart] = useState(null);\n  const progressRef = useRef(null);\n  \n  useEffect(() => {\n    loadWorkoutRecords();\n  }, [loadWorkoutRecords]);\n  \n  // 根据时间范围筛选记录\n  useEffect(() => {\n    if (workoutRecords.length > 0) {\n      let filteredRecords = [];\n      const now = dayjs();\n      \n      switch (timeRange) {\n        case 'week':\n          filteredRecords = workoutRecords.filter(record => \n            dayjs(record.completedAt).isAfter(now.subtract(7, 'day'))\n          );\n          break;\n        case 'month':\n          filteredRecords = workoutRecords.filter(record => \n            dayjs(record.completedAt).isAfter(now.subtract(30, 'day'))\n          );\n          break;\n        case 'year':\n          filteredRecords = workoutRecords.filter(record => \n            dayjs(record.completedAt).isAfter(now.subtract(365, 'day'))\n          );\n          break;\n        default:\n          filteredRecords = [...workoutRecords];\n      }\n      \n      // 计算统计数据\n      const calculatedStats = calculateWorkoutStats(filteredRecords);\n      setStats(calculatedStats);\n      \n      // 分组记录\n      const grouped = groupRecordsByDate(filteredRecords);\n      setGroupedRecords(grouped);\n      \n      // 准备图表数据\n      prepareChartData(filteredRecords);\n      \n      // 绘制圆形进度条\n      if (calculatedStats) {\n        drawProgressCircle(calculatedStats);\n      }\n    }\n  }, [workoutRecords, timeRange]);\n  \n  const handleRangeChange = (event) => {\n    setTimeRange(event.detail.value);\n  };\n  \n  const drawProgressCircle = (statsData) => {\n    if (!progressRef.current) return;\n    \n    const canvas = progressRef.current;\n    const ctx = canvas.getContext('2d');\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n    const radius = 50;\n    \n    // 清除画布\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n    // 计算完成率（这里使用虚拟数据）\n    const completionRate = Math.min(statsData.totalWorkouts / 30, 1);\n    \n    // 绘制底圆\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);\n    ctx.strokeStyle = '#E0E0E0';\n    ctx.lineWidth = 10;\n    ctx.stroke();\n    \n    // 绘制进度圆弧\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, radius, -Math.PI / 2, -Math.PI / 2 + (2 * Math.PI * completionRate));\n    ctx.strokeStyle = getComputedStyle(document.documentElement).getPropertyValue('--ion-color-primary');\n    ctx.lineWidth = 10;\n    ctx.stroke();\n  };\n  \n  const prepareChartData = async (records) => {\n    if (!records || records.length === 0) return;\n    \n    try {\n      // 动态导入图表库\n      const Chart = await remoteImport('chart.js/auto');\n      \n      // 清除现有图表\n      if (weightChart) {\n        weightChart.destroy();\n      }\n      if (frequencyChart) {\n        frequencyChart.destroy();\n      }\n      \n      // 准备重量趋势数据\n      const exerciseWeights = {};\n      \n      records.forEach(record => {\n        if (record.exercises) {\n          record.exercises.forEach(exercise => {\n            if (!exerciseWeights[exercise.name]) {\n              exerciseWeights[exercise.name] = [];\n            }\n            \n            // 使用最大重量\n            const maxWeight = Math.max(...(exercise.weights || [0]));\n            \n            exerciseWeights[exercise.name].push({\n              date: dayjs(record.completedAt).format('MM-DD'),\n              weight: maxWeight\n            });\n          });\n        }\n      });\n      \n      // 选择前3个最常见的练习\n      const exerciseNames = Object.keys(exerciseWeights);\n      const topExercises = exerciseNames\n        .sort((a, b) => exerciseWeights[b].length - exerciseWeights[a].length)\n        .slice(0, 3);\n      \n      // 创建重量趋势图表\n      if (topExercises.length > 0) {\n        const weightCtx = document.getElementById('weightChart');\n        \n        if (weightCtx) {\n          const datasets = topExercises.map((name, index) => {\n            const data = exerciseWeights[name]\n              .sort((a, b) => new Date(a.date) - new Date(b.date))\n              .map(item => ({ x: item.date, y: item.weight }));\n            \n            // 使用与图片相似的配色\n            const colors = ['#7B68EE', '#5AC8FA', '#4CD964'];\n            \n            return {\n              label: name,\n              data: data,\n              borderColor: colors[index % colors.length],\n              backgroundColor: colors[index % colors.length] + '33',\n              tension: 0.4,\n              fill: false,\n              borderWidth: 2,\n              pointRadius: 3,\n              pointBackgroundColor: colors[index % colors.length]\n            };\n          });\n          \n          const newWeightChart = new Chart(weightCtx, {\n            type: 'line',\n            data: {\n              datasets\n            },\n            options: {\n              responsive: true,\n              maintainAspectRatio: false,\n              scales: {\n                y: {\n                  title: {\n                    display: true,\n                    text: '重量 (kg)'\n                  },\n                  grid: {\n                    drawBorder: false,\n                    color: 'rgba(200, 200, 200, 0.1)'\n                  }\n                },\n                x: {\n                  grid: {\n                    display: false\n                  }\n                }\n              },\n              plugins: {\n                legend: {\n                  position: 'top',\n                  labels: {\n                    boxWidth: 12,\n                    usePointStyle: true,\n                    pointStyle: 'circle'\n                  }\n                }\n              }\n            }\n          });\n          \n          setWeightChart(newWeightChart);\n        }\n      }\n      \n      // 准备健身频率数据\n      const workoutDates = records.map(record => \n        dayjs(record.completedAt).format('YYYY-MM-DD')\n      );\n      \n      // 计算每天的健身次数\n      const frequencyData = {};\n      workoutDates.forEach(date => {\n        frequencyData[date] = (frequencyData[date] || 0) + 1;\n      });\n      \n      // 创建频率图表\n      const frequencyCtx = document.getElementById('frequencyChart');\n      \n      if (frequencyCtx && Object.keys(frequencyData).length > 0) {\n        const sortedDates = Object.keys(frequencyData).sort();\n        \n        const newFrequencyChart = new Chart(frequencyCtx, {\n          type: 'bar',\n          data: {\n            labels: sortedDates.map(date => formatDate(date, 'MM-DD')),\n            datasets: [{\n              label: '健身次数',\n              data: sortedDates.map(date => frequencyData[date]),\n              backgroundColor: '#7B68EE',\n              borderColor: '#7B68EE',\n              borderWidth: 0,\n              borderRadius: 4\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n              y: {\n                beginAtZero: true,\n                title: {\n                  display: true,\n                  text: '次数'\n                },\n                ticks: {\n                  stepSize: 1\n                },\n                grid: {\n                  drawBorder: false,\n                  color: 'rgba(200, 200, 200, 0.1)'\n                }\n              },\n              x: {\n                grid: {\n                  display: false\n                }\n              }\n            },\n            plugins: {\n              legend: {\n                display: false\n              }\n            }\n          }\n        });\n        \n        setFrequencyChart(newFrequencyChart);\n      }\n    } catch (error) {\n      console.error('加载图表库失败:', error);\n    }\n  };\n  \n  if (isLoading && workoutRecords.length === 0) {\n    return <LoadingSpinner message=\"加载统计数据...\" />;\n  }\n  \n  return (\n    <IonContent>\n      {/* 时间范围选择 */}\n      <IonSegment value={timeRange} onIonChange={handleRangeChange} className=\"stats-segment\">\n        <IonSegmentButton value=\"week\">\n          <IonLabel>周</IonLabel>\n        </IonSegmentButton>\n        <IonSegmentButton value=\"month\">\n          <IonLabel>月</IonLabel>\n        </IonSegmentButton>\n        <IonSegmentButton value=\"year\">\n          <IonLabel>年</IonLabel>\n        </IonSegmentButton>\n        <IonSegmentButton value=\"all\">\n          <IonLabel>全部</IonLabel>\n        </IonSegmentButton>\n      </IonSegment>\n      \n      {workoutRecords.length > 0 ? (\n        <>\n          {/* 健身概览 */}\n          {stats && (\n            <>\n              <IonCard className=\"workout-card\">\n                <IonCardHeader>\n                  <IonCardTitle>健身完成率</IonCardTitle>\n                </IonCardHeader>\n                <IonCardContent>\n                  <div className=\"circular-progress\">\n                    <canvas ref={progressRef} width=\"120\" height=\"120\"></canvas>\n                    <div className=\"progress-value\">{stats.totalWorkouts}</div>\n                  </div>\n                  <p className=\"ion-text-center\" style={{ marginTop: '10px', color: 'var(--ion-color-medium)' }}>\n                    {timeRange === 'week' ? '本周' : timeRange === 'month' ? '本月' : timeRange === 'year' ? '今年' : '总计'}健身次数\n                  </p>\n                </IonCardContent>\n              </IonCard>\n              \n              {/* 数据卡片 */}\n              <div className=\"data-grid\">\n                <div className=\"data-card\">\n                  <IonIcon icon={barbellOutline} color=\"secondary\" style={{ fontSize: '24px' }} />\n                  <div className=\"data-value\">{stats.totalExercises}</div>\n                  <div className=\"data-label\">总练习次数</div>\n                </div>\n                \n                <div className=\"data-card\">\n                  <IonIcon icon={timeOutline} color=\"tertiary\" style={{ fontSize: '24px' }} />\n                  <div className=\"data-value\">{stats.averageDuration.toFixed(0)}</div>\n                  <div className=\"data-label\">平均时长(分钟)</div>\n                </div>\n                \n                <div className=\"data-card\">\n                  <IonIcon icon={repeatOutline} color=\"success\" style={{ fontSize: '24px' }} />\n                  <div className=\"data-value\">{stats.averageExercisesPerWorkout.toFixed(1)}</div>\n                  <div className=\"data-label\">平均练习数</div>\n                </div>\n                \n                <div className=\"data-card\">\n                  <IonIcon icon={trendingUpOutline} color=\"danger\" style={{ fontSize: '24px' }} />\n                  <div className=\"data-value\">{stats.heaviestWeight}</div>\n                  <div className=\"data-label\">最大重量(kg)</div>\n                </div>\n              </div>\n            </>\n          )}\n          \n          {/* 图表 */}\n          <div className=\"section-title\">重量趋势</div>\n          <div className=\"chart-container\">\n            <canvas id=\"weightChart\"></canvas>\n          </div>\n          \n          <div className=\"section-title\">健身频率</div>\n          <div className=\"chart-container\">\n            <canvas id=\"frequencyChart\"></canvas>\n          </div>\n          \n          {/* 健身记录列表 */}\n          <div className=\"section-title\">健身记录</div>\n          {groupedRecords.length > 0 ? (\n            <IonList>\n              {groupedRecords.map(group => (\n                <React.Fragment key={group.date}>\n                  <IonItem>\n                    <IonLabel color=\"medium\">\n                      <h2>{formatDate(group.date, 'YYYY年M月D日 (ddd)')}</h2>\n                    </IonLabel>\n                  </IonItem>\n                  \n                  {group.records.map(record => (\n                    <IonItem key={record.id}>\n                      <IonIcon icon={barbellOutline} slot=\"start\" color=\"primary\" />\n                      <IonLabel>\n                        <h2>{record.planName}</h2>\n                        <p>\n                          {record.exercises?.length || 0} 个动作 • {record.duration || 0} 分钟\n                        </p>\n                      </IonLabel>\n                    </IonItem>\n                  ))}\n                </React.Fragment>\n              ))}\n            </IonList>\n          ) : (\n            <IonCard className=\"workout-card\">\n              <IonCardContent>\n                <p className=\"ion-text-center\">选定时间范围内没有健身记录</p>\n              </IonCardContent>\n            </IonCard>\n          )}\n        </>\n      ) : (\n        <EmptyState \n          icon={analyticsOutline}\n          message=\"还没有健身记录\"\n          actionText=\"开始健身\"\n          onAction={() => document.querySelector('ion-tab-button[tab=\"home\"]').click()}\n        />\n      )}\n    </IonContent>\n  );\n};\n\nexport default StatsPage;",
  "components/TemplateLibrary.jsx": "import React, { useEffect, useState } from 'react';\nimport { \n  IonContent, \n  IonList, \n  IonItem, \n  IonLabel, \n  IonIcon,\n  IonButton,\n  IonSearchbar,\n  IonItemSliding,\n  IonItemOptions,\n  IonItemOption,\n  IonAlert,\n  IonCard,\n  IonCardContent\n} from '@ionic/react';\nimport { \n  copyOutline, \n  barbellOutline, \n  timeOutline, \n  trashOutline,\n  addOutline\n} from 'ionicons/icons';\nimport { Header } from '@morphicai/components';\nimport { useHistory } from 'react-router-dom';\n\nimport useStore from '../utils/store';\nimport { calculatePlanDuration } from '../utils/helpers';\nimport LoadingSpinner from './LoadingSpinner';\nimport EmptyState from './EmptyState';\n\nconst TemplateLibrary = () => {\n  const history = useHistory();\n  const { \n    templates, \n    loadTemplates, \n    deleteTemplate, \n    createPlanFromTemplate,\n    isLoading \n  } = useStore();\n  \n  const [searchText, setSearchText] = useState('');\n  const [filteredTemplates, setFilteredTemplates] = useState([]);\n  const [showDeleteAlert, setShowDeleteAlert] = useState(false);\n  const [templateToDelete, setTemplateToDelete] = useState(null);\n  \n  useEffect(() => {\n    loadTemplates();\n  }, [loadTemplates]);\n  \n  useEffect(() => {\n    if (templates.length > 0) {\n      if (searchText) {\n        const filtered = templates.filter(template => \n          template.name.toLowerCase().includes(searchText.toLowerCase()) ||\n          template.description?.toLowerCase().includes(searchText.toLowerCase())\n        );\n        setFilteredTemplates(filtered);\n      } else {\n        setFilteredTemplates([...templates].sort((a, b) => \n          new Date(b.updatedAt) - new Date(a.updatedAt)\n        ));\n      }\n    } else {\n      setFilteredTemplates([]);\n    }\n  }, [templates, searchText]);\n  \n  const handleSearch = (e) => {\n    setSearchText(e.detail.value);\n  };\n  \n  const confirmDeleteTemplate = (template) => {\n    setTemplateToDelete(template);\n    setShowDeleteAlert(true);\n  };\n  \n  const handleDeleteTemplate = async () => {\n    if (templateToDelete) {\n      try {\n        await deleteTemplate(templateToDelete.id);\n      } catch (error) {\n        console.error('删除模板失败:', error);\n      }\n    }\n    setTemplateToDelete(null);\n  };\n  \n  const handleCreateFromTemplate = async (templateId) => {\n    try {\n      const newPlan = await createPlanFromTemplate(templateId);\n      if (newPlan && newPlan.id) {\n        history.push(`/edit-plan/${newPlan.id}`);\n      }\n    } catch (error) {\n      console.error('从模板创建计划失败:', error);\n    }\n  };\n  \n  const navigateToCreatePlan = () => {\n    history.push('/create-plan');\n  };\n  \n  if (isLoading && templates.length === 0) {\n    return <LoadingSpinner message=\"加载模板库...\" />;\n  }\n  \n  return (\n    <>\n      <Header title=\"模板库\" />\n      <IonContent>\n        <IonSearchbar\n          placeholder=\"搜索模板\"\n          value={searchText}\n          onIonInput={handleSearch}\n          showCancelButton=\"never\"\n        />\n        \n        {filteredTemplates.length > 0 ? (\n          <IonList>\n            {filteredTemplates.map(template => {\n              const estimatedDuration = calculatePlanDuration(template);\n              \n              return (\n                <IonItemSliding key={template.id}>\n                  <IonItem button onClick={() => handleCreateFromTemplate(template.id)}>\n                    <IonIcon icon={barbellOutline} slot=\"start\" color=\"secondary\" />\n                    <IonLabel>\n                      <h2>{template.name}</h2>\n                      <p>\n                        {template.exercises?.length || 0} 个动作\n                        {estimatedDuration > 0 && (\n                          <span> • <IonIcon icon={timeOutline} size=\"small\" /> {estimatedDuration}分钟</span>\n                        )}\n                      </p>\n                    </IonLabel>\n                  </IonItem>\n                  \n                  <IonItemOptions side=\"end\">\n                    <IonItemOption color=\"primary\" onClick={() => handleCreateFromTemplate(template.id)}>\n                      <IonIcon slot=\"icon-only\" icon={copyOutline} />\n                    </IonItemOption>\n                    <IonItemOption color=\"danger\" onClick={() => confirmDeleteTemplate(template)}>\n                      <IonIcon slot=\"icon-only\" icon={trashOutline} />\n                    </IonItemOption>\n                  </IonItemOptions>\n                </IonItemSliding>\n              );\n            })}\n          </IonList>\n        ) : (\n          <IonCard className=\"workout-card\">\n            <IonCardContent>\n              <EmptyState \n                icon={copyOutline}\n                message={searchText ? \"没有找到匹配的模板\" : \"没有保存的模板\"}\n                actionText=\"创建计划\"\n                onAction={navigateToCreatePlan}\n                hideAction={!!searchText}\n              />\n            </IonCardContent>\n          </IonCard>\n        )}\n        \n        <div style={{ padding: '16px' }}>\n          <IonButton \n            expand=\"block\" \n            onClick={navigateToCreatePlan}\n          >\n            <IonIcon slot=\"start\" icon={addOutline} />\n            创建新计划\n          </IonButton>\n        </div>\n        \n        <IonAlert\n          isOpen={showDeleteAlert}\n          onDidDismiss={() => setShowDeleteAlert(false)}\n          header=\"确认删除\"\n          message={`确定要删除\"${templateToDelete?.name}\"模板吗？此操作无法撤销。`}\n          buttons={[\n            {\n              text: '取消',\n              role: 'cancel',\n              handler: () => setTemplateToDelete(null)\n            },\n            {\n              text: '删除',\n              role: 'destructive',\n              handler: handleDeleteTemplate\n            }\n          ]}\n        />\n      </IonContent>\n    </>\n  );\n};\n\nexport default TemplateLibrary;",
  "components/Welcome.jsx": "import React from 'react';\nimport { IonIcon } from '@ionic/react';\nimport { downloadOutline, globeOutline, chatbubbleEllipsesOutline, sparklesOutline, deviceMobileOutline } from 'ionicons/icons';\nimport styles from '../styles/Welcome.module.css';\n\n/**\n * 欢迎组件 - 仅用于演示\n * \n * 这个组件用于展示 Morphix AI Code 的功能和界面设计\n * 在实际开发中，请删除此组件并创建您自己的应用界面\n * \n * @component\n * @returns {JSX.Element} 欢迎页面组件\n */\nexport default function Welcome() {\n    const openDownload = () => {\n        window.open('https://baibian.app/mobile-download', '_blank');\n    };\n\n    const openWebsite = () => {\n        window.open('https://baibian.app/', '_blank');\n    };\n\n    return (\n        <div className={styles.welcomeContainer}>\n\n            {/* 头部 */}\n            <div className={styles.header}>\n                <div className={styles.logo}>\n                    <img\n                        src=\"https://app-shell.focusbe.com/Icon-60@3x.png\"\n                        alt=\"Morphix AI Logo\"\n                        className={styles.logoImage}\n                        onError={(e) => {\n                            e.target.style.display = 'none';\n                        }}\n                    />\n                    <div className={styles.logoGlow}></div>\n                </div>\n\n                <h1 className={styles.title}>\n                    <span className={styles.titleGradient}>Morphix AI</span>\n                    <span className={styles.titleSubtext}>Code</span>\n                </h1>\n                <p className={styles.subtitle}>Create your own app with AI</p>\n            </div>\n\n            {/* 三个步骤 */}\n            <div className={styles.steps}>\n                <div className={styles.step}>\n                    <div className={styles.stepNumber}>1</div>\n                    <div className={styles.stepContent}>\n                        <h3>Describe</h3>\n                        <p>Your app idea</p>\n                    </div>\n                </div>\n\n                <div className={styles.step}>\n                    <div className={styles.stepNumber}>2</div>\n                    <div className={styles.stepContent}>\n                        <h3>Generate</h3>\n                        <p>AI builds a preview</p>\n                    </div>\n                </div>\n\n                <div className={styles.step}>\n                    <div className={styles.stepNumber}>3</div>\n                    <div className={styles.stepContent}>\n                        <h3>Launch</h3>\n                        <p>Use in Morphix</p>\n                    </div>\n                </div>\n            </div>\n\n            {/* 行动按钮 */}\n            <div className={styles.ctaSection}>\n                <button \n                    className={styles.primaryBtn}\n                    onClick={openDownload}\n                >\n                    <IonIcon icon={downloadOutline} />\n                    Download Morphix AI\n                </button>\n                \n                <button \n                    className={styles.secondaryBtn}\n                    onClick={openWebsite}\n                >\n                    <IonIcon icon={globeOutline} />\n                    Visit Website\n                </button>\n            </div>\n\n            {/* 底部 */}\n            <div className={styles.footer}>\n                <p>2024 Morphix AI. Empowering everyone to create apps.</p>\n            </div>\n        </div>\n    );\n}\n",
  "components/WorkoutCalendar.jsx": "import React, { useState, useEffect } from 'react';\nimport { \n  IonContent, \n  IonGrid, \n  IonRow, \n  IonCol,\n  IonCard,\n  IonCardHeader,\n  IonCardTitle,\n  IonCardContent,\n  IonButton,\n  IonIcon,\n  IonList,\n  IonItem,\n  IonLabel,\n  IonSegment,\n  IonSegmentButton,\n  IonActionSheet,\n  IonAlert,\n  IonModal,\n  IonToolbar,\n  IonTitle,\n  IonButtons,\n  IonSelect,\n  IonSelectOption,\n  IonToggle,\n  IonRange,\n  IonNote,\n  IonInput,\n  IonDatetime\n} from '@ionic/react';\nimport { \n  addOutline, \n  arrowForwardOutline, \n  chevronBack, \n  chevronForward,\n  calendarOutline,\n  ellipsisHorizontal,\n  closeOutline,\n  trashOutline,\n  notificationsOutline,\n  timeOutline,\n  alarmOutline\n} from 'ionicons/icons';\nimport { PageHeader } from '@morphixai/components';\nimport { useHistory } from 'react-router-dom';\nimport dayjs from 'dayjs';\n\nimport useStore from '../utils/store';\nimport { getMonthDates, getCurrentWeekDates, formatDate } from '../utils/helpers';\nimport LoadingSpinner from './LoadingSpinner';\nimport EmptyState from './EmptyState';\nimport ReminderService from '../utils/reminderService';\n\nconst WorkoutCalendar = () => {\n  const history = useHistory();\n  const { \n    loadAllData, \n    scheduledWorkouts, \n    plans, \n    templates,\n    deleteScheduledWorkout,\n    scheduleWorkout,\n    updateScheduledWorkout,\n    isLoading \n  } = useStore();\n  \n  const [viewMode, setViewMode] = useState('month');\n  const [currentDate, setCurrentDate] = useState(dayjs());\n  const [calendarDates, setCalendarDates] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(dayjs().format('YYYY-MM-DD'));\n  const [dateWorkouts, setDateWorkouts] = useState([]);\n  const [showOptionsSheet, setShowOptionsSheet] = useState(false);\n  const [selectedWorkout, setSelectedWorkout] = useState(null);\n  const [showDeleteAlert, setShowDeleteAlert] = useState(false);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [selectedPlanId, setSelectedPlanId] = useState('');\n  const [showReminderModal, setShowReminderModal] = useState(false);\n  const [reminderEnabled, setReminderEnabled] = useState(true);\n  const [reminderMinutes, setReminderMinutes] = useState(30);\n  const [reminderTime, setReminderTime] = useState('09:00');\n  const [useSpecificTime, setUseSpecificTime] = useState(true);\n  \n  // 加载数据\n  useEffect(() => {\n    loadAllData();\n  }, [loadAllData]);\n  \n  // 更新日历数据\n  useEffect(() => {\n    if (viewMode === 'month') {\n      const monthDates = getMonthDates(\n        currentDate.year(), \n        currentDate.month() + 1\n      );\n      setCalendarDates(monthDates);\n    } else {\n      const weekDates = getCurrentWeekDates();\n      setCalendarDates(weekDates);\n    }\n  }, [viewMode, currentDate]);\n  \n  // 更新选中日期的健身安排\n  useEffect(() => {\n    if (scheduledWorkouts.length > 0 && selectedDate) {\n      const workoutsForDate = scheduledWorkouts.filter(workout => \n        workout.date && workout.date.split('T')[0] === selectedDate\n      );\n      \n      setDateWorkouts(workoutsForDate);\n    } else {\n      setDateWorkouts([]);\n    }\n  }, [scheduledWorkouts, selectedDate]);\n  \n  // 切换视图模式\n  const handleViewModeChange = (event) => {\n    setViewMode(event.detail.value);\n  };\n  \n  // 上一个月/周\n  const goToPrevious = () => {\n    if (viewMode === 'month') {\n      setCurrentDate(currentDate.subtract(1, 'month'));\n    } else {\n      setCurrentDate(currentDate.subtract(1, 'week'));\n    }\n  };\n  \n  // 下一个月/周\n  const goToNext = () => {\n    if (viewMode === 'month') {\n      setCurrentDate(currentDate.add(1, 'month'));\n    } else {\n      setCurrentDate(currentDate.add(1, 'week'));\n    }\n  };\n  \n  // 选择日期\n  const selectDate = (dateString) => {\n    setSelectedDate(dateString);\n  };\n  \n  // 检查日期是否有健身安排\n  const hasWorkout = (dateString) => {\n    return scheduledWorkouts.some(workout => \n      workout.date && workout.date.split('T')[0] === dateString\n    );\n  };\n  \n  // 打开工作安排选项\n  const openWorkoutOptions = (workout) => {\n    setSelectedWorkout(workout);\n    setShowOptionsSheet(true);\n  };\n  \n  // 确认删除健身安排\n  const confirmDeleteWorkout = () => {\n    setShowOptionsSheet(false); // 先关闭选项菜单\n    setTimeout(() => {\n      setShowDeleteAlert(true); // 然后显示删除确认框\n    }, 100); // 添加短暂延迟，确保UI更新顺序正确\n  };\n  \n  // 删除健身安排\n  const handleDeleteWorkout = async () => {\n    if (selectedWorkout) {\n      try {\n        console.log('开始删除健身安排:', selectedWorkout.id);\n        const result = await deleteScheduledWorkout(selectedWorkout.id);\n        console.log('删除健身安排结果:', result);\n        setSelectedWorkout(null);\n        setShowDeleteAlert(false);\n        // 显示删除成功提示\n        alert('删除成功');\n      } catch (error) {\n        console.error('删除健身安排失败:', error);\n        alert('删除失败: ' + error.message);\n      }\n    }\n  };\n  \n  // 开始健身\n  const startWorkout = (workoutId) => {\n    history.push(`/execute/${workoutId}`);\n  };\n  \n  // 查看健身计划详情\n  const viewPlanDetails = (planId) => {\n    history.push(`/plan/${planId}`);\n  };\n  \n  // 打开提醒设置\n  const openReminderSettings = () => {\n    setShowOptionsSheet(false);\n    // 重置默认值\n    setReminderEnabled(true);\n    setReminderMinutes(30);\n    setReminderTime('09:00');\n    setUseSpecificTime(true);\n    setShowReminderModal(true);\n  };\n  \n  // 保存提醒设置\n  const saveReminderSettings = async () => {\n    if (selectedWorkout) {\n      try {\n        // 获取所有提醒\n        const allReminders = await ReminderService.getAllReminders();\n        const workoutReminders = allReminders.filter(\n          reminder => reminder.page && reminder.page.includes(`/execute/${selectedWorkout.id}`)\n        );\n        \n        // 如果启用提醒\n        if (reminderEnabled) {\n          const plan = plans.find(p => p.id === selectedWorkout.planId);\n          \n          // 准备提醒选项\n          const reminderOptions = {\n            minutesBefore: useSpecificTime ? 0 : reminderMinutes,\n            reminderTime: useSpecificTime ? reminderTime : null\n          };\n          \n          // 如果已有提醒，更新它\n          if (workoutReminders.length > 0) {\n            await ReminderService.updateWorkoutReminder(\n              workoutReminders[0].id,\n              {\n                id: selectedWorkout.id,\n                date: selectedWorkout.date,\n                name: plan ? plan.name : selectedWorkout.name || '健身计划'\n              },\n              reminderOptions.minutesBefore,\n              { reminderTime: reminderOptions.reminderTime }\n            );\n          } else {\n            // 否则创建新提醒\n            await ReminderService.createWorkoutReminder(\n              {\n                id: selectedWorkout.id,\n                date: selectedWorkout.date,\n                name: plan ? plan.name : selectedWorkout.name || '健身计划'\n              },\n              reminderOptions.minutesBefore,\n              { reminderTime: reminderOptions.reminderTime }\n            );\n          }\n        } else {\n          // 如果禁用提醒，删除所有现有提醒\n          for (const reminder of workoutReminders) {\n            await ReminderService.deleteReminder(reminder.id);\n          }\n        }\n        \n        setShowReminderModal(false);\n      } catch (error) {\n        console.error('保存提醒设置失败:', error);\n      }\n    }\n  };\n  \n  // 添加健身安排\n  const handleAddWorkout = async () => {\n    if (selectedPlanId) {\n      try {\n        const plan = plans.find(p => p.id === selectedPlanId);\n        \n        // 添加提醒选项\n        const reminderOptions = {\n          reminderTime: '09:00', // 默认早上9点提醒\n          minutesBefore: 0 // 使用具体时间而不是提前时间\n        };\n        \n        await scheduleWorkout(\n          {\n            planId: selectedPlanId,\n            date: selectedDate,\n            name: plan ? plan.name : '健身计划'\n          },\n          reminderOptions\n        );\n        \n        setShowAddModal(false);\n        setSelectedPlanId('');\n      } catch (error) {\n        console.error('添加健身安排失败:', error);\n      }\n    }\n  };\n  \n  if (isLoading && scheduledWorkouts.length === 0) {\n    return <LoadingSpinner message=\"加载日历数据...\" />;\n  }\n  \n  return (\n    <IonContent>\n        {/* 视图切换和月份导航 */}\n        <IonGrid>\n          <IonRow>\n            <IonCol size=\"12\">\n              <IonSegment value={viewMode} onIonChange={handleViewModeChange}>\n                <IonSegmentButton value=\"month\">\n                  <IonLabel>月视图</IonLabel>\n                </IonSegmentButton>\n                <IonSegmentButton value=\"week\">\n                  <IonLabel>周视图</IonLabel>\n                </IonSegmentButton>\n              </IonSegment>\n            </IonCol>\n          </IonRow>\n          \n          <IonRow className=\"ion-align-items-center\">\n            <IonCol size=\"2\" className=\"ion-text-center\">\n              <IonButton fill=\"clear\" onClick={goToPrevious}>\n                <IonIcon slot=\"icon-only\" icon={chevronBack} />\n              </IonButton>\n            </IonCol>\n            <IonCol size=\"8\" className=\"ion-text-center\">\n              <h4>\n                {viewMode === 'month' \n                  ? currentDate.format('YYYY年M月') \n                  : `${currentDate.startOf('week').format('M月D日')} - ${currentDate.endOf('week').format('M月D日')}`\n                }\n              </h4>\n            </IonCol>\n            <IonCol size=\"2\" className=\"ion-text-center\">\n              <IonButton fill=\"clear\" onClick={goToNext}>\n                <IonIcon slot=\"icon-only\" icon={chevronForward} />\n              </IonButton>\n            </IonCol>\n          </IonRow>\n        </IonGrid>\n        \n        {/* 日历网格 */}\n        <IonGrid>\n          {viewMode === 'month' && (\n            <IonRow>\n              {['日', '一', '二', '三', '四', '五', '六'].map(day => (\n                <IonCol size=\"12/7\" className=\"ion-text-center\" key={day}>\n                  <strong>{day}</strong>\n                </IonCol>\n              ))}\n            </IonRow>\n          )}\n          \n          <IonRow>\n            {calendarDates.map((dateInfo) => (\n              <IonCol \n                size={viewMode === 'month' ? '12/7' : '12/7'} \n                className=\"ion-text-center\" \n                key={dateInfo.dateString}\n              >\n                <div\n                  className={`calendar-day ${\n                    hasWorkout(dateInfo.dateString) ? 'calendar-day-with-workout' : ''\n                  } ${\n                    dateInfo.dateString === selectedDate ? 'calendar-day-selected' : ''\n                  }`}\n                  onClick={() => selectDate(dateInfo.dateString)}\n                >\n                  {viewMode === 'week' && (\n                    <div style={{ fontSize: '0.8rem' }}>{dateInfo.weekday}</div>\n                  )}\n                  <div>{dateInfo.day}</div>\n                </div>\n              </IonCol>\n            ))}\n          </IonRow>\n        </IonGrid>\n        \n        {/* 选中日期的健身安排 */}\n        <div className=\"section-title\">\n          {formatDate(selectedDate, 'YYYY年M月D日 (ddd)')} 的健身安排\n        </div>\n        \n        {dateWorkouts.length > 0 ? (\n          <IonList>\n            {dateWorkouts.map(workout => {\n              const plan = plans.find(p => p.id === workout.planId);\n              return (\n                <IonItem key={workout.id} button onClick={() => openWorkoutOptions(workout)}>\n                  <IonIcon icon={calendarOutline} slot=\"start\" color=\"primary\" />\n                  <IonLabel>\n                    <h2>{plan ? plan.name : workout.name || '健身计划'}</h2>\n                    <p>\n                      {plan && plan.exercises \n                        ? `${plan.exercises.length} 个动作` \n                        : '未知动作数'\n                      }\n                    </p>\n                  </IonLabel>\n                  <IonIcon icon={ellipsisHorizontal} slot=\"end\" />\n                </IonItem>\n              );\n            })}\n          </IonList>\n        ) : (\n          <IonCard className=\"workout-card\">\n            <IonCardContent>\n              <EmptyState \n                icon={calendarOutline}\n                message=\"没有安排健身计划\"\n                actionText=\"添加健身\"\n                onAction={() => setShowAddModal(true)}\n              />\n            </IonCardContent>\n          </IonCard>\n        )}\n        \n        {/* 添加健身按钮 */}\n        <div style={{ padding: '16px' }}>\n          <IonButton \n            expand=\"block\" \n            onClick={() => setShowAddModal(true)}\n          >\n            <IonIcon slot=\"start\" icon={addOutline} />\n            添加健身计划\n          </IonButton>\n        </div>\n        \n        {/* 健身安排选项 */}\n        <IonActionSheet\n          isOpen={showOptionsSheet}\n          onDidDismiss={() => {\n            setShowOptionsSheet(false);\n          }}\n          header=\"健身计划选项\"\n          buttons={[\n            {\n              text: '开始健身',\n              icon: arrowForwardOutline,\n              handler: () => {\n                if (selectedWorkout) {\n                  startWorkout(selectedWorkout.id);\n                }\n              }\n            },\n            {\n              text: '查看计划详情',\n              icon: calendarOutline,\n              handler: () => {\n                if (selectedWorkout && selectedWorkout.planId) {\n                  viewPlanDetails(selectedWorkout.planId);\n                }\n              }\n            },\n            {\n              text: '设置提醒',\n              icon: notificationsOutline,\n              handler: openReminderSettings\n            },\n            {\n              text: '删除安排',\n              role: 'destructive',\n              icon: trashOutline,\n              handler: confirmDeleteWorkout\n            },\n            {\n              text: '取消',\n              role: 'cancel',\n              icon: closeOutline,\n              handler: () => {\n                setSelectedWorkout(null);\n              }\n            }\n          ]}\n        />\n        \n        {/* 删除确认 */}\n        <IonAlert\n          isOpen={showDeleteAlert}\n          onDidDismiss={() => setShowDeleteAlert(false)}\n          header=\"确认删除\"\n          message={`确定要删除这个健身安排吗？${selectedWorkout ? '(' + (selectedWorkout.name || '未命名计划') + ')' : ''}`}\n          buttons={[\n            {\n              text: '取消',\n              role: 'cancel',\n              handler: () => {\n                console.log('取消删除');\n                setShowDeleteAlert(false);\n                setSelectedWorkout(null);\n              }\n            },\n            {\n              text: '删除',\n              role: 'destructive',\n              handler: () => {\n                console.log('确认删除');\n                handleDeleteWorkout();\n              }\n            }\n          ]}\n        />\n        \n        {/* 添加健身计划模态框 */}\n        <IonModal isOpen={showAddModal} onDidDismiss={() => setShowAddModal(false)}>\n          <IonToolbar>\n            <IonTitle>添加健身计划</IonTitle>\n            <IonButtons slot=\"end\">\n              <IonButton onClick={() => setShowAddModal(false)}>\n                <IonIcon icon={closeOutline} />\n              </IonButton>\n            </IonButtons>\n          </IonToolbar>\n          \n          <IonContent>\n            <div style={{ padding: '16px' }}>\n              <h4>选择日期: {formatDate(selectedDate, 'YYYY年M月D日 (ddd)')}</h4>\n              \n              <IonItem className=\"form-group\">\n                <IonLabel position=\"stacked\">选择健身计划</IonLabel>\n                <IonSelect \n                  value={selectedPlanId} \n                  onIonChange={e => setSelectedPlanId(e.detail.value)}\n                  placeholder=\"选择一个健身计划\"\n                >\n                  {plans.map(plan => (\n                    <IonSelectOption key={plan.id} value={plan.id}>\n                      {plan.name}\n                    </IonSelectOption>\n                  ))}\n                </IonSelect>\n              </IonItem>\n              \n              <IonButton \n                expand=\"block\" \n                color=\"primary\"\n                onClick={handleAddWorkout}\n                disabled={!selectedPlanId}\n                style={{ marginTop: '16px' }}\n              >\n                添加到日历\n              </IonButton>\n              \n              <IonButton \n                expand=\"block\" \n                fill=\"outline\"\n                routerLink=\"/plan/create\"\n                style={{ marginTop: '16px' }}\n              >\n                创建新计划\n              </IonButton>\n            </div>\n          </IonContent>\n        </IonModal>\n\n        {/* 提醒设置模态框 */}\n        <IonModal isOpen={showReminderModal} onDidDismiss={() => setShowReminderModal(false)}>\n          <IonToolbar>\n            <IonTitle>提醒设置</IonTitle>\n            <IonButtons slot=\"end\">\n              <IonButton onClick={() => setShowReminderModal(false)}>\n                <IonIcon icon={closeOutline} />\n              </IonButton>\n            </IonButtons>\n          </IonToolbar>\n          \n          <IonContent>\n            <div style={{ padding: '16px' }}>\n              <h4>健身提醒</h4>\n              \n              <IonItem>\n                <IonLabel>启用提醒</IonLabel>\n                <IonToggle \n                  checked={reminderEnabled} \n                  onIonChange={e => setReminderEnabled(e.detail.checked)} \n                />\n              </IonItem>\n              \n              {reminderEnabled && (\n                <div style={{ marginTop: '16px' }}>\n                  {/* 提醒方式选择 */}\n                  <IonItem>\n                    <IonLabel>提醒方式</IonLabel>\n                    <IonSelect \n                      value={useSpecificTime ? 'specificTime' : 'beforeEvent'}\n                      onIonChange={e => setUseSpecificTime(e.detail.value === 'specificTime')}\n                    >\n                      <IonSelectOption value=\"specificTime\">指定时间提醒</IonSelectOption>\n                      <IonSelectOption value=\"beforeEvent\">提前时间提醒</IonSelectOption>\n                    </IonSelect>\n                  </IonItem>\n                  \n                  {useSpecificTime ? (\n                    // 指定时间提醒\n                    <IonItem>\n                      <IonLabel>提醒时间</IonLabel>\n                      <IonInput\n                        type=\"time\"\n                        value={reminderTime}\n                        onIonChange={e => setReminderTime(e.detail.value)}\n                        style={{ textAlign: 'right' }}\n                        placeholder=\"09:00\"\n                      />\n                    </IonItem>\n                  ) : (\n                    // 提前时间提醒\n                    <>\n                      <IonItem>\n                        <IonLabel>提前提醒时间</IonLabel>\n                        <IonNote slot=\"end\">{reminderMinutes} 分钟</IonNote>\n                      </IonItem>\n                      \n                      <IonItem>\n                        <IonRange \n                          min={5} \n                          max={120} \n                          step={5} \n                          value={reminderMinutes}\n                          onIonChange={e => setReminderMinutes(e.detail.value)}\n                        >\n                          <IonIcon slot=\"start\" icon={timeOutline} />\n                          <IonIcon slot=\"end\" icon={notificationsOutline} />\n                        </IonRange>\n                      </IonItem>\n                      \n                      <div style={{ textAlign: 'center', margin: '16px 0', color: 'var(--ion-color-medium)' }}>\n                        将在健身开始前 {reminderMinutes} 分钟提醒您\n                      </div>\n                    </>\n                  )}\n                  \n                  {useSpecificTime && (\n                    <div style={{ textAlign: 'center', margin: '16px 0', color: 'var(--ion-color-medium)', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n                      <IonIcon icon={alarmOutline} style={{ marginRight: '8px' }} />\n                      将在每天 {reminderTime} 提醒您\n                    </div>\n                  )}\n                </div>\n              )}\n              \n              <IonButton \n                expand=\"block\" \n                color=\"primary\"\n                onClick={saveReminderSettings}\n                style={{ marginTop: '16px' }}\n              >\n                保存设置\n              </IonButton>\n            </div>\n          </IonContent>\n        </IonModal>\n      </IonContent>\n  );\n};\n\nexport default WorkoutCalendar;",
  "styles/App.module.css": "/* 主应用样式 */\n\n.content {\n  --padding: 0;\n  background: #ffffff;\n  min-height: 100vh;\n  color: #1f2937;\n}",
  "styles/Welcome.module.css": "/* Welcome 组件样式 - 简约风格 */\n\n.welcomeContainer {\n  background: #ffffff;\n  min-height: 100vh;\n  color: #333333;\n  position: relative;\n  padding: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n}\n\n/* 头部 */\n.header {\n  text-align: center;\n  padding: 56px 16px 16px;\n}\n\n.logo {\n  display: inline-block;\n  margin-bottom: 12px;\n}\n\n.logoImage {\n  width: 64px;\n  height: 64px;\n  border-radius: 12px;\n  transition: opacity 0.2s ease;\n  box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.1);\n}\n\n.logoImage:hover {\n  opacity: 0.8;\n}\n\n.title {\n  font-size: 2.1rem;\n  font-weight: 600;\n  margin: 0 0 6px 0;\n  line-height: 1.2;\n  letter-spacing: -0.02em;\n}\n\n.titleGradient {\n  color: #1a1a1a;\n}\n\n.titleSubtext {\n  color: #666666;\n  font-weight: 400;\n  margin-left: 6px;\n}\n\n.subtitle {\n  font-size: 1rem;\n  color: #666666;\n  margin: 0;\n  font-weight: 400;\n}\n\n/* 步骤 */\n.steps {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: 8px 16px 16px;\n  max-width: 560px;\n  margin: 0 auto;\n}\n\n.step {\n  padding: 12px 12px;\n  background: #fff;\n  border-radius: 12px;\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  position: relative;\n  text-align: center;\n  transition: background-color 0.2s ease;\n}\n\n.stepContent {\n  margin-top: 0;\n}\n\n.stepContent h3 {\n  font-size: 1.1rem;\n  font-weight: 500;\n  color: #1a1a1a;\n  margin: 0 0 4px 0;\n}\n\n.stepContent p {\n  color: #666666;\n  margin: 0;\n  font-size: 0.95rem;\n  line-height: 1.4;\n}\n\n.stepNumber {\n  position: absolute;\n  top: 8px;\n  left: 8px;\n  background: #e5e5e5;\n  color: #666666;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 500;\n  font-size: 0.75rem;\n}\n\n/* 行动按钮 */\n.ctaSection {\n  text-align: center;\n  padding: 16px 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  align-items: center;\n}\n\n.primaryBtn {\n  background: #1a1a1a;\n  color: #ffffff;\n  border: none;\n  border-radius: 6px;\n  padding: 10px 18px;\n  font-weight: 500;\n  font-size: 0.95rem;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  justify-content: center;\n  transition: background-color 0.2s ease;\n  width: 180px;\n  max-width: 90%;\n}\n\n.primaryBtn:hover {\n  background: #333333;\n}\n\n.primaryBtn:active {\n  background: #000000;\n}\n\n.secondaryBtn {\n  background: transparent;\n  color: #666666;\n  border: 1px solid #d5d5d5;\n  border-radius: 6px;\n  padding: 10px 18px;\n  font-weight: 500;\n  font-size: 0.95rem;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  justify-content: center;\n  transition: all 0.2s ease;\n  width: 180px;\n  max-width: 90%;\n}\n\n.secondaryBtn:hover {\n  background: #fafafa;\n  border-color: #999999;\n}\n\n/* 底部 */\n.footer {\n  text-align: center;\n  padding: 8px 16px 16px;\n  color: #999999;\n  font-size: 0.85rem;\n}\n\n.footer p {\n  margin: 0;\n}\n\n/* 响应式设计 */\n@media (max-width: 768px) {\n  .header {\n    padding: 40px 12px 16px;\n  }\n  \n  .title {\n    font-size: 2rem;\n  }\n  \n  .subtitle {\n    font-size: 1rem;\n  }\n  \n  .steps {\n    padding: 8px 12px 16px;\n  }\n  \n  .step {\n    padding: 12px 12px;\n  }\n  \n  .ctaSection {\n    padding: 16px 12px;\n  }\n}\n\n@media (max-width: 480px) {\n  .header {\n    padding: 32px 12px 14px;\n  }\n  \n  .logoImage {\n    width: 52px;\n    height: 52px;\n  }\n  \n  .title {\n    font-size: 1.7rem;\n  }\n  \n  .primaryBtn, .secondaryBtn {\n    width: 100%;\n    max-width: 280px;\n  }\n}\n\n/* 桌面端更紧凑的步骤布局 */\n@media (min-width: 768px) {\n  .steps {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 10px;\n    max-width: 840px;\n  }\n  .step {\n    text-align: left;\n    padding: 12px;\n  }\n  .stepNumber {\n    top: 10px;\n    left: 10px;\n  }\n}\n\n/* 简化动画 */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(12px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* 基础进场动画 */\n.logo,\n.title,\n.subtitle,\n.step,\n.ctaSection {\n  opacity: 0;\n  animation: fadeIn 0.5s ease-out forwards;\n}\n\n.logo {\n  animation-delay: 0s;\n}\n\n.title {\n  animation-delay: 0.1s;\n}\n\n.subtitle {\n  animation-delay: 0.2s;\n}\n\n.step:nth-child(1) { \n  animation-delay: 0.3s;\n}\n\n.step:nth-child(2) { \n  animation-delay: 0.4s;\n}\n\n.step:nth-child(3) { \n  animation-delay: 0.5s;\n}\n\n.ctaSection {\n  animation-delay: 0.6s;\n}\n",
  "styles/global.css": "/* 全局变量 */\n:root {\n  /* 主色调 */\n  --ion-color-primary: #7B68EE;\n  --ion-color-primary-rgb: 123, 104, 238;\n  --ion-color-primary-contrast: #ffffff;\n  --ion-color-primary-contrast-rgb: 255, 255, 255;\n  --ion-color-primary-shade: #6c5cd1;\n  --ion-color-primary-tint: #8977f0;\n  \n  /* 辅助色 */\n  --ion-color-secondary: #5AC8FA;\n  --ion-color-secondary-rgb: 90, 200, 250;\n  --ion-color-secondary-contrast: #ffffff;\n  --ion-color-secondary-contrast-rgb: 255, 255, 255;\n  --ion-color-secondary-shade: #4fb0dc;\n  --ion-color-secondary-tint: #6ccefb;\n  \n  --ion-color-tertiary: #FF9500;\n  --ion-color-tertiary-rgb: 255, 149, 0;\n  --ion-color-tertiary-contrast: #ffffff;\n  --ion-color-tertiary-contrast-rgb: 255, 255, 255;\n  --ion-color-tertiary-shade: #e08500;\n  --ion-color-tertiary-tint: #ffa01a;\n  \n  --ion-color-success: #4CD964;\n  --ion-color-success-rgb: 76, 217, 100;\n  --ion-color-success-contrast: #ffffff;\n  --ion-color-success-contrast-rgb: 255, 255, 255;\n  --ion-color-success-shade: #43bf58;\n  --ion-color-success-tint: #5edd74;\n  \n  --ion-color-warning: #FFCC00;\n  --ion-color-warning-rgb: 255, 204, 0;\n  --ion-color-warning-contrast: #000000;\n  --ion-color-warning-contrast-rgb: 0, 0, 0;\n  --ion-color-warning-shade: #e0b400;\n  --ion-color-warning-tint: #ffd11a;\n  \n  --ion-color-danger: #FF3B30;\n  --ion-color-danger-rgb: 255, 59, 48;\n  --ion-color-danger-contrast: #ffffff;\n  --ion-color-danger-contrast-rgb: 255, 255, 255;\n  --ion-color-danger-shade: #e0342a;\n  --ion-color-danger-tint: #ff4f45;\n  \n  /* 中性色 */\n  --ion-color-medium: #8E8E93;\n  --ion-color-medium-rgb: 142, 142, 147;\n  --ion-color-medium-contrast: #ffffff;\n  --ion-color-medium-contrast-rgb: 255, 255, 255;\n  --ion-color-medium-shade: #7d7d81;\n  --ion-color-medium-tint: #9a9a9e;\n  \n  --ion-color-light: #F2F2F7;\n  --ion-color-light-rgb: 242, 242, 247;\n  --ion-color-light-contrast: #000000;\n  --ion-color-light-contrast-rgb: 0, 0, 0;\n  --ion-color-light-shade: #d5d5d9;\n  --ion-color-light-tint: #f3f3f8;\n  \n  /* 应用特定变量 */\n  --app-background: #F9F9F9;\n  --app-card-bg: #FFFFFF;\n  --app-light-bg: rgba(0, 0, 0, 0.05);\n  --app-medium-text: rgba(0, 0, 0, 0.6);\n  --app-input-bg: rgba(0, 0, 0, 0.04);\n  \n  /* 间距系统 */\n  --spacing-xs: 4px;\n  --spacing-sm: 8px;\n  --spacing-md: 16px;\n  --spacing-lg: 24px;\n  --spacing-xl: 32px;\n  \n  /* 圆角 */\n  --border-radius-sm: 8px;\n  --border-radius-md: 12px;\n  --border-radius-lg: 16px;\n  --border-radius-round: 50%;\n  \n  /* 阴影 */\n  --box-shadow-sm: 0 2px 8px rgba(0, 0, 0, 0.08);\n  --box-shadow-md: 0 4px 12px rgba(0, 0, 0, 0.12);\n  --box-shadow-lg: 0 8px 16px rgba(0, 0, 0, 0.16);\n}\n\n/* 全局样式 */\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;\n  background-color: var(--app-background);\n  color: var(--ion-text-color);\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n/* 卡片样式 */\n.workout-card {\n  border-radius: var(--border-radius-md);\n  margin: var(--spacing-md);\n  box-shadow: var(--box-shadow-sm);\n  overflow: hidden;\n}\n\n/* 数据卡片 */\n.data-card {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: var(--spacing-md);\n  background-color: var(--app-card-bg);\n  border-radius: var(--border-radius-md);\n  box-shadow: var(--box-shadow-sm);\n  margin: var(--spacing-sm);\n  text-align: center;\n}\n\n.data-value {\n  font-size: 24px;\n  font-weight: 700;\n  margin: var(--spacing-sm) 0;\n  color: var(--ion-color-dark);\n}\n\n.data-label {\n  font-size: 12px;\n  color: var(--app-medium-text);\n  font-weight: 500;\n}\n\n.data-grid {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: var(--spacing-sm);\n  padding: var(--spacing-sm) var(--spacing-md);\n}\n\n/* 部位标签 */\n.body-part-tag {\n  display: inline-block;\n  padding: 4px 12px;\n  margin: 4px;\n  border-radius: 50px;\n  font-size: 12px;\n  font-weight: 500;\n  background-color: rgba(123, 104, 238, 0.1);\n  color: var(--ion-color-primary);\n}\n\n.body-part-tag.chest {\n  background-color: rgba(123, 104, 238, 0.1);\n  color: var(--ion-color-primary);\n}\n\n.body-part-tag.back {\n  background-color: rgba(90, 200, 250, 0.1);\n  color: var(--ion-color-secondary);\n}\n\n.body-part-tag.legs {\n  background-color: rgba(76, 217, 100, 0.1);\n  color: var(--ion-color-success);\n}\n\n.body-part-tag.shoulders {\n  background-color: rgba(255, 149, 0, 0.1);\n  color: var(--ion-color-tertiary);\n}\n\n.body-part-tag.arms {\n  background-color: rgba(255, 59, 48, 0.1);\n  color: var(--ion-color-danger);\n}\n\n/* 标题样式 */\n.section-title {\n  font-size: 18px;\n  font-weight: 600;\n  margin: var(--spacing-md) var(--spacing-md) var(--spacing-sm);\n  color: var(--ion-text-color);\n}\n\n/* 按钮样式 */\n.action-button {\n  height: 44px;\n  font-weight: 600;\n  --border-radius: var(--border-radius-sm);\n  margin: var(--spacing-sm) 0;\n}\n\n.control-button {\n  height: 48px !important;\n  font-weight: 600;\n  --border-radius: var(--border-radius-sm);\n  margin: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-height: 48px !important;\n  max-height: 48px !important;\n  --padding-top: 0;\n  --padding-bottom: 0;\n  --min-height: 48px;\n  width: 100%;\n}\n\n.control-button ion-icon {\n  font-size: 20px;\n}\n\n.control-button.button-has-icon-only {\n  --padding-start: 0;\n  --padding-end: 0;\n}\n\n/* 控制按钮flex布局 */\n.control-buttons-container {\n  display: flex;\n  gap: 12px;\n  align-items: stretch;\n  margin: 0;\n  padding: 0;\n}\n\n.control-buttons-container .control-button {\n  flex: 1;\n  margin: 0;\n}\n\n.fab-button {\n  --box-shadow: var(--box-shadow-md);\n}\n\n/* 列表项样式 */\n.exercise-list-item {\n  --padding-start: var(--spacing-md);\n  --padding-end: var(--spacing-md);\n  --padding-top: var(--spacing-md);\n  --padding-bottom: var(--spacing-md);\n  --border-radius: var(--border-radius-sm);\n  margin: var(--spacing-xs) var(--spacing-md);\n}\n\n.exercise-detail {\n  display: flex;\n  align-items: center;\n  font-size: 14px;\n  color: var(--app-medium-text);\n  margin-top: var(--spacing-xs);\n}\n\n/* 空状态 */\n.empty-state {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: var(--spacing-xl);\n  text-align: center;\n}\n\n.empty-state-icon-container {\n  width: 64px;\n  height: 64px;\n  border-radius: var(--border-radius-round);\n  background-color: var(--app-light-bg);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: var(--spacing-md);\n}\n\n.empty-state-icon {\n  font-size: 32px;\n  color: var(--ion-color-primary);\n}\n\n/* 图表容器 */\n.chart-container {\n  background-color: var(--app-card-bg);\n  border-radius: var(--border-radius-md);\n  margin: var(--spacing-md);\n  padding: var(--spacing-md);\n  box-shadow: var(--box-shadow-sm);\n  height: 250px;\n}\n\n/* 进度环 */\n.circular-progress {\n  position: relative;\n  width: 120px;\n  height: 120px;\n  margin: var(--spacing-md) auto;\n}\n\n.progress-value {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  font-size: 32px;\n  font-weight: 700;\n  color: var(--ion-color-primary);\n}\n\n/* 计时器 */\n.timer-display {\n  font-size: 48px;\n  font-weight: 700;\n  text-align: center;\n  margin: var(--spacing-md) 0;\n  color: var(--ion-color-dark);\n  font-variant-numeric: tabular-nums;\n  letter-spacing: 2px;\n}\n\n/* 日历样式 */\n.calendar-day {\n  width: 36px;\n  height: 36px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  margin: 4px auto;\n  border-radius: var(--border-radius-round);\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.calendar-day-selected {\n  background-color: var(--ion-color-primary);\n  color: white;\n  font-weight: 600;\n}\n\n.calendar-day-with-workout {\n  position: relative;\n}\n\n.calendar-day-with-workout::after {\n  content: '';\n  position: absolute;\n  bottom: -2px;\n  width: 4px;\n  height: 4px;\n  border-radius: var(--border-radius-round);\n  background-color: var(--ion-color-primary);\n}\n\n.calendar-day:not(.calendar-day-selected):hover {\n  background-color: var(--app-light-bg);\n}\n\n/* 表单样式 */\n.form-group {\n  margin-bottom: var(--spacing-md);\n  --background: var(--app-card-bg);\n}\n\n/* 统计页面 */\n.stats-segment {\n  margin: var(--spacing-md);\n  border-radius: var(--border-radius-sm);\n  overflow: hidden;\n  --background: var(--app-light-bg);\n}\n\n/* Tab 样式 */\nion-tab {\n  height: 100%;\n}\n\nion-tab-bar {\n  --background: var(--app-card-bg);\n  --border: 1px solid var(--app-light-bg);\n  height: 56px;\n  box-shadow: 0 -2px 10px rgba(0,0,0,0.03);\n}\n\nion-tab-button {\n  --color: var(--app-medium-text);\n  --color-selected: var(--ion-color-primary);\n  position: relative;\n  overflow: visible;\n}\n\nion-tab-button::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 50%;\n  transform: translateX(-50%) scaleX(0);\n  width: 24px;\n  height: 3px;\n  background: var(--ion-color-primary);\n  border-radius: 0 0 2px 2px;\n}\n\nion-tab-button[selected]::before {\n  transform: translateX(-50%) scaleX(1);\n}\n\nion-tab-button[selected] {\n  --background: rgba(123, 104, 238, 0.08);\n}\n\nion-tab-button ion-icon {\n  font-size: 24px;\n}\n\nion-tab-button[selected] ion-icon {\n  color: var(--ion-color-primary);\n}\n\nion-tab-button ion-label {\n  font-size: 12px;\n  font-weight: 500;\n  margin-top: 4px;\n}\n\nion-tab-button[selected] ion-label {\n  color: var(--ion-color-primary);\n  font-weight: 600;\n}\n\n/* 动画和过渡 */\n.fade-in {\n  animation: fadeIn 0.3s ease forwards;\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n.scale-in {\n  animation: scaleIn 0.3s ease forwards;\n}\n\n@keyframes scaleIn {\n  from { transform: scale(0.9); opacity: 0; }\n  to { transform: scale(1); opacity: 1; }\n}\n\n.slide-in-right {\n  animation: slideInRight 0.3s ease forwards;\n}\n\n@keyframes slideInRight {\n  from { transform: translateX(30px); opacity: 0; }\n  to { transform: translateX(0); opacity: 1; }\n}\n\n.slide-in-up {\n  animation: slideInUp 0.3s ease forwards;\n}\n\n@keyframes slideInUp {\n  from { transform: translateY(30px); opacity: 0; }\n  to { transform: translateY(0); opacity: 1; }\n}\n\n.pulse {\n  animation: pulse 1.5s ease infinite;\n}\n\n@keyframes pulse {\n  0% { transform: scale(1); }\n  50% { transform: scale(1.05); }\n  100% { transform: scale(1); }\n}\n\n/* 暗黑模式适配 */\n@media (prefers-color-scheme: dark) {\n  :root {\n    --ion-background-color: #121212;\n    --ion-background-color-rgb: 18, 18, 18;\n    \n    --ion-text-color: #ffffff;\n    --ion-text-color-rgb: 255, 255, 255;\n    \n    --ion-card-background: #1e1e1e;\n    \n    --app-background: #121212;\n    --app-card-bg: #1e1e1e;\n    --app-light-bg: rgba(255, 255, 255, 0.08);\n    --app-medium-text: rgba(255, 255, 255, 0.6);\n    --app-input-bg: rgba(255, 255, 255, 0.08);\n  }\n  \n  .workout-card {\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\n  }\n  \n  .chart-container {\n    background-color: var(--ion-card-background);\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\n  }\n  \n  .data-card {\n    background-color: var(--ion-card-background);\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\n  }\n  \n  .body-part-tag {\n    opacity: 0.8;\n  }\n  \n  ion-tab-bar {\n    --background: var(--ion-card-background);\n    --border: 1px solid rgba(255, 255, 255, 0.05);\n  }\n  \n  ion-tab-button[selected] {\n    --background: rgba(123, 104, 238, 0.15);\n  }\n}",
  "utils/exerciseData.js": "// 常规健身动作数据库\n// 分类整理常见的健身动作，便于用户选择\n\nconst exerciseDatabase = {\n  // 胸部训练\n  chest: {\n    name: '胸部',\n    exercises: [\n      {\n        name: '平板卧推',\n        defaultSets: 3,\n        defaultReps: 10,\n        defaultWeight: 60,\n        defaultRestBetweenSets: 90,\n        defaultRestAfterExercise: 120,\n        description: '平躺在卧推凳上，双手握住杠铃，将杠铃从胸部推至手臂伸直',\n        icon: 'barbell'\n      },\n      {\n        name: '哑铃卧推',\n        defaultSets: 3,\n        defaultReps: 12,\n        defaultWeight: 20,\n        defaultRestBetweenSets: 60,\n        defaultRestAfterExercise: 90,\n        description: '平躺在卧推凳上，双手各持一个哑铃，从胸部推至手臂伸直',\n        icon: 'barbell'\n      },\n      {\n        name: '上斜卧推',\n        defaultSets: 3,\n        defaultReps: 10,\n        defaultWeight: 50,\n        defaultRestBetweenSets: 90,\n        defaultRestAfterExercise: 120,\n        description: '在上斜卧推凳上进行卧推，主要锻炼上胸肌',\n        icon: 'barbell'\n      },\n      {\n        name: '下斜卧推',\n        defaultSets: 3,\n        defaultReps: 10,\n        defaultWeight: 50,\n        defaultRestBetweenSets: 90,\n        defaultRestAfterExercise: 120,\n        description: '在下斜卧推凳上进行卧推，主要锻炼下胸肌',\n        icon: 'barbell'\n      },\n      {\n        name: '哑铃飞鸟',\n        defaultSets: 3,\n        defaultReps: 15,\n        defaultWeight: 15,\n        defaultRestBetweenSets: 60,\n        defaultRestAfterExercise: 90,\n        description: '平躺在卧推凳上，双手持哑铃向两侧打开，然后收回',\n        icon: 'barbell'\n      },\n      {\n        name: '器械夹胸',\n        defaultSets: 3,\n        defaultReps: 12,\n        defaultWeight: 40,\n        defaultRestBetweenSets: 60,\n        defaultRestAfterExercise: 90,\n        description: '坐在夹胸器械上，双臂向中间夹紧，然后缓慢回到原位',\n        icon: 'barbell'\n      },\n      {\n        name: '俯卧撑',\n        defaultSets: 3,\n        defaultReps: 15,\n        defaultWeight: 0,\n        defaultRestBetweenSets: 60,\n        defaultRestAfterExercise: 90,\n        description: '双手撑地，与肩同宽，身体保持直线，弯曲手肘下降再推起',\n        icon: 'fitness'\n      },\n      {\n        name: '绳索下斜夹胸',\n        defaultSets: 3,\n        defaultReps: 12,\n        defaultWeight: 20,\n        defaultRestBetweenSets: 60,\n        defaultRestAfterExercise: 90,\n        description: '站立在绳索器械前，双手握住把手向下夹胸',\n        icon: 'barbell'\n      }\n    ]\n  },\n  \n  // 背部训练\n  back: {\n    name: '背部',\n    exercises: [\n      {\n        name: '引体向上',\n        defaultSets: 3,\n        defaultReps: 8,\n        defaultWeight: 0,\n        defaultRestBetweenSets: 90,\n        defaultRestAfterExercise: 120,\n        description: '双手握住横杠，手臂伸直悬挂，然后拉起身体直到下巴超过横杠',\n        icon: 'body'\n      },\n      {\n        name: '杠铃划船',\n        defaultSets: 3,\n        defaultReps: 10,\n        defaultWeight: 40,\n        defaultRestBetweenSets: 90,\n        defaultRestAfterExercise: 120,\n        description: '弯腰握住杠铃，背部保持平直，将杠铃拉向腹部',\n        icon: 'barbell'\n      },\n      {\n        name: '哑铃划船',\n        defaultSets: 3,\n        defaultReps: 12,\n        defaultWeight: 20,\n        defaultRestBetweenSets: 60,\n        defaultRestAfterExercise: 90,\n        description: '一手一膝支撑在凳子上，另一手持哑铃向上拉',\n        icon: 'barbell'\n      },\n      {\n        name: '坐姿划船',\n        defaultSets: 3,\n        defaultReps: 12,\n        defaultWeight: 50,\n        defaultRestBetweenSets: 60,\n        defaultRestAfterExercise: 90,\n        description: '坐在划船器上，抓住把手向身体方向拉',\n        icon: 'barbell'\n      },\n      {\n        name: '高位下拉',\n        defaultSets: 3,\n        defaultReps: 10,\n        defaultWeight: 50,\n        defaultRestBetweenSets: 90,\n        defaultRestAfterExercise: 120,\n        description: '坐在高位下拉器械上，抓住把手向下拉至胸前',\n        icon: 'barbell'\n      },\n      {\n        name: '直臂下拉',\n        defaultSets: 3,\n        defaultReps: 12,\n        defaultWeight: 30,\n        defaultRestBetweenSets: 60,\n        defaultRestAfterExercise: 90,\n        description: '站立握住绳索，手臂保持伸直，向下拉至大腿前方',\n        icon: 'barbell'\n      },\n      {\n        name: 'T杠划船',\n        defaultSets: 3,\n        defaultReps: 10,\n        defaultWeight: 40,\n        defaultRestBetweenSets: 90,\n        defaultRestAfterExercise: 120,\n        description: '俯身在T杠器械上，握住把手向上拉',\n        icon: 'barbell'\n      }\n    ]\n  },\n  \n  // 肩部训练\n  shoulders: {\n    name: '肩部',\n    exercises: [\n      {\n        name: '哑铃肩上推举',\n        defaultSets: 3,\n        defaultReps: 10,\n        defaultWeight: 15,\n        defaultRestBetweenSets: 90,\n        defaultRestAfterExercise: 120,\n        description: '坐姿或站姿，双手持哑铃，从肩部向上推举',\n        icon: 'barbell'\n      },\n      {\n        name: '杠铃肩上推举',\n        defaultSets: 3,\n        defaultReps: 8,\n        defaultWeight: 40,\n        defaultRestBetweenSets: 90,\n        defaultRestAfterExercise: 120,\n        description: '站姿握住杠铃于肩前，向上推举至手臂伸直',\n        icon: 'barbell'\n      },\n      {\n        name: '哑铃侧平举',\n        defaultSets: 3,\n        defaultReps: 12,\n        defaultWeight: 10,\n        defaultRestBetweenSets: 60,\n        defaultRestAfterExercise: 90,\n        description: '站立持哑铃，双臂向两侧平举至与肩同高',\n        icon: 'barbell'\n      },\n      {\n        name: '哑铃前平举',\n        defaultSets: 3,\n        defaultReps: 12,\n        defaultWeight: 10,\n        defaultRestBetweenSets: 60,\n        defaultRestAfterExercise: 90,\n        description: '站立持哑铃，双臂向前平举至与肩同高',\n        icon: 'barbell'\n      },\n      {\n        name: '俯身侧平举',\n        defaultSets: 3,\n        defaultReps: 12,\n        defaultWeight: 8,\n        defaultRestBetweenSets: 60,\n        defaultRestAfterExercise: 90,\n        description: '俯身持哑铃，双臂向两侧平举',\n        icon: 'barbell'\n      },\n      {\n        name: '绳索面拉',\n        defaultSets: 3,\n        defaultReps: 12,\n        defaultWeight: 15,\n        defaultRestBetweenSets: 60,\n        defaultRestAfterExercise: 90,\n        description: '站立在绳索器械前，双手拉绳向面部方向',\n        icon: 'barbell'\n      },\n      {\n        name: '器械肩上推举',\n        defaultSets: 3,\n        defaultReps: 10,\n        defaultWeight: 40,\n        defaultRestBetweenSets: 90,\n        defaultRestAfterExercise: 120,\n        description: '坐在推举器械上，双手握把向上推举',\n        icon: 'barbell'\n      }\n    ]\n  },\n  \n  // 手臂训练\n  arms: {\n    name: '手臂',\n    exercises: [\n      {\n        name: '杠铃弯举',\n        defaultSets: 3,\n        defaultReps: 10,\n        defaultWeight: 30,\n        defaultRestBetweenSets: 60,\n        defaultRestAfterExercise: 90,\n        description: '站立握住杠铃，手心向上，弯曲手肘将杠铃举至肩部',\n        icon: 'barbell'\n      },\n      {\n        name: '哑铃弯举',\n        defaultSets: 3,\n        defaultReps: 12,\n        defaultWeight: 15,\n        defaultRestBetweenSets: 60,\n        defaultRestAfterExercise: 90,\n        description: '站立握住哑铃，手心向上，弯曲手肘将哑铃举至肩部',\n        icon: 'barbell'\n      },\n      {\n        name: '锤式弯举',\n        defaultSets: 3,\n        defaultReps: 12,\n        defaultWeight: 15,\n        defaultRestBetweenSets: 60,\n        defaultRestAfterExercise: 90,\n        description: '站立握住哑铃，手心相对，弯曲手肘向上举',\n        icon: 'barbell'\n      },\n      {\n        name: '绳索下压',\n        defaultSets: 3,\n        defaultReps: 12,\n        defaultWeight: 30,\n        defaultRestBetweenSets: 60,\n        defaultRestAfterExercise: 90,\n        description: '站立面对绳索器械，双手握住绳索向下压',\n        icon: 'barbell'\n      },\n      {\n        name: '窄距卧推',\n        defaultSets: 3,\n        defaultReps: 10,\n        defaultWeight: 40,\n        defaultRestBetweenSets: 90,\n        defaultRestAfterExercise: 120,\n        description: '平躺在卧推凳上，双手窄距握住杠铃，进行卧推动作',\n        icon: 'barbell'\n      },\n      {\n        name: '哑铃颈后臂屈伸',\n        defaultSets: 3,\n        defaultReps: 12,\n        defaultWeight: 20,\n        defaultRestBetweenSets: 60,\n        defaultRestAfterExercise: 90,\n        description: '坐姿握住一个哑铃，双手将其举过头顶，然后弯曲手肘至颈后，再伸直',\n        icon: 'barbell'\n      },\n      {\n        name: '杠铃颈后臂屈伸',\n        defaultSets: 3,\n        defaultReps: 10,\n        defaultWeight: 30,\n        defaultRestBetweenSets: 90,\n        defaultRestAfterExercise: 120,\n        description: '坐姿握住杠铃，双手将其举过头顶，然后弯曲手肘至颈后，再伸直',\n        icon: 'barbell'\n      },\n      {\n        name: '反向弯举',\n        defaultSets: 3,\n        defaultReps: 12,\n        defaultWeight: 15,\n        defaultRestBetweenSets: 60,\n        defaultRestAfterExercise: 90,\n        description: '站立握住杠铃或哑铃，手心向下，弯曲手肘向上举',\n        icon: 'barbell'\n      }\n    ]\n  },\n  \n  // 腿部训练\n  legs: {\n    name: '腿部',\n    exercises: [\n      {\n        name: '杠铃深蹲',\n        defaultSets: 4,\n        defaultReps: 10,\n        defaultWeight: 80,\n        defaultRestBetweenSets: 120,\n        defaultRestAfterExercise: 180,\n        description: '肩上扛杠铃，双脚与肩同宽，下蹲至大腿与地面平行，然后站起',\n        icon: 'barbell'\n      },\n      {\n        name: '哑铃深蹲',\n        defaultSets: 3,\n        defaultReps: 12,\n        defaultWeight: 20,\n        defaultRestBetweenSets: 90,\n        defaultRestAfterExercise: 120,\n        description: '双手持哑铃于身体两侧，进行深蹲动作',\n        icon: 'barbell'\n      },\n      {\n        name: '腿举',\n        defaultSets: 3,\n        defaultReps: 12,\n        defaultWeight: 100,\n        defaultRestBetweenSets: 90,\n        defaultRestAfterExercise: 120,\n        description: '坐在腿举器械上，用双腿推动重量向上',\n        icon: 'barbell'\n      },\n      {\n        name: '腿屈伸',\n        defaultSets: 3,\n        defaultReps: 15,\n        defaultWeight: 40,\n        defaultRestBetweenSets: 60,\n        defaultRestAfterExercise: 90,\n        description: '坐在腿屈伸器械上，将腿从弯曲伸直',\n        icon: 'barbell'\n      },\n      {\n        name: '腿弯举',\n        defaultSets: 3,\n        defaultReps: 15,\n        defaultWeight: 40,\n        defaultRestBetweenSets: 60,\n        defaultRestAfterExercise: 90,\n        description: '俯卧在腿弯举器械上，将腿从伸直弯曲',\n        icon: 'barbell'\n      },\n      {\n        name: '箭步蹲',\n        defaultSets: 3,\n        defaultReps: 10,\n        defaultWeight: 20,\n        defaultRestBetweenSets: 60,\n        defaultRestAfterExercise: 90,\n        description: '双手持哑铃，一腿向前一腿向后，下蹲然后站起',\n        icon: 'body'\n      },\n      {\n        name: '硬拉',\n        defaultSets: 3,\n        defaultReps: 8,\n        defaultWeight: 80,\n        defaultRestBetweenSets: 120,\n        defaultRestAfterExercise: 180,\n        description: '站立握住杠铃，背部挺直，抬起杠铃至大腿前方',\n        icon: 'barbell'\n      },\n      {\n        name: '小腿提踵',\n        defaultSets: 3,\n        defaultReps: 20,\n        defaultWeight: 30,\n        defaultRestBetweenSets: 60,\n        defaultRestAfterExercise: 90,\n        description: '站立持重物或徒手，提起脚跟，然后放下',\n        icon: 'footsteps'\n      }\n    ]\n  },\n  \n  // 核心训练\n  core: {\n    name: '核心',\n    exercises: [\n      {\n        name: '仰卧起坐',\n        defaultSets: 3,\n        defaultReps: 20,\n        defaultWeight: 0,\n        defaultRestBetweenSets: 45,\n        defaultRestAfterExercise: 60,\n        description: '仰卧，双膝弯曲，上身向膝盖方向卷起',\n        icon: 'body'\n      },\n      {\n        name: '平板支撑',\n        defaultSets: 3,\n        defaultReps: 1,\n        defaultWeight: 0,\n        defaultRestBetweenSets: 60,\n        defaultRestAfterExercise: 90,\n        description: '俯卧，用前臂和脚尖支撑身体，保持身体成一直线，每组坚持30-60秒',\n        icon: 'body'\n      },\n      {\n        name: '侧平板支撑',\n        defaultSets: 3,\n        defaultReps: 1,\n        defaultWeight: 0,\n        defaultRestBetweenSets: 45,\n        defaultRestAfterExercise: 60,\n        description: '侧卧，用一侧前臂和脚支撑身体，每组坚持30秒',\n        icon: 'body-outline'\n      },\n      {\n        name: '五点支撑',\n        defaultSets: 3,\n        defaultReps: 1,\n        defaultWeight: 0,\n        defaultRestBetweenSets: 60,\n        defaultRestAfterExercise: 90,\n        description: '以双手、双脚和头部五个支撑点与地面接触，保持身体稳定，每组坚持30-45秒',\n        icon: 'hand-left'\n      },\n      {\n        name: '死虫式',\n        defaultSets: 3,\n        defaultReps: 15,\n        defaultWeight: 0,\n        defaultRestBetweenSets: 45,\n        defaultRestAfterExercise: 60,\n        description: '仰卧，双腿抬起弯曲90度，双臂向上伸直，然后一侧手臂和对侧腿同时伸直，交替进行',\n        icon: 'bug'\n      },\n      {\n        name: '侧支撑',\n        defaultSets: 3,\n        defaultReps: 10,\n        defaultWeight: 0,\n        defaultRestBetweenSets: 45,\n        defaultRestAfterExercise: 60,\n        description: '侧卧，以一侧手臂和脚为支点撑起身体，保持身体成一直线，上下移动髋部',\n        icon: 'resize'\n      },\n      {\n        name: '俄罗斯转体',\n        defaultSets: 3,\n        defaultReps: 20,\n        defaultWeight: 5,\n        defaultRestBetweenSets: 45,\n        defaultRestAfterExercise: 60,\n        description: '坐姿，双腿抬起，双手持重物，向两侧旋转上身',\n        icon: 'sync'\n      },\n      {\n        name: '腹肌轮',\n        defaultSets: 3,\n        defaultReps: 10,\n        defaultWeight: 0,\n        defaultRestBetweenSets: 60,\n        defaultRestAfterExercise: 90,\n        description: '跪姿握住腹肌轮，向前滚动然后回到起始位置',\n        icon: 'disc'\n      },\n      {\n        name: '举腿',\n        defaultSets: 3,\n        defaultReps: 15,\n        defaultWeight: 0,\n        defaultRestBetweenSets: 45,\n        defaultRestAfterExercise: 60,\n        description: '仰卧或悬挂，双腿一起抬起再放下',\n        icon: 'body'\n      },\n      {\n        name: '山climber',\n        defaultSets: 3,\n        defaultReps: 30,\n        defaultWeight: 0,\n        defaultRestBetweenSets: 45,\n        defaultRestAfterExercise: 60,\n        description: '俯卧撑姿势，双膝交替向胸部靠近',\n        icon: 'trail-sign'\n      }\n    ]\n  },\n  \n  // 有氧训练\n  cardio: {\n    name: '有氧',\n    exercises: [\n      {\n        name: '跑步',\n        defaultSets: 1,\n        defaultReps: 1,\n        defaultWeight: 0,\n        defaultRestBetweenSets: 0,\n        defaultRestAfterExercise: 0,\n        description: '在跑步机上或户外进行跑步，持续20-30分钟',\n        icon: 'walk'\n      },\n      {\n        name: '动感单车',\n        defaultSets: 1,\n        defaultReps: 1,\n        defaultWeight: 0,\n        defaultRestBetweenSets: 0,\n        defaultRestAfterExercise: 0,\n        description: '在动感单车上进行骑行，持续20-30分钟',\n        icon: 'bicycle'\n      },\n      {\n        name: '椭圆机',\n        defaultSets: 1,\n        defaultReps: 1,\n        defaultWeight: 0,\n        defaultRestBetweenSets: 0,\n        defaultRestAfterExercise: 0,\n        description: '在椭圆机上进行训练，持续20-30分钟',\n        icon: 'footsteps'\n      },\n      {\n        name: '跳绳',\n        defaultSets: 3,\n        defaultReps: 100,\n        defaultWeight: 0,\n        defaultRestBetweenSets: 60,\n        defaultRestAfterExercise: 90,\n        description: '使用跳绳进行跳跃训练，每组100下',\n        icon: 'pulse'\n      },\n      {\n        name: '划船机',\n        defaultSets: 1,\n        defaultReps: 1,\n        defaultWeight: 0,\n        defaultRestBetweenSets: 0,\n        defaultRestAfterExercise: 0,\n        description: '在划船机上进行划船动作，持续15-20分钟',\n        icon: 'boat'\n      },\n      {\n        name: '高抬腿',\n        defaultSets: 3,\n        defaultReps: 30,\n        defaultWeight: 0,\n        defaultRestBetweenSets: 45,\n        defaultRestAfterExercise: 60,\n        description: '站立，交替将膝盖抬高至腰部',\n        icon: 'footsteps'\n      },\n      {\n        name: '波比跳',\n        defaultSets: 3,\n        defaultReps: 15,\n        defaultWeight: 0,\n        defaultRestBetweenSets: 60,\n        defaultRestAfterExercise: 90,\n        description: '下蹲、俯卧撑、跳起的组合动作',\n        icon: 'rocket'\n      }\n    ]\n  }\n};\n\n// 获取所有分类\nexport const getAllCategories = () => {\n  return Object.keys(exerciseDatabase).map(key => ({\n    id: key,\n    name: exerciseDatabase[key].name\n  }));\n};\n\n// 获取特定分类的所有动作\nexport const getExercisesByCategory = (categoryId) => {\n  if (!exerciseDatabase[categoryId]) {\n    return [];\n  }\n  return exerciseDatabase[categoryId].exercises;\n};\n\n// 获取所有动作的扁平列表\nexport const getAllExercises = () => {\n  const allExercises = [];\n  \n  Object.keys(exerciseDatabase).forEach(categoryId => {\n    const category = exerciseDatabase[categoryId];\n    category.exercises.forEach(exercise => {\n      allExercises.push({\n        ...exercise,\n        category: {\n          id: categoryId,\n          name: category.name\n        }\n      });\n    });\n  });\n  \n  return allExercises;\n};\n\n// 按名称搜索动作\nexport const searchExercisesByName = (query) => {\n  if (!query || query.trim() === '') {\n    return [];\n  }\n  \n  const lowerQuery = query.toLowerCase().trim();\n  return getAllExercises().filter(exercise => \n    exercise.name.toLowerCase().includes(lowerQuery)\n  );\n};\n\nexport default exerciseDatabase;",
  "utils/helpers.js": "import dayjs from 'dayjs';\n\n// 格式化日期\nexport function formatDate(date, format = 'YYYY-MM-DD') {\n  return dayjs(date).format(format);\n}\n\n// 格式化时间\nexport function formatTime(minutes) {\n  const mins = Math.floor(minutes);\n  const secs = Math.floor((minutes - mins) * 60);\n  return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n}\n\n// 格式化秒数为时分秒\nexport function formatSeconds(seconds) {\n  const mins = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n  return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n}\n\n// 获取当前周的日期范围\nexport function getCurrentWeekDates() {\n  const today = dayjs();\n  const weekStart = today.startOf('week');\n  \n  return Array.from({ length: 7 }, (_, i) => {\n    const date = weekStart.add(i, 'day');\n    return {\n      date: date.toDate(),\n      dateString: date.format('YYYY-MM-DD'),\n      day: date.format('DD'),\n      weekday: date.format('ddd'),\n      isToday: date.isSame(today, 'day')\n    };\n  });\n}\n\n// 获取月份的所有日期\nexport function getMonthDates(year, month) {\n  const startDate = dayjs(`${year}-${month}-01`);\n  const daysInMonth = startDate.daysInMonth();\n  const today = dayjs();\n  \n  return Array.from({ length: daysInMonth }, (_, i) => {\n    const date = startDate.add(i, 'day');\n    return {\n      date: date.toDate(),\n      dateString: date.format('YYYY-MM-DD'),\n      day: date.format('D'),\n      weekday: date.format('ddd'),\n      isToday: date.isSame(today, 'day')\n    };\n  });\n}\n\n// 按日期分组健身记录\nexport function groupRecordsByDate(records) {\n  const grouped = {};\n  \n  records.forEach(record => {\n    const dateKey = record.completedAt.split('T')[0];\n    if (!grouped[dateKey]) {\n      grouped[dateKey] = [];\n    }\n    grouped[dateKey].push(record);\n  });\n  \n  return Object.entries(grouped)\n    .map(([date, records]) => ({ date, records }))\n    .sort((a, b) => new Date(b.date) - new Date(a.date));\n}\n\n// 计算健身统计数据\nexport function calculateWorkoutStats(records) {\n  if (!records || records.length === 0) {\n    return {\n      totalWorkouts: 0,\n      totalExercises: 0,\n      averageExercisesPerWorkout: 0,\n      mostFrequentExercise: null,\n      heaviestWeight: 0,\n      totalDuration: 0,\n      averageDuration: 0\n    };\n  }\n\n  // 总健身次数\n  const totalWorkouts = records.length;\n  \n  // 所有练习\n  let allExercises = [];\n  records.forEach(record => {\n    if (record.exercises && Array.isArray(record.exercises)) {\n      allExercises = [...allExercises, ...record.exercises];\n    }\n  });\n  \n  // 总练习次数\n  const totalExercises = allExercises.length;\n  \n  // 每次健身的平均练习数\n  const averageExercisesPerWorkout = totalExercises / totalWorkouts;\n  \n  // 最常做的练习\n  const exerciseCounts = {};\n  allExercises.forEach(exercise => {\n    const name = exercise.name;\n    exerciseCounts[name] = (exerciseCounts[name] || 0) + 1;\n  });\n  \n  let mostFrequentExercise = null;\n  let maxCount = 0;\n  \n  Object.entries(exerciseCounts).forEach(([name, count]) => {\n    if (count > maxCount) {\n      mostFrequentExercise = name;\n      maxCount = count;\n    }\n  });\n  \n  // 最重的重量\n  let heaviestWeight = 0;\n  allExercises.forEach(exercise => {\n    if (exercise.weight && exercise.weight > heaviestWeight) {\n      heaviestWeight = exercise.weight;\n    }\n  });\n  \n  // 总健身时长和平均时长（分钟）\n  let totalDuration = 0;\n  records.forEach(record => {\n    if (record.duration) {\n      totalDuration += record.duration;\n    }\n  });\n  \n  const averageDuration = totalDuration / totalWorkouts;\n  \n  return {\n    totalWorkouts,\n    totalExercises,\n    averageExercisesPerWorkout,\n    mostFrequentExercise,\n    heaviestWeight,\n    totalDuration,\n    averageDuration\n  };\n}\n\n// 生成随机ID\nexport function generateId() {\n  return Math.random().toString(36).substring(2, 15) + \n    Math.random().toString(36).substring(2, 15);\n}\n\n// 深拷贝对象\nexport function deepClone(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n\n// 创建新的练习项\nexport function createNewExercise() {\n  return {\n    id: generateId(),\n    name: '',\n    sets: 3,\n    reps: 10,\n    weight: 0,\n    restBetweenSets: 60, // 秒\n    restAfterExercise: 90 // 秒\n  };\n}\n\n// 创建默认的健身计划\nexport function createDefaultPlan() {\n  return {\n    name: '',\n    description: '',\n    exercises: [createNewExercise()]\n  };\n}\n\n// 计算健身计划的估计时长（分钟）\nexport function calculatePlanDuration(plan) {\n  if (!plan || !plan.exercises || !Array.isArray(plan.exercises)) {\n    return 0;\n  }\n  \n  let totalDuration = 0;\n  \n  plan.exercises.forEach(exercise => {\n    // 每组练习时间（假设每次动作需要5秒）\n    const exerciseTime = exercise.sets * exercise.reps * 5;\n    \n    // 组间休息时间\n    const restBetweenSets = (exercise.sets - 1) * (exercise.restBetweenSets || 60);\n    \n    // 动作后休息时间\n    const restAfterExercise = exercise.restAfterExercise || 90;\n    \n    // 累加到总时间\n    totalDuration += exerciseTime + restBetweenSets + restAfterExercise;\n  });\n  \n  // 转换为分钟并四舍五入到最接近的分钟\n  return Math.round(totalDuration / 60);\n}",
  "utils/i18n.js": "// 国际化翻译文本\nexport const translations = {\n  en: {\n    // 通用\n    common: {\n      loading: 'Loading...',\n      save: 'Save',\n      cancel: 'Cancel',\n      delete: 'Delete',\n      edit: 'Edit',\n      confirm: 'Confirm',\n      back: 'Back',\n      search: 'Search',\n      add: 'Add',\n      done: 'Done',\n      start: 'Start',\n      complete: 'Complete',\n      completed: 'Completed',\n      minutes: 'min',\n      seconds: 'sec',\n      actions: 'Actions',\n    },\n    \n    // 标签栏\n    tabs: {\n      home: 'Home',\n      calendar: 'Calendar',\n      plans: 'Plans',\n      stats: 'Stats',\n    },\n    \n    // 页面标题\n    headers: {\n      fitnessAssistant: 'Fitness Assistant',\n      fitnessCalendar: 'Fitness Calendar',\n      fitnessPlans: 'Fitness Plans',\n      fitnessStats: 'Fitness Stats',\n      planDetail: 'Plan Detail',\n      createPlan: 'Create Plan',\n      editPlan: 'Edit Plan',\n    },\n    \n    // 首页\n    home: {\n      todayOverview: 'Today\\'s Overview',\n      totalPlans: 'Total Plans',\n      streakDays: 'Streak Days',\n      workoutPlans: 'Workout Plans',\n      recentWorkouts: 'Recent Workouts',\n      exercises: 'exercises',\n      noPlans: 'No workout plans yet',\n      createFirst: 'Create your first workout plan and start your fitness journey',\n      createFirstPlan: 'Create First Plan',\n    },\n    \n    // 健身计划\n    plans: {\n      searchPlaceholder: 'Search workout plans',\n      noPlan: 'No workout plans',\n      noMatch: 'No matching plans found',\n      createPlan: 'Create Plan',\n      exerciseList: 'Exercise List',\n      startWorkout: 'Start Workout',\n      confirmDelete: 'Confirm Delete',\n      confirmDeleteMessage: 'Are you sure you want to delete \"{name}\"? This action cannot be undone.',\n      template: 'Template',\n      duplicate: 'Duplicate',\n    },\n    \n    // 创建/编辑计划\n    createPlan: {\n      planName: 'Plan Name',\n      planNamePlaceholder: 'e.g., Full Body Workout',\n      description: 'Description',\n      descriptionPlaceholder: 'Plan description (optional)',\n      targetBodyParts: 'Target Body Parts',\n      addExercise: 'Add Exercise',\n      exerciseName: 'Exercise Name',\n      exerciseNamePlaceholder: 'e.g., Push-ups',\n      sets: 'Sets',\n      reps: 'Reps',\n      weight: 'Weight',\n      weightUnit: 'kg',\n      remove: 'Remove',\n      savePlan: 'Save Plan',\n      updatePlan: 'Update Plan',\n      pleaseEnterName: 'Please enter plan name',\n      pleaseAddExercise: 'Please add at least one exercise',\n    },\n    \n    // 身体部位\n    bodyParts: {\n      chest: 'Chest',\n      back: 'Back',\n      legs: 'Legs',\n      shoulders: 'Shoulders',\n      arms: 'Arms',\n      core: 'Core',\n    },\n    \n    // 健身执行\n    execution: {\n      workoutExecution: 'Workout Execution',\n      currentExercise: 'Current Exercise',\n      nextExercise: 'Next Exercise',\n      set: 'Set',\n      rest: 'Rest',\n      skip: 'Skip',\n      previous: 'Previous',\n      next: 'Next',\n      finishWorkout: 'Finish Workout',\n      congratulations: 'Congratulations!',\n      workoutComplete: 'Workout Completed',\n      totalTime: 'Total Time',\n      totalExercises: 'Total Exercises',\n      backToHome: 'Back to Home',\n      confirmExit: 'Confirm Exit',\n      confirmExitMessage: 'Workout in progress. Are you sure you want to exit?',\n      exitAndSave: 'Exit & Save Progress',\n      continueWorkout: 'Continue Workout',\n    },\n    \n    // 日历\n    calendar: {\n      scheduleWorkout: 'Schedule Workout',\n      selectDate: 'Select Date',\n      selectPlan: 'Select Plan',\n      setReminder: 'Set Reminder',\n      reminderTime: 'Reminder Time',\n      noWorkouts: 'No workouts scheduled',\n      scheduleFirst: 'Schedule your first workout',\n      viewDetails: 'View Details',\n      deleteSchedule: 'Delete Schedule',\n      workoutsScheduled: 'workouts scheduled',\n    },\n    \n    // 统计\n    stats: {\n      workoutStats: 'Workout Statistics',\n      totalWorkouts: 'Total Workouts',\n      thisWeek: 'This Week',\n      thisMonth: 'This Month',\n      longestStreak: 'Longest Streak',\n      days: 'days',\n      workoutHistory: 'Workout History',\n      noRecords: 'No workout records yet',\n      startFirst: 'Complete your first workout to see stats',\n      duration: 'Duration',\n    },\n    \n    // 加载状态\n    loading: {\n      fitnessData: 'Loading fitness data...',\n      planDetails: 'Loading plan details...',\n      plans: 'Loading workout plans...',\n      calendar: 'Loading calendar...',\n      stats: 'Loading statistics...',\n    },\n    \n    // 空状态\n    empty: {\n      noPlans: 'No plans yet',\n      noWorkouts: 'No workouts yet',\n      noRecords: 'No records yet',\n      noTemplates: 'No templates yet',\n    },\n    \n    // 日期格式\n    date: {\n      format: 'YYYY-MM-DD',\n      formatLong: 'MMMM D, YYYY',\n      formatWithTime: 'MMMM D, YYYY HH:mm',\n    },\n  },\n  \n  zh: {\n    // 通用\n    common: {\n      loading: '加载中...',\n      save: '保存',\n      cancel: '取消',\n      delete: '删除',\n      edit: '编辑',\n      confirm: '确认',\n      back: '返回',\n      search: '搜索',\n      add: '添加',\n      done: '完成',\n      start: '开始',\n      complete: '完成',\n      completed: '已完成',\n      minutes: '分钟',\n      seconds: '秒',\n      actions: '操作',\n    },\n    \n    // 标签栏\n    tabs: {\n      home: '首页',\n      calendar: '日历',\n      plans: '计划',\n      stats: '统计',\n    },\n    \n    // 页面标题\n    headers: {\n      fitnessAssistant: '健身助手',\n      fitnessCalendar: '健身日历',\n      fitnessPlans: '健身计划',\n      fitnessStats: '健身统计',\n      planDetail: '计划详情',\n      createPlan: '创建计划',\n      editPlan: '编辑计划',\n    },\n    \n    // 首页\n    home: {\n      todayOverview: '今日概览',\n      totalPlans: '计划总数',\n      streakDays: '连续天数',\n      workoutPlans: '健身计划',\n      recentWorkouts: '最近健身',\n      exercises: '动作',\n      noPlans: '还没有添加健身计划',\n      createFirst: '创建您的第一个健身计划，开始健身之旅',\n      createFirstPlan: '创建第一个计划',\n    },\n    \n    // 健身计划\n    plans: {\n      searchPlaceholder: '搜索健身计划',\n      noPlan: '还没有健身计划',\n      noMatch: '没有找到匹配的计划',\n      createPlan: '创建计划',\n      exerciseList: '动作列表',\n      startWorkout: '开始健身',\n      confirmDelete: '确认删除',\n      confirmDeleteMessage: '确定要删除\"{name}\"吗？此操作无法撤销。',\n      template: '模板',\n      duplicate: '复制',\n    },\n    \n    // 创建/编辑计划\n    createPlan: {\n      planName: '计划名称',\n      planNamePlaceholder: '例如：全身训练',\n      description: '描述',\n      descriptionPlaceholder: '计划描述（可选）',\n      targetBodyParts: '目标部位',\n      addExercise: '添加动作',\n      exerciseName: '动作名称',\n      exerciseNamePlaceholder: '例如：俯卧撑',\n      sets: '组数',\n      reps: '次数',\n      weight: '重量',\n      weightUnit: 'kg',\n      remove: '移除',\n      savePlan: '保存计划',\n      updatePlan: '更新计划',\n      pleaseEnterName: '请输入计划名称',\n      pleaseAddExercise: '请至少添加一个动作',\n    },\n    \n    // 身体部位\n    bodyParts: {\n      chest: '胸部',\n      back: '背部',\n      legs: '腿部',\n      shoulders: '肩部',\n      arms: '手臂',\n      core: '核心',\n    },\n    \n    // 健身执行\n    execution: {\n      workoutExecution: '健身执行',\n      currentExercise: '当前动作',\n      nextExercise: '下个动作',\n      set: '组',\n      rest: '休息',\n      skip: '跳过',\n      previous: '上一个',\n      next: '下一个',\n      finishWorkout: '完成健身',\n      congratulations: '恭喜！',\n      workoutComplete: '健身已完成',\n      totalTime: '总时长',\n      totalExercises: '总动作数',\n      backToHome: '返回首页',\n      confirmExit: '确认退出',\n      confirmExitMessage: '健身进行中，确定要退出吗？',\n      exitAndSave: '退出并保存进度',\n      continueWorkout: '继续健身',\n    },\n    \n    // 日历\n    calendar: {\n      scheduleWorkout: '安排健身',\n      selectDate: '选择日期',\n      selectPlan: '选择计划',\n      setReminder: '设置提醒',\n      reminderTime: '提醒时间',\n      noWorkouts: '没有安排的健身计划',\n      scheduleFirst: '安排您的第一个健身计划',\n      viewDetails: '查看详情',\n      deleteSchedule: '删除安排',\n      workoutsScheduled: '个健身计划',\n    },\n    \n    // 统计\n    stats: {\n      workoutStats: '健身统计',\n      totalWorkouts: '总健身次数',\n      thisWeek: '本周',\n      thisMonth: '本月',\n      longestStreak: '最长连续',\n      days: '天',\n      workoutHistory: '健身历史',\n      noRecords: '还没有健身记录',\n      startFirst: '完成第一次健身以查看统计',\n      duration: '时长',\n    },\n    \n    // 加载状态\n    loading: {\n      fitnessData: '加载健身数据...',\n      planDetails: '加载计划详情...',\n      plans: '加载健身计划...',\n      calendar: '加载日历...',\n      stats: '加载统计数据...',\n    },\n    \n    // 空状态\n    empty: {\n      noPlans: '还没有计划',\n      noWorkouts: '还没有健身记录',\n      noRecords: '还没有记录',\n      noTemplates: '还没有模板',\n    },\n    \n    // 日期格式\n    date: {\n      format: 'YYYY年MM月DD日',\n      formatLong: 'YYYY年MM月DD日',\n      formatWithTime: 'YYYY年MM月DD日 HH:mm',\n    },\n  }\n};\n\n// 检测系统语言\nexport const detectSystemLanguage = () => {\n  if (typeof navigator === 'undefined') return 'en';\n  \n  const language = navigator.language || navigator.userLanguage;\n  \n  // 如果是中文（简体、繁体、香港等），返回 'zh'\n  if (language.startsWith('zh')) {\n    return 'zh';\n  }\n  \n  // 默认返回英文\n  return 'en';\n};\n\n// 获取翻译文本\nexport const getTranslation = (language, key) => {\n  const keys = key.split('.');\n  let value = translations[language];\n  \n  for (const k of keys) {\n    if (value && typeof value === 'object') {\n      value = value[k];\n    } else {\n      return key; // 如果找不到翻译，返回键名\n    }\n  }\n  \n  return value || key;\n};\n\nexport default {\n  translations,\n  detectSystemLanguage,\n  getTranslation,\n};\n",
  "utils/reminderService.js": "import AppSdk from '@morphixai/app-sdk';\nimport dayjs from 'dayjs';\nimport { reportError } from '@morphixai/lib';\n\n/**\n * 提醒服务工具类\n * 用于管理健身提醒功能\n */\nclass ReminderService {\n  /**\n   * 为健身计划创建提醒\n   * @param {Object} workout 健身计划对象\n   * @param {string} workout.id 健身ID\n   * @param {string} workout.date 健身日期\n   * @param {string} workout.name 健身名称\n   * @param {number} minutesBefore 提前多少分钟提醒（默认30分钟）\n   * @param {Object} options 额外选项\n   * @param {string} options.reminderTime 提醒时间（格式：\"HH:mm\"，如 \"09:00\"）\n   * @returns {Promise<Object>} 创建的提醒对象\n   */\n  static async createWorkoutReminder(workout, minutesBefore = 30, options = {}) {\n    try {\n      if (!workout || !workout.date || !workout.id) {\n        throw new Error('无效的健身计划数据');\n      }\n\n      // 获取健身日期\n      let workoutDate = dayjs(workout.date);\n      \n      // 如果有指定提醒时间，则使用指定时间\n      if (options.reminderTime) {\n        const [hours, minutes] = options.reminderTime.split(':').map(Number);\n        workoutDate = workoutDate.hour(hours).minute(minutes).second(0);\n      } else {\n        // 默认设为早上9点\n        workoutDate = workoutDate.hour(9).minute(0).second(0);\n      }\n      \n      // 如果日期已过，则不创建提醒\n      if (workoutDate.isBefore(dayjs())) {\n        console.log('健身日期已过，不创建提醒');\n        return null;\n      }\n      \n      // 计算提醒时间（如果有minutesBefore，则提前minutesBefore分钟）\n      const reminderTime = minutesBefore > 0 ? \n        workoutDate.subtract(minutesBefore, 'minute') : \n        workoutDate;\n      \n      // 创建提醒\n      const reminder = await AppSdk.reminder.createReminder({\n        title: '健身提醒',\n        message: `该开始您的\"${workout.name}\"健身计划了`,\n        sub_title: '健身助手',\n        start_time: reminderTime.valueOf(),\n        page: `/execute/${workout.id}`,\n      });\n      \n      console.log('成功创建健身提醒:', reminder);\n      return reminder;\n    } catch (error) {\n      reportError(error, 'ReminderError', { \n        component: 'ReminderService', \n        method: 'createWorkoutReminder',\n        workoutId: workout?.id \n      });\n      console.error('创建健身提醒失败:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 删除健身提醒\n   * @param {string} reminderId 提醒ID\n   * @returns {Promise<boolean>} 是否成功删除\n   */\n  static async deleteReminder(reminderId) {\n    try {\n      if (!reminderId) return false;\n      \n      const result = await AppSdk.reminder.deleteReminder({ id: reminderId });\n      return result;\n    } catch (error) {\n      reportError(error, 'ReminderError', { \n        component: 'ReminderService', \n        method: 'deleteReminder',\n        reminderId \n      });\n      console.error('删除提醒失败:', error);\n      return false;\n    }\n  }\n\n  /**\n   * 获取用户所有提醒\n   * @returns {Promise<Array>} 提醒列表\n   */\n  static async getAllReminders() {\n    try {\n      const reminders = await AppSdk.reminder.getUserReminders();\n      return reminders || [];\n    } catch (error) {\n      reportError(error, 'ReminderError', { \n        component: 'ReminderService', \n        method: 'getAllReminders' \n      });\n      console.error('获取提醒列表失败:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 更新健身提醒\n   * @param {string} reminderId 提醒ID\n   * @param {Object} workout 更新后的健身计划数据\n   * @param {number} minutesBefore 提前多少分钟提醒\n   * @param {Object} options 额外选项\n   * @param {string} options.reminderTime 提醒时间（格式：\"HH:mm\"，如 \"09:00\"）\n   * @returns {Promise<Object>} 更新后的提醒对象\n   */\n  static async updateWorkoutReminder(reminderId, workout, minutesBefore = 30, options = {}) {\n    try {\n      if (!reminderId || !workout || !workout.date) {\n        throw new Error('无效的提醒或健身计划数据');\n      }\n\n      // 获取健身日期\n      let workoutDate = dayjs(workout.date);\n      \n      // 如果有指定提醒时间，则使用指定时间\n      if (options.reminderTime) {\n        const [hours, minutes] = options.reminderTime.split(':').map(Number);\n        workoutDate = workoutDate.hour(hours).minute(minutes).second(0);\n      } else {\n        // 默认设为早上9点\n        workoutDate = workoutDate.hour(9).minute(0).second(0);\n      }\n      \n      // 计算提醒时间（如果有minutesBefore，则提前minutesBefore分钟）\n      const reminderTime = minutesBefore > 0 ? \n        workoutDate.subtract(minutesBefore, 'minute') : \n        workoutDate;\n      \n      // 更新提醒\n      const updatedReminder = await AppSdk.reminder.updateReminder({\n        id: reminderId,\n        reminder: {\n          title: '健身提醒',\n          message: `该开始您的\"${workout.name}\"健身计划了`,\n          start_time: reminderTime.valueOf(),\n          page: `/execute/${workout.id}`,\n        }\n      });\n      \n      return updatedReminder;\n    } catch (error) {\n      reportError(error, 'ReminderError', { \n        component: 'ReminderService', \n        method: 'updateWorkoutReminder',\n        reminderId,\n        workoutId: workout?.id \n      });\n      console.error('更新健身提醒失败:', error);\n      return null;\n    }\n  }\n}\n\nexport default ReminderService;",
  "utils/store.js": "import { create } from 'zustand';\nimport AppSdk from '@morphixai/app-sdk';\nimport { reportError } from '@morphixai/lib';\nimport ReminderService from './reminderService';\n\n// 集合名称\nconst PLANS_COLLECTION = 'workout_plans';\nconst TEMPLATES_COLLECTION = 'workout_templates';\nconst SCHEDULED_WORKOUTS_COLLECTION = 'scheduled_workouts';\nconst WORKOUT_RECORDS_COLLECTION = 'workout_records';\nconst WORKOUT_PROGRESS_KEY = 'workout_progress';\n\n// 初始化状态\nconst initialState = {\n  plans: [],\n  templates: [],\n  scheduledWorkouts: [],\n  workoutRecords: [],\n  isLoading: false,\n  error: null\n};\n\n// 创建store\nconst useStore = create((set, get) => ({\n  ...initialState,\n\n  // 加载所有数据\n  loadAllData: async () => {\n    try {\n      set({ isLoading: true, error: null });\n      \n      // 并行加载所有数据\n      const [plans, templates, scheduledWorkouts, workoutRecords] = await Promise.all([\n        get().loadPlans(),\n        get().loadTemplates(),\n        get().loadScheduledWorkouts(),\n        get().loadWorkoutRecords()\n      ]);\n      \n      set({ \n        plans,\n        templates,\n        scheduledWorkouts,\n        workoutRecords,\n        isLoading: false \n      });\n      \n      return { plans, templates, scheduledWorkouts, workoutRecords };\n    } catch (error) {\n      set({ error: error.message, isLoading: false });\n      await reportError(error, 'DataLoadError', { function: 'loadAllData' });\n      throw error;\n    }\n  },\n\n  // 加载健身计划\n  loadPlans: async () => {\n    try {\n      set({ isLoading: true });\n      const result = await AppSdk.appData.queryData({\n        collection: PLANS_COLLECTION,\n        query: []\n      });\n      const plans = result || [];\n      set(state => ({ \n        plans,\n        isLoading: false\n      }));\n      return plans;\n    } catch (error) {\n      set({ error: error.message, isLoading: false });\n      await reportError(error, 'DataLoadError', { function: 'loadPlans' });\n      return [];\n    }\n  },\n\n  // 加载模板\n  loadTemplates: async () => {\n    try {\n      set({ isLoading: true });\n      const result = await AppSdk.appData.queryData({\n        collection: TEMPLATES_COLLECTION,\n        query: []\n      });\n      const templates = result || [];\n      set(state => ({ \n        templates,\n        isLoading: false\n      }));\n      return templates;\n    } catch (error) {\n      set({ error: error.message, isLoading: false });\n      await reportError(error, 'DataLoadError', { function: 'loadTemplates' });\n      return [];\n    }\n  },\n\n  // 加载已安排的健身计划\n  loadScheduledWorkouts: async () => {\n    try {\n      set({ isLoading: true });\n      const result = await AppSdk.appData.queryData({\n        collection: SCHEDULED_WORKOUTS_COLLECTION,\n        query: []\n      });\n      const scheduledWorkouts = result || [];\n      set(state => ({ \n        scheduledWorkouts,\n        isLoading: false\n      }));\n      return scheduledWorkouts;\n    } catch (error) {\n      set({ error: error.message, isLoading: false });\n      await reportError(error, 'DataLoadError', { function: 'loadScheduledWorkouts' });\n      return [];\n    }\n  },\n\n  // 加载健身记录\n  loadWorkoutRecords: async () => {\n    try {\n      set({ isLoading: true });\n      const result = await AppSdk.appData.queryData({\n        collection: WORKOUT_RECORDS_COLLECTION,\n        query: []\n      });\n      const workoutRecords = result || [];\n      set(state => ({ \n        workoutRecords,\n        isLoading: false\n      }));\n      return workoutRecords;\n    } catch (error) {\n      set({ error: error.message, isLoading: false });\n      await reportError(error, 'DataLoadError', { function: 'loadWorkoutRecords' });\n      return [];\n    }\n  },\n\n  // 创建健身计划\n  createPlan: async (plan) => {\n    try {\n      set({ isLoading: true });\n      \n      // 确保每个动作的重复次数不超过60\n      if (plan.exercises) {\n        plan.exercises = plan.exercises.map(exercise => ({\n          ...exercise,\n          reps: Math.min(exercise.reps, 60)\n        }));\n      }\n      \n      const newPlan = {\n        ...plan,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      \n      const result = await AppSdk.appData.createData({\n        collection: PLANS_COLLECTION,\n        data: newPlan\n      });\n      \n      set(state => ({ \n        plans: [...state.plans, result],\n        isLoading: false\n      }));\n      \n      return result;\n    } catch (error) {\n      set({ error: error.message, isLoading: false });\n      await reportError(error, 'DataCreateError', { function: 'createPlan' });\n      throw error;\n    }\n  },\n\n  // 更新健身计划\n  updatePlan: async (id, planData) => {\n    try {\n      set({ isLoading: true });\n      \n      // 确保每个动作的重复次数不超过60\n      if (planData.exercises) {\n        planData.exercises = planData.exercises.map(exercise => ({\n          ...exercise,\n          reps: Math.min(exercise.reps, 60)\n        }));\n      }\n      \n      const updatedPlan = {\n        ...planData,\n        updatedAt: new Date().toISOString()\n      };\n      \n      const result = await AppSdk.appData.updateData({\n        collection: PLANS_COLLECTION,\n        id,\n        data: updatedPlan\n      });\n      \n      set(state => ({ \n        plans: state.plans.map(plan => plan.id === id ? result : plan),\n        isLoading: false\n      }));\n      \n      return result;\n    } catch (error) {\n      set({ error: error.message, isLoading: false });\n      await reportError(error, 'DataUpdateError', { function: 'updatePlan' });\n      throw error;\n    }\n  },\n\n  // 删除健身计划\n  deletePlan: async (id) => {\n    try {\n      set({ isLoading: true });\n      \n      await AppSdk.appData.deleteData({\n        collection: PLANS_COLLECTION,\n        id\n      });\n      \n      set(state => ({ \n        plans: state.plans.filter(plan => plan.id !== id),\n        isLoading: false\n      }));\n      \n      return { success: true, id };\n    } catch (error) {\n      set({ error: error.message, isLoading: false });\n      await reportError(error, 'DataDeleteError', { function: 'deletePlan' });\n      throw error;\n    }\n  },\n\n  // 创建模板\n  createTemplate: async (template) => {\n    try {\n      set({ isLoading: true });\n      \n      // 确保每个动作的重复次数不超过60\n      if (template.exercises) {\n        template.exercises = template.exercises.map(exercise => ({\n          ...exercise,\n          reps: Math.min(exercise.reps, 60)\n        }));\n      }\n      \n      const newTemplate = {\n        ...template,\n        isTemplate: true,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      \n      const result = await AppSdk.appData.createData({\n        collection: TEMPLATES_COLLECTION,\n        data: newTemplate\n      });\n      \n      set(state => ({ \n        templates: [...state.templates, result],\n        isLoading: false\n      }));\n      \n      return result;\n    } catch (error) {\n      set({ error: error.message, isLoading: false });\n      await reportError(error, 'DataCreateError', { function: 'createTemplate' });\n      throw error;\n    }\n  },\n\n  // 更新模板\n  updateTemplate: async (id, templateData) => {\n    try {\n      set({ isLoading: true });\n      \n      // 确保每个动作的重复次数不超过60\n      if (templateData.exercises) {\n        templateData.exercises = templateData.exercises.map(exercise => ({\n          ...exercise,\n          reps: Math.min(exercise.reps, 60)\n        }));\n      }\n      \n      const updatedTemplate = {\n        ...templateData,\n        updatedAt: new Date().toISOString()\n      };\n      \n      const result = await AppSdk.appData.updateData({\n        collection: TEMPLATES_COLLECTION,\n        id,\n        data: updatedTemplate\n      });\n      \n      set(state => ({ \n        templates: state.templates.map(template => template.id === id ? result : template),\n        isLoading: false\n      }));\n      \n      return result;\n    } catch (error) {\n      set({ error: error.message, isLoading: false });\n      await reportError(error, 'DataUpdateError', { function: 'updateTemplate' });\n      throw error;\n    }\n  },\n\n  // 删除模板\n  deleteTemplate: async (id) => {\n    try {\n      set({ isLoading: true });\n      \n      await AppSdk.appData.deleteData({\n        collection: TEMPLATES_COLLECTION,\n        id\n      });\n      \n      set(state => ({ \n        templates: state.templates.filter(template => template.id !== id),\n        isLoading: false\n      }));\n      \n      return { success: true, id };\n    } catch (error) {\n      set({ error: error.message, isLoading: false });\n      await reportError(error, 'DataDeleteError', { function: 'deleteTemplate' });\n      throw error;\n    }\n  },\n\n  // 安排健身计划到日历\n  scheduleWorkout: async (scheduleData, reminderOptions = null) => {\n    try {\n      set({ isLoading: true });\n      \n      const newSchedule = {\n        ...scheduleData,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        completed: false\n      };\n      \n      const result = await AppSdk.appData.createData({\n        collection: SCHEDULED_WORKOUTS_COLLECTION,\n        data: newSchedule\n      });\n      \n      // 创建提醒（仅当 reminderOptions 不为 null 时）\n      if (scheduleData.date && reminderOptions) {\n        try {\n          const plan = get().plans.find(p => p.id === scheduleData.planId);\n          \n          // 使用 ReminderService 创建提醒\n          const reminderData = {\n            id: result.id,\n            date: scheduleData.date,\n            name: plan ? plan.name : '健身计划'\n          };\n          \n          // 使用更新后的ReminderService，支持自定义提醒时间\n          const reminderTime = reminderOptions.reminderTime || '09:00'; // 默认早上9点\n          await ReminderService.createWorkoutReminder(\n            reminderData, \n            reminderOptions.minutesBefore || 0, \n            { reminderTime }\n          );\n        } catch (reminderError) {\n          console.error('创建提醒失败:', reminderError);\n          await reportError(reminderError, 'ReminderCreateError', { scheduleId: result.id });\n        }\n      }\n      \n      set(state => ({ \n        scheduledWorkouts: [...state.scheduledWorkouts, result],\n        isLoading: false\n      }));\n      \n      return result;\n    } catch (error) {\n      set({ error: error.message, isLoading: false });\n      await reportError(error, 'DataCreateError', { function: 'scheduleWorkout' });\n      throw error;\n    }\n  },\n\n  // 更新已安排的健身计划\n  updateScheduledWorkout: async (id, scheduleData, reminderOptions = {}) => {\n    try {\n      set({ isLoading: true });\n      \n      const updatedSchedule = {\n        ...scheduleData,\n        updatedAt: new Date().toISOString()\n      };\n      \n      const result = await AppSdk.appData.updateData({\n        collection: SCHEDULED_WORKOUTS_COLLECTION,\n        id,\n        data: updatedSchedule\n      });\n      \n      // 如果更新了日期，同时更新提醒\n      if (scheduleData.date) {\n        try {\n          const allReminders = await ReminderService.getAllReminders();\n          const workoutReminders = allReminders.filter(\n            reminder => reminder.page && reminder.page.includes(`/execute/${id}`)\n          );\n          \n          // 如果找到相关提醒，则更新\n          if (workoutReminders.length > 0) {\n            const plan = get().plans.find(p => p.id === result.planId);\n            \n            // 使用更新后的ReminderService，支持自定义提醒时间\n            const reminderTime = reminderOptions.reminderTime || '09:00'; // 默认早上9点\n            await ReminderService.updateWorkoutReminder(\n              workoutReminders[0].id,\n              {\n                id: result.id,\n                date: scheduleData.date,\n                name: plan ? plan.name : result.name || '健身计划'\n              },\n              reminderOptions.minutesBefore || 0,\n              { reminderTime }\n            );\n          }\n        } catch (reminderError) {\n          console.error('更新提醒失败:', reminderError);\n        }\n      }\n      \n      set(state => ({ \n        scheduledWorkouts: state.scheduledWorkouts.map(\n          schedule => schedule.id === id ? result : schedule\n        ),\n        isLoading: false\n      }));\n      \n      return result;\n    } catch (error) {\n      set({ error: error.message, isLoading: false });\n      await reportError(error, 'DataUpdateError', { function: 'updateScheduledWorkout' });\n      throw error;\n    }\n  },\n\n  // 删除已安排的健身计划\n  deleteScheduledWorkout: async (id) => {\n    try {\n      set({ isLoading: true });\n      \n      await AppSdk.appData.deleteData({\n        collection: SCHEDULED_WORKOUTS_COLLECTION,\n        id\n      });\n      \n      // 删除相关提醒\n      try {\n        const allReminders = await ReminderService.getAllReminders();\n        const workoutReminders = allReminders.filter(\n          reminder => reminder.page && reminder.page.includes(`/execute/${id}`)\n        );\n        \n        // 删除所有相关提醒\n        for (const reminder of workoutReminders) {\n          await ReminderService.deleteReminder(reminder.id);\n        }\n      } catch (reminderError) {\n        console.error('删除提醒失败:', reminderError);\n      }\n      \n      set(state => ({ \n        scheduledWorkouts: state.scheduledWorkouts.filter(schedule => schedule.id !== id),\n        isLoading: false\n      }));\n      \n      return { success: true, id };\n    } catch (error) {\n      set({ error: error.message, isLoading: false });\n      await reportError(error, 'DataDeleteError', { function: 'deleteScheduledWorkout' });\n      throw error;\n    }\n  },\n\n  // 记录健身完成情况\n  recordWorkout: async (recordData) => {\n    try {\n      set({ isLoading: true });\n      \n      // 检查是否已存在相同的健身记录\n      if (recordData.scheduledWorkoutId) {\n        const existingRecords = await AppSdk.appData.queryData({\n          collection: WORKOUT_RECORDS_COLLECTION,\n          query: [\n            { key: 'scheduledWorkoutId', value: recordData.scheduledWorkoutId, operator: 'eq' }\n          ]\n        });\n        \n        // 如果已存在记录，返回现有记录而不是创建新的\n        if (existingRecords && existingRecords.length > 0) {\n          console.log('健身记录已存在，跳过重复保存:', existingRecords[0].id);\n          \n          // 确保安排状态为已完成\n          try {\n            await get().updateScheduledWorkout(recordData.scheduledWorkoutId, { \n              completed: true,\n              completedAt: existingRecords[0].completedAt || new Date().toISOString()\n            });\n          } catch (updateError) {\n            console.error('更新安排状态失败:', updateError);\n          }\n          \n          // 清除本地存储中的健身进度\n          try {\n            localStorage.removeItem(`${WORKOUT_PROGRESS_KEY}_${recordData.scheduledWorkoutId}`);\n          } catch (error) {\n            console.error('清除健身进度失败:', error);\n          }\n          \n          set({ isLoading: false });\n          return existingRecords[0];\n        }\n      }\n      \n      const newRecord = {\n        ...recordData,\n        completedAt: new Date().toISOString(),\n        createdAt: new Date().toISOString()\n      };\n      \n      const result = await AppSdk.appData.createData({\n        collection: WORKOUT_RECORDS_COLLECTION,\n        data: newRecord\n      });\n      \n      // 如果有关联的安排，标记为已完成\n      if (recordData.scheduledWorkoutId) {\n        try {\n          await get().updateScheduledWorkout(recordData.scheduledWorkoutId, { \n            completed: true,\n            completedAt: new Date().toISOString()\n          });\n        } catch (updateError) {\n          console.error('更新安排状态失败:', updateError);\n        }\n      }\n      \n      // 清除本地存储中的健身进度\n      try {\n        localStorage.removeItem(`${WORKOUT_PROGRESS_KEY}_${recordData.scheduledWorkoutId}`);\n      } catch (error) {\n        console.error('清除健身进度失败:', error);\n      }\n      \n      set(state => ({ \n        workoutRecords: [...state.workoutRecords, result],\n        isLoading: false\n      }));\n      \n      return result;\n    } catch (error) {\n      set({ error: error.message, isLoading: false });\n      await reportError(error, 'DataCreateError', { function: 'recordWorkout' });\n      throw error;\n    }\n  },\n\n  // 保存健身进度到本地存储\n  saveWorkoutProgress: (workoutId, progress) => {\n    try {\n      const progressData = {\n        id: workoutId,\n        progress,\n        timestamp: new Date().toISOString()\n      };\n      localStorage.setItem(`${WORKOUT_PROGRESS_KEY}_${workoutId}`, JSON.stringify(progressData));\n      return true;\n    } catch (error) {\n      console.error('保存健身进度失败:', error);\n      return false;\n    }\n  },\n\n  // 获取本地存储的健身进度\n  getWorkoutProgress: (workoutId) => {\n    try {\n      const progressData = localStorage.getItem(`${WORKOUT_PROGRESS_KEY}_${workoutId}`);\n      if (!progressData) return null;\n      return JSON.parse(progressData);\n    } catch (error) {\n      console.error('获取健身进度失败:', error);\n      return null;\n    }\n  },\n\n  // 获取特定日期的健身安排\n  getWorkoutsForDate: (date) => {\n    const dateStr = typeof date === 'string' ? date : date.toISOString().split('T')[0];\n    return get().scheduledWorkouts.filter(workout => \n      workout.date && workout.date.split('T')[0] === dateStr\n    );\n  },\n\n  // 获取特定ID的健身计划\n  getPlanById: (id) => {\n    return get().plans.find(plan => plan.id === id) || null;\n  },\n\n  // 获取特定ID的模板\n  getTemplateById: (id) => {\n    return get().templates.find(template => template.id === id) || null;\n  },\n\n  // 获取特定ID的健身安排\n  getScheduledWorkoutById: (id) => {\n    return get().scheduledWorkouts.find(workout => workout.id === id) || null;\n  },\n\n  // 检查健身记录是否已存在\n  checkWorkoutRecordExists: async (scheduledWorkoutId) => {\n    try {\n      const existingRecords = await AppSdk.appData.queryData({\n        collection: WORKOUT_RECORDS_COLLECTION,\n        query: [\n          { key: 'scheduledWorkoutId', value: scheduledWorkoutId, operator: 'eq' }\n        ]\n      });\n      return existingRecords && existingRecords.length > 0 ? existingRecords[0] : null;\n    } catch (error) {\n      console.error('检查健身记录失败:', error);\n      return null;\n    }\n  },\n\n  // 获取特定健身安排的记录\n  getWorkoutRecordByScheduleId: (scheduledWorkoutId) => {\n    return get().workoutRecords.find(record => record.scheduledWorkoutId === scheduledWorkoutId) || null;\n  },\n\n  // 从模板创建计划\n  createPlanFromTemplate: async (templateId) => {\n    try {\n      const template = get().getTemplateById(templateId);\n      if (!template) throw new Error('模板不存在');\n      \n      const planData = {\n        name: template.name,\n        exercises: template.exercises,\n        description: template.description,\n        fromTemplateId: templateId,\n        createdFromTemplate: true\n      };\n      \n      return await get().createPlan(planData);\n    } catch (error) {\n      await reportError(error, 'TemplateConversionError', { templateId });\n      throw error;\n    }\n  },\n\n  // 将计划保存为模板\n  savePlanAsTemplate: async (planId) => {\n    try {\n      const plan = get().getPlanById(planId);\n      if (!plan) throw new Error('计划不存在');\n      \n      const templateData = {\n        name: `${plan.name} (模板)`,\n        exercises: plan.exercises,\n        description: plan.description,\n        fromPlanId: planId\n      };\n      \n      return await get().createTemplate(templateData);\n    } catch (error) {\n      await reportError(error, 'TemplateSaveError', { planId });\n      throw error;\n    }\n  },\n\n  // 重置状态\n  resetState: () => {\n    set(initialState);\n  }\n}));\n\nexport default useStore;",
  "utils/useLanguage.js": "import { create } from 'zustand';\nimport { detectSystemLanguage, getTranslation } from './i18n';\n\n// 语言管理 Store\nconst useLanguageStore = create((set, get) => ({\n  language: detectSystemLanguage(),\n  \n  // 设置语言\n  setLanguage: (lang) => {\n    set({ language: lang });\n    // 保存到 localStorage\n    try {\n      localStorage.setItem('app_language', lang);\n    } catch (error) {\n      console.error('Failed to save language preference:', error);\n    }\n  },\n  \n  // 初始化语言（从 localStorage 读取）\n  initLanguage: () => {\n    try {\n      const savedLanguage = localStorage.getItem('app_language');\n      if (savedLanguage && (savedLanguage === 'en' || savedLanguage === 'zh')) {\n        set({ language: savedLanguage });\n      } else {\n        // 如果没有保存的语言，使用系统语言\n        const systemLang = detectSystemLanguage();\n        set({ language: systemLang });\n      }\n    } catch (error) {\n      console.error('Failed to load language preference:', error);\n      // 如果读取失败，使用系统语言\n      const systemLang = detectSystemLanguage();\n      set({ language: systemLang });\n    }\n  },\n  \n  // 获取翻译文本\n  t: (key) => {\n    const { language } = get();\n    return getTranslation(language, key);\n  },\n}));\n\n// 自定义 Hook\nexport const useLanguage = () => {\n  const { language, setLanguage, initLanguage, t } = useLanguageStore();\n  \n  return {\n    language,\n    setLanguage,\n    initLanguage,\n    t,\n    isEnglish: language === 'en',\n    isChinese: language === 'zh',\n  };\n};\n\nexport default useLanguage;\n"
}