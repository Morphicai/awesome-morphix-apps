{
  "app.jsx": "import React, { useState, useEffect } from 'react';\nimport { IonApp, IonTabs, IonTab, IonTabBar, IonTabButton, IonIcon, IonContent, IonPage } from '@ionic/react';\nimport { leaf, list, barChart, settings } from 'ionicons/icons';\nimport { PageHeader } from '@morphixai/components';\nimport { reportError } from '@morphixai/lib';\nimport AppSdk from '@morphixai/app-sdk';\nimport TimerTab from './components/TimerTab';\nimport TasksTab from './components/TasksTab';\nimport StatsTab from './components/StatsTab';\nimport SettingsTab from './components/SettingsTab';\nimport Loading from './components/Loading';\nimport ErrorToast from './components/ErrorToast';\nimport { useTimerStore } from './stores/timerStore';\nimport { useTaskStore } from './stores/taskStore';\nimport { t, addLanguageListener } from './utils/i18n';\nimport './styles/global.css';\n\nlet isInitializing = false;\nlet initializationPromise = null;\n\nconst initializeAppData = async () => {\n  if (isInitializing) {\n    return initializationPromise;\n  }\n  \n  isInitializing = true;\n  console.log(\"正在初始化应用数据...\");\n  \n  initializationPromise = (async () => {\n    try {\n      try {\n        const timerData = await AppSdk.appData.getData({\n          collection: \"timer\",\n          id: \"current\"\n        });\n        if (timerData) {\n          console.log(\"已找到timer数据:\", timerData);\n        } else {\n          console.log(\"timer数据为null，正在创建默认设置...\");\n          await AppSdk.appData.createData({\n            collection: \"timer\",\n            data: {\n              id: \"current\",\n              duration: 25 * 60,\n              shortBreak: 5 * 60,\n              longBreak: 15 * 60,\n              cycles: 4,\n              currentCycle: 1,\n              isRunning: false,\n              remainingTime: 25 * 60,\n              mode: \"focus\",\n              completedPomodoros: 0,\n              totalFocusTime: 0,\n              plants: [],\n              lastUpdated: Date.now()\n            }\n          });\n          console.log(\"成功创建timer默认数据\");\n        }\n      } catch (error) {\n        console.log(\"获取timer数据时发生错误，正在创建默认设置...\");\n        await AppSdk.appData.createData({\n          collection: \"timer\",\n          data: {\n            id: \"current\",\n            duration: 25 * 60,\n            shortBreak: 5 * 60,\n            longBreak: 15 * 60,\n            cycles: 4,\n            currentCycle: 1,\n            isRunning: false,\n            remainingTime: 25 * 60,\n            mode: \"focus\",\n            completedPomodoros: 0,\n            totalFocusTime: 0,\n            plants: [],\n            lastUpdated: Date.now()\n          }\n        });\n        console.log(\"成功创建timer默认数据\");\n      }\n      \n      try {\n        const tasksData = await AppSdk.appData.getData({\n          collection: \"tasks\",\n          id: \"list\"\n        });\n        if (tasksData) {\n          console.log(\"已找到tasks数据:\", tasksData);\n        } else {\n          console.log(\"tasks数据为null，正在创建默认设置...\");\n          await AppSdk.appData.createData({\n            collection: \"tasks\",\n            data: {\n              id: \"list\",\n              items: []\n            }\n          });\n          console.log(\"成功创建tasks默认数据\");\n        }\n      } catch (error) {\n        console.log(\"获取tasks数据时发生错误，正在创建默认设置...\");\n        await AppSdk.appData.createData({\n          collection: \"tasks\",\n          data: {\n            id: \"list\",\n            items: []\n          }\n        });\n        console.log(\"成功创建tasks默认数据\");\n      }\n      \n      try {\n        const statsData = await AppSdk.appData.getData({\n          collection: \"stats\",\n          id: \"history\"\n        });\n        if (statsData) {\n          console.log(\"已找到stats数据:\", statsData);\n        } else {\n          console.log(\"stats数据为null，正在创建默认设置...\");\n          await AppSdk.appData.createData({\n            collection: \"stats\",\n            data: {\n              id: \"history\",\n              completed: [],\n              plants: []\n            }\n          });\n          console.log(\"成功创建stats默认数据\");\n        }\n      } catch (error) {\n        console.log(\"获取stats数据时发生错误，正在创建默认设置...\");\n        await AppSdk.appData.createData({\n          collection: \"stats\",\n          data: {\n            id: \"history\",\n            completed: [],\n            plants: []\n          }\n        });\n        console.log(\"成功创建stats默认数据\");\n      }\n      \n      try {\n        const languageData = await AppSdk.appData.getData({\n          collection: \"settings\",\n          id: \"language\"\n        });\n        if (languageData) {\n          console.log(\"已找到language设置:\", languageData);\n        } else {\n          console.log(\"language设置为null，正在创建默认设置...\");\n          await AppSdk.appData.createData({\n            collection: \"settings\",\n            data: {\n              id: \"language\",\n              current: \"ko\",\n              available: [\"ko\", \"zh\"],\n              autoDetect: true\n            }\n          });\n          console.log(\"成功创建language默认设置\");\n        }\n      } catch (error) {\n        console.log(\"获取language设置时发生错误，正在创建默认设置...\");\n        await AppSdk.appData.createData({\n          collection: \"settings\",\n          data: {\n            id: \"language\",\n            current: \"ko\",\n            available: [\"ko\", \"zh\"],\n            autoDetect: true\n          }\n        });\n        console.log(\"成功创建language默认设置\");\n      }\n      \n      try {\n        const timerSettingsData = await AppSdk.appData.getData({\n          collection: \"settings\",\n          id: \"timer\"\n        });\n        if (timerSettingsData) {\n          console.log(\"已找到timer设置:\", timerSettingsData);\n        } else {\n          console.log(\"timer设置为null，正在创建默认设置...\");\n          await AppSdk.appData.createData({\n            collection: \"settings\",\n            data: {\n              id: \"timer\",\n              keepScreenOn: false,\n              backgroundMode: true,\n              notifications: true,\n              sound: true\n            }\n          });\n          console.log(\"成功创建timer默认设置\");\n        }\n      } catch (error) {\n        console.log(\"获取timer设置时发生错误，正在创建默认设置...\");\n        await AppSdk.appData.createData({\n          collection: \"settings\",\n          data: {\n            id: \"timer\",\n            keepScreenOn: false,\n            backgroundMode: true,\n            notifications: true,\n            sound: true\n          }\n        });\n        console.log(\"成功创建timer默认设置\");\n      }\n      \n      try {\n        const themeData = await AppSdk.appData.getData({\n          collection: \"settings\",\n          id: \"theme\"\n        });\n        if (themeData) {\n          console.log(\"已找到theme设置:\", themeData);\n        } else {\n          console.log(\"theme设置为null，正在创建默认设置...\");\n          await AppSdk.appData.createData({\n            collection: \"settings\",\n            data: {\n              id: \"theme\",\n              mode: \"light\",\n              gardenStyle: \"natural\"\n            }\n          });\n          console.log(\"成功创建theme默认设置\");\n        }\n      } catch (error) {\n        console.log(\"获取theme设置时发生错误，正在创建默认设置...\");\n        await AppSdk.appData.createData({\n          collection: \"settings\",\n          data: {\n            id: \"theme\",\n            mode: \"light\",\n            gardenStyle: \"natural\"\n          }\n        });\n        console.log(\"成功创建theme默认设置\");\n      }\n      \n      console.log(\"应用数据初始化完成\");\n    } catch (error) {\n      console.error(\"应用数据初始化失败:\", error);\n      throw error;\n    } finally {\n      isInitializing = false;\n    }\n  })();\n  \n  return initializationPromise;\n};\n\nexport default function App() {\n  const { initializeTimer } = useTimerStore();\n  const { loadTasks } = useTaskStore();\n  const [isDataInitialized, setIsDataInitialized] = useState(false);\n  const [initError, setInitError] = useState(null);\n  const [currentLanguage, setCurrentLanguage] = useState('ko');\n\n  useEffect(() => {\n    const unsubscribe = addLanguageListener((newLanguage) => {\n      setCurrentLanguage(newLanguage);\n    });\n    return unsubscribe;\n  }, []);\n\n  useEffect(() => {\n    const checkDataInitialization = async () => {\n      try {\n        await initializeAppData();\n        \n        console.log('Starting app initialization...');\n        \n        await initializeTimer();\n        console.log('Timer initialized successfully');\n        \n        await loadTasks();\n        console.log('Tasks loaded successfully');\n        \n        setIsDataInitialized(true);\n        console.log('App initialization completed');\n      } catch (error) {\n        console.error('App initialization failed:', error);\n        setInitError(error);\n        await reportError(error, 'JavaScriptError', { \n          component: 'App',\n          context: 'initialization'\n        });\n      }\n    };\n    \n    checkDataInitialization();\n  }, [initializeTimer, loadTasks]);\n  \n  const showLoading = !isDataInitialized && !initError;\n  console.log('showLoading', showLoading);\n  \n  return (\n    <IonApp className=\"ion-palette-light\">\n      <Loading \n        isVisible={showLoading} \n        message={t('loadingGarden')} \n      />\n      \n      {initError ? (\n        <div style={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          height: '100vh',\n          padding: '20px',\n          textAlign: 'center'\n        }}>\n          <h2>{t('error')}</h2>\n          <p>{t('retry')}</p>\n          <button \n            onClick={() => window.location.reload()}\n            style={{\n              padding: '10px 20px',\n              backgroundColor: '#4A7C59',\n              color: 'white',\n              border: 'none',\n              borderRadius: '8px',\n              cursor: 'pointer'\n            }}\n          >\n            {t('retry')}\n          </button>\n        </div>\n      ) : isDataInitialized ? (\n        <IonTabs>\n          <IonTab tab=\"timer\">\n            <IonPage>\n              <PageHeader title={t('appTitle')} />\n              <IonContent>\n                <TimerTab />\n              </IonContent>\n            </IonPage>\n          </IonTab>\n          \n          <IonTab tab=\"tasks\">\n            <TasksTab />\n          </IonTab>\n          \n          <IonTab tab=\"stats\">\n            <IonPage>\n              <PageHeader title={t('gardenStats')} />\n              <IonContent>\n                <StatsTab />\n              </IonContent>\n            </IonPage>\n          </IonTab>\n          \n          <IonTab tab=\"settings\">\n            <SettingsTab />\n          </IonTab>\n\n          <IonTabBar slot=\"bottom\" className=\"garden-tab-bar\">\n            <IonTabButton tab=\"timer\" className=\"tab-button\">\n              <IonIcon icon={leaf} />\n              {t('timer')}\n            </IonTabButton>\n            <IonTabButton tab=\"tasks\" className=\"tab-button\">\n              <IonIcon icon={list} />\n              {t('tasks')}\n            </IonTabButton>\n            <IonTabButton tab=\"stats\" className=\"tab-button\">\n              <IonIcon icon={barChart} />\n              {t('stats')}\n            </IonTabButton>\n            <IonTabButton tab=\"settings\" className=\"tab-button\">\n              <IonIcon icon={settings} />\n              {t('settings')}\n            </IonTabButton>\n          </IonTabBar>\n        </IonTabs>\n      ) : null}\n      \n      <ErrorToast />\n    </IonApp>\n  );\n}",
  "components/ErrorToast.jsx": "import React, { useState, useEffect } from 'react';\nimport { IonToast } from '@ionic/react';\nimport { t } from '../utils/i18n';\n\nlet toastQueue = [];\nlet showToastFunction = null;\n\n// 전역 토스트 표시 함수\nexport const showErrorToast = (message) => {\n  if (showToastFunction) {\n    showToastFunction(message, 'danger');\n  } else {\n    toastQueue.push({ message, color: 'danger' });\n  }\n};\n\nexport const showSuccessToast = (message) => {\n  if (showToastFunction) {\n    showToastFunction(message, 'success');\n  } else {\n    toastQueue.push({ message, color: 'success' });\n  }\n};\n\nexport const showInfoToast = (message) => {\n  if (showToastFunction) {\n    showToastFunction(message, 'primary');\n  } else {\n    toastQueue.push({ message, color: 'primary' });\n  }\n};\n\nconst ErrorToast = () => {\n  const [toasts, setToasts] = useState([]);\n\n  useEffect(() => {\n    // 전역 토스트 함수 등록\n    showToastFunction = (message, color = 'danger') => {\n      const id = Date.now();\n      const newToast = {\n        id,\n        message,\n        color,\n        isOpen: true,\n        duration: color === 'danger' ? 4000 : 3000\n      };\n      \n      setToasts(prev => [...prev, newToast]);\n      \n      // 자동으로 토스트 제거\n      setTimeout(() => {\n        setToasts(prev => prev.filter(toast => toast.id !== id));\n      }, newToast.duration + 500);\n    };\n\n    // 대기 중인 토스트 처리\n    toastQueue.forEach(({ message, color }) => {\n      showToastFunction(message, color);\n    });\n    toastQueue = [];\n\n    return () => {\n      showToastFunction = null;\n    };\n  }, []);\n\n  const handleToastDismiss = (toastId) => {\n    setToasts(prev => prev.filter(toast => toast.id !== toastId));\n  };\n\n  return (\n    <>\n      {toasts.map(toast => (\n        <IonToast\n          key={toast.id}\n          isOpen={toast.isOpen}\n          message={toast.message}\n          duration={toast.duration}\n          color={toast.color}\n          position=\"top\"\n          onDidDismiss={() => handleToastDismiss(toast.id)}\n          buttons={[\n            {\n              text: t('confirmButton'),\n              role: 'cancel'\n            }\n          ]}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default ErrorToast;",
  "components/FlowerAnimation.jsx": "import React, { useEffect, useState } from 'react';\nimport styles from '../styles/FlowerAnimation.module.css';\n\nexport default function FlowerAnimation({ type = 'grow' }) {\n  const [particles, setParticles] = useState([]);\n\n  useEffect(() => {\n    if (type === 'grow') {\n      // Plant growth animation\n      const growthParticles = Array.from({ length: 8 }, (_, i) => ({\n        id: i,\n        emoji: ['🌱', '🌿', '🍃', '🌸'][Math.floor(Math.random() * 4)],\n        x: Math.random() * 100,\n        y: Math.random() * 100,\n        delay: i * 0.2,\n        duration: 2 + Math.random() * 2\n      }));\n      setParticles(growthParticles);\n    } else if (type === 'butterfly') {\n      // Butterfly flying animation\n      const butterflyParticles = Array.from({ length: 6 }, (_, i) => ({\n        id: i,\n        emoji: ['🦋', '🐛', '🌸', '🍃'][Math.floor(Math.random() * 4)],\n        x: Math.random() * 100,\n        y: Math.random() * 100,\n        delay: i * 0.3,\n        duration: 3 + Math.random() * 2\n      }));\n      setParticles(butterflyParticles);\n    }\n\n    const timer = setTimeout(() => {\n      setParticles([]);\n    }, 4000);\n\n    return () => clearTimeout(timer);\n  }, [type]);\n\n  if (particles.length === 0) return null;\n\n  return (\n    <div className={styles.animationContainer}>\n      {particles.map(particle => (\n        <div\n          key={particle.id}\n          className={`${styles.particle} ${styles[type]}`}\n          style={{\n            left: `${particle.x}%`,\n            top: `${particle.y}%`,\n            animationDelay: `${particle.delay}s`,\n            animationDuration: `${particle.duration}s`\n          }}\n        >\n          {particle.emoji}\n        </div>\n      ))}\n      \n      {type === 'grow' && (\n        <div className={styles.growthCenter}>\n          <div className={styles.growthRing}></div>\n          <div className={styles.growthCore}>🌱</div>\n        </div>\n      )}\n      \n      {type === 'butterfly' && (\n        <div className={styles.butterflyTrail}>\n          {Array.from({ length: 12 }, (_, i) => (\n            <div\n              key={i}\n              className={styles.trailDot}\n              style={{ animationDelay: `${i * 0.1}s` }}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}",
  "components/GardenFairy.jsx": "import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { IonButton, IonIcon, IonModal, IonContent, IonHeader, IonToolbar, IonTitle, IonItem, IonInput, IonSpinner, IonChip, IonActionSheet } from '@ionic/react';\nimport { sparkles, chatbubble, send, close, leaf, heart, star, swapHorizontal, copy, checkmark } from 'ionicons/icons';\nimport AppSdk from '@morphixai/app-sdk';\nimport { reportError } from '@morphixai/lib';\nimport { t, getCurrentLanguage } from '../utils/i18n';\nimport styles from '../styles/GardenFairy.module.css';\n\nexport default function GardenFairy({ \n  isTimerRunning, \n  isBreak, \n  completedPomodoros, \n  selectedTask,\n  timeLeft,\n  onTaskSuggestion \n}) {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [fairyMood, setFairyMood] = useState('happy');\n  const [selectedModel, setSelectedModel] = useState('openai/gpt-4o');\n  const [showModelSelector, setShowModelSelector] = useState(false);\n  const [copiedMessageId, setCopiedMessageId] = useState(null);\n  const [showCopyActionSheet, setShowCopyActionSheet] = useState(false);\n  const [selectedMessageForCopy, setSelectedMessageForCopy] = useState(null);\n  const messagesEndRef = useRef(null);\n\n  // 长按处理逻辑（不使用Hook）\n  const createLongPressHandlers = (message) => {\n    let timeout = null;\n    let longPressTriggered = false;\n\n    const start = (event) => {\n      event.preventDefault();\n      timeout = setTimeout(() => {\n        handleLongPress(message);\n        longPressTriggered = true;\n      }, 500);\n    };\n\n    const clear = (event) => {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n      if (longPressTriggered) {\n        event.preventDefault();\n        longPressTriggered = false;\n      }\n    };\n\n    return {\n      onMouseDown: start,\n      onTouchStart: start,\n      onMouseUp: clear,\n      onTouchEnd: clear,\n      onMouseLeave: clear,\n      onContextMenu: (e) => e.preventDefault(), // 防止右键菜单\n    };\n  };\n\n  // 模型配置映射\n  const modelConfigs = {\n    'google/gemma-3-27b-it:free': {\n      name: t('fairyVera'),\n      personality: t('fairyPersonalityVera'),\n      icon: '🌸',\n      model: 'google/gemma-3-27b-it:free'\n    },\n    'openai/gpt-4o': {\n      name: t('fairyLuna'),\n      personality: t('fairyPersonalityLuna'),\n      icon: '🌙',\n      model: 'openai/gpt-4o'\n    },\n    \n    'anthropic/claude-sonnet-4': {\n      name: t('fairySage'),\n      personality: t('fairyPersonalitySage'),\n      icon: '✨',\n      model: 'anthropic/claude-sonnet-4'\n    }\n  };\n\n  // 요정의 기분 상태 업데이트\n  useEffect(() => {\n    if (isTimerRunning && !isBreak) {\n      setFairyMood('focused');\n    } else if (isBreak) {\n      setFairyMood('relaxed');\n    } else if (completedPomodoros > 0) {\n      setFairyMood('proud');\n    } else {\n      setFairyMood('happy');\n    }\n  }, [isTimerRunning, isBreak, completedPomodoros]);\n\n  // 요정 아이콘 선택\n  const getFairyIcon = () => {\n    // 首页始终使用浅肤色精灵图标\n    return '🧚🏻‍♀️';\n  };\n\n  // 요정과 AI 대화\n  const chatWithFairy = async (userMessage) => {\n    try {\n      const contextInfo = {\n        isTimerRunning,\n        isBreak,\n        completedPomodoros,\n        selectedTask: selectedTask?.text || null,\n        timeLeft: Math.floor(timeLeft / 60),\n        fairyMood\n      };\n\n      // AI 시스템 프롬프트 설정 - 다국어 지원\n      const timerStatusText = isTimerRunning ? (isBreak ? t('resting') : t('focusing')) : t('stopped');\n      const selectedTaskText = selectedTask?.text || t('selectedTaskNone');\n      \n      const systemPrompt = `${t('fairySystemPrompt')}\n\n${t('currentSituation')}\n- ${t('timerStatus')}: ${timerStatusText}\n- ${t('completedPomodoros')}: ${completedPomodoros}${t('count')}\n- ${t('currentTask')}: ${selectedTaskText}\n- ${t('remainingTime')}: ${Math.floor(timeLeft / 60)}${t('minutes')}\n- ${t('fairyMood')}: ${fairyMood}\n\n${t('personalityAndTone')}\n- ${t('naturalWarmTone')}\n- ${t('gardenMetaphors')}\n- ${t('shortConciseAnswers')}\n- ${t('useEmojis')}\n- ${t('encourageMotivate')}\n\n${t('situationalResponses')}\n- ${t('focusStart')}\n- ${t('duringFocus')}\n- ${t('duringRest')}\n- ${t('onCompletion')}\n- ${t('counseling')}`;\n\n      const response = await AppSdk.AI.chat({\n        messages: [\n          { role: 'system', content: systemPrompt },\n          { role: 'user', content: userMessage }\n        ],\n        options: {\n          model: modelConfigs[selectedModel].model,\n          temperature: 0.8\n        }\n      });\n\n      // Properly extract string content from AI response\n      let content;\n      if (typeof response === 'string') {\n        content = response;\n      } else if (response && typeof response.content === 'string') {\n        content = response.content;\n      } else if (response && typeof response === 'object') {\n        // If response is an object, try to extract text content\n        content = JSON.stringify(response);\n      } else {\n        content = t('fairyConnectionError');\n      }\n\n      return content;\n    } catch (error) {\n      console.error('AI 대화 오류:', error);\n      await reportError(error, 'JavaScriptError', { component: 'GardenFairy' });\n      return t('fairyConnectionError');\n    }\n  };\n\n  // 메시지 전송\n  const sendMessage = async () => {\n    if (!inputMessage.trim() || isLoading) return;\n\n    const userMessage = inputMessage.trim();\n    setInputMessage('');\n    setIsLoading(true);\n\n    // 사용자 메시지 추가\n    const newMessages = [...messages, {\n      id: Date.now(),\n      type: 'user',\n      content: userMessage,\n      timestamp: new Date()\n    }];\n    setMessages(newMessages);\n\n    try {\n      // AI 응답 받기\n      const fairyResponse = await chatWithFairy(userMessage);\n      \n      // Ensure response is a string for rendering\n      const responseContent = typeof fairyResponse === 'string' \n        ? fairyResponse \n        : t('fairyConnectionError');\n      \n      // 요정 응답 추가\n      setMessages(prev => [...prev, {\n        id: Date.now() + 1,\n        type: 'fairy',\n        content: responseContent,\n        timestamp: new Date()\n      }]);\n    } catch (error) {\n      setMessages(prev => [...prev, {\n        id: Date.now() + 1,\n        type: 'fairy',\n        content: t('fairyErrorMessage'),\n        timestamp: new Date()\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 自动滚动到底部\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  // 消息变化时自动滚动\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, isLoading]);\n\n  // 빠른 질문 버튼들\n  const quickQuestions = [\n    { text: t('focusHelpRequest'), icon: '🌱', message: t('focusHelpMessage') },\n    { text: t('taskOrganizationHelp'), icon: '📝', message: t('taskOrganizationMessage') },\n    { text: t('motivationNeeded'), icon: '✨', message: t('motivationMessage') },\n    { text: t('restRecommendation'), icon: '🦋', message: t('restMessage') }\n  ];\n\n  // 빠른 질문 전송\n  const sendQuickQuestion = async (question) => {\n    setInputMessage('');\n    setIsLoading(true);\n\n    const newMessages = [...messages, {\n      id: Date.now(),\n      type: 'user',\n      content: question.message,\n      timestamp: new Date()\n    }];\n    setMessages(newMessages);\n\n    try {\n      const fairyResponse = await chatWithFairy(question.message);\n      \n      // Ensure response is a string for rendering\n      const responseContent = typeof fairyResponse === 'string' \n        ? fairyResponse \n        : t('fairyConnectionError');\n      \n      setMessages(prev => [...prev, {\n        id: Date.now() + 1,\n        type: 'fairy',\n        content: responseContent,\n        timestamp: new Date()\n      }]);\n    } catch (error) {\n      setMessages(prev => [...prev, {\n        id: Date.now() + 1,\n        type: 'fairy',\n        content: t('fairyErrorMessage'),\n        timestamp: new Date()\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 长按处理\n  const handleLongPress = (message) => {\n    setSelectedMessageForCopy(message);\n    setShowCopyActionSheet(true);\n  };\n\n  // 复制消息到剪贴板\n  const copyMessage = async () => {\n    if (!selectedMessageForCopy) return;\n    \n    try {\n      await navigator.clipboard.writeText(selectedMessageForCopy.content);\n      setCopiedMessageId(selectedMessageForCopy.id);\n      \n      // 3秒后清除复制状态\n      setTimeout(() => {\n        setCopiedMessageId(null);\n      }, 3000);\n    } catch (error) {\n      console.error('复制失败:', error);\n      // 如果现代API失败，尝试使用传统方法\n      try {\n        const textArea = document.createElement('textarea');\n        textArea.value = selectedMessageForCopy.content;\n        document.body.appendChild(textArea);\n        textArea.select();\n        document.execCommand('copy');\n        document.body.removeChild(textArea);\n        \n        setCopiedMessageId(selectedMessageForCopy.id);\n        setTimeout(() => {\n          setCopiedMessageId(null);\n        }, 3000);\n      } catch (fallbackError) {\n        console.error('备用复制方法也失败了:', fallbackError);\n      }\n    } finally {\n      setShowCopyActionSheet(false);\n      setSelectedMessageForCopy(null);\n    }\n  };\n\n  // 자동 인사 메시지\n  useEffect(() => {\n    if (isModalOpen && messages.length === 0) {\n      const getGreeting = () => {\n        const hour = new Date().getHours();\n        if (hour < 12) return t('goodMorningGreeting');\n        if (hour < 18) return t('goodAfternoonGreeting');\n        return t('goodEveningGreeting');\n      };\n\n      setMessages([{\n        id: Date.now(),\n        type: 'fairy',\n        content: getGreeting(),\n        timestamp: new Date()\n      }]);\n    }\n  }, [isModalOpen, messages.length]);\n\n  return (\n    <>\n      {/* 요정 버튼 */}\n      <div className={styles.fairyButton} onClick={() => setIsModalOpen(true)}>\n        <div className={styles.fairyIcon}>\n          <span className={styles.fairyEmoji}>{getFairyIcon()}</span>\n          <div className={styles.sparkleEffect}>\n            <IonIcon icon={sparkles} className={styles.sparkle} />\n          </div>\n        </div>\n        <div className={styles.fairyTooltip}>\n          {t('gardenFairyChat')}\n        </div>\n      </div>\n\n      {/* 대화 모달 */}\n      <IonModal \n        isOpen={isModalOpen} \n        onDidDismiss={() => setIsModalOpen(false)}\n        className={styles.fairyModal}\n      >\n        <div className={styles.modalContainer}>\n          {/* 头部 */}\n          <IonHeader>\n            <IonToolbar className={styles.modalHeader}>\n              <IonTitle className={styles.modalTitle}>\n                <span className={styles.titleIcon}>{modelConfigs[selectedModel].icon}</span>\n                {modelConfigs[selectedModel].name}\n              </IonTitle>\n              \n              {/* 精灵切换按钮 */}\n              <IonButton\n                fill=\"clear\"\n                slot=\"end\"\n                onClick={() => setShowModelSelector(true)}\n                className={styles.headerModelSwitchButton}\n                disabled={isLoading}\n              >\n                <IonIcon icon={swapHorizontal} />\n              </IonButton>\n              \n              <IonButton \n                fill=\"clear\" \n                slot=\"end\" \n                onClick={() => setIsModalOpen(false)}\n                className={styles.closeButton}\n              >\n                <IonIcon icon={close} />\n              </IonButton>\n            </IonToolbar>\n          </IonHeader>\n\n          {/* 消息列表区域 - 可滚动 */}\n          <div className={styles.messagesContainer}>\n          {/* 메시지 목록 */}\n          <div className={styles.messagesList}>\n            {messages.map((message) => (\n              <div \n                key={message.id} \n                className={`${styles.messageItem} ${\n                  message.type === 'user' ? styles.userMessage : styles.fairyMessage\n                }`}\n              >\n                <div className={styles.messageContent}>\n                  {message.type === 'fairy' && (\n                    <span className={styles.messageIcon}>🧚🏻‍♀️</span>\n                  )}\n                  <div \n                    className={`${styles.messageBubble} ${copiedMessageId === message.id ? styles.copied : ''}`}\n                    {...createLongPressHandlers(message)}\n                  >\n                    <p className={styles.messageText}>{message.content}</p>\n                    {copiedMessageId === message.id && (\n                      <IonIcon icon={checkmark} className={styles.copiedIcon} />\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n            \n            {isLoading && (\n              <div className={`${styles.messageItem} ${styles.fairyMessage}`}>\n                <div className={styles.messageContent}>\n                  <span className={styles.messageIcon}>🧚🏻‍♀️</span>\n                  <div className={styles.messageBubble}>\n                    <IonSpinner name=\"dots\" className={styles.loadingSpinner} />\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* 빠른 질문 버튼들 - 消息列表内 */}\n            {messages.length <= 1 && (\n              <div className={styles.quickQuestions}>\n                <h4 className={styles.quickQuestionsTitle}>{t('quickQuestions')}</h4>\n                <div className={styles.quickQuestionButtons}>\n                  {quickQuestions.map((question, index) => (\n                    <IonChip\n                      key={index}\n                      className={styles.quickQuestionChip}\n                      onClick={() => sendQuickQuestion(question)}\n                      disabled={isLoading}\n                    >\n                      <span className={styles.quickQuestionIcon}>{question.icon}</span>\n                      <span className={styles.quickQuestionText}>{question.text}</span>\n                    </IonChip>\n                  ))}\n                </div>\n              </div>\n            )}\n            \n            {/* 用于自动滚动定位的元素 */}\n            <div ref={messagesEndRef} />\n          </div>\n        </div>\n\n          {/* 输入框区域 - 固定在底部 */}\n          <div className={styles.inputContainer}>\n            <IonItem className={styles.inputItem}>\n              <IonInput\n                value={inputMessage}\n                placeholder={t('fairyMessagePlaceholder')}\n                onIonInput={(e) => setInputMessage(e.detail.value)}\n                onKeyPress={(e) => e.key === 'Enter' && sendMessage()}\n                disabled={isLoading}\n                className={styles.textInput}\n              />\n              <IonButton\n                fill=\"clear\"\n                onClick={sendMessage}\n                disabled={!inputMessage.trim() || isLoading}\n                className={styles.sendButton}\n              >\n                <IonIcon icon={send} />\n              </IonButton>\n            </IonItem>\n          </div>\n        </div>\n      </IonModal>\n\n      {/* 复制消息ActionSheet */}\n      <IonActionSheet\n        isOpen={showCopyActionSheet}\n        onDidDismiss={() => {\n          setShowCopyActionSheet(false);\n          setSelectedMessageForCopy(null);\n        }}\n        header={t('messageActions')}\n        buttons={[\n          {\n            text: t('copyMessage'),\n            icon: copy,\n            handler: copyMessage\n          },\n          {\n            text: t('cancel'),\n            role: 'cancel',\n            handler: () => {\n              setShowCopyActionSheet(false);\n              setSelectedMessageForCopy(null);\n            }\n          }\n        ]}\n      />\n\n      {/* 模型选择器 */}\n      <IonActionSheet\n        isOpen={showModelSelector}\n        onDidDismiss={() => setShowModelSelector(false)}\n        header={t('selectFairy')}\n        buttons={[\n          ...Object.entries(modelConfigs).map(([modelKey, config]) => ({\n            text: `${config.icon} ${config.name}`,\n            handler: () => {\n              setSelectedModel(modelKey);\n              setShowModelSelector(false);\n            },\n            cssClass: selectedModel === modelKey ? 'selected-fairy' : ''\n          })),\n          {\n            text: t('cancel'),\n            role: 'cancel',\n            handler: () => {\n              setShowModelSelector(false);\n            }\n          }\n        ]}\n      />\n    </>\n  );\n}",
  "components/LanguageSelector.jsx": "import React, { useState, useEffect } from 'react';\nimport { IonButton, IonIcon, IonPopover, IonContent, IonList, IonItem, IonLabel, IonCheckbox } from '@ionic/react';\nimport { language, checkmark } from 'ionicons/icons';\nimport { getCurrentLanguage, getAvailableLanguages, setLanguage, addLanguageListener, t } from '../utils/i18n';\nimport styles from '../styles/LanguageSelector.module.css';\n\nexport default function LanguageSelector({ className = '' }) {\n  const [currentLang, setCurrentLang] = useState(getCurrentLanguage());\n  const [isOpen, setIsOpen] = useState(false);\n  const [popoverEvent, setPopoverEvent] = useState(undefined);\n  \n  const availableLanguages = getAvailableLanguages();\n\n  useEffect(() => {\n    const unsubscribe = addLanguageListener((newLanguage) => {\n      setCurrentLang(newLanguage);\n    });\n    return unsubscribe;\n  }, []);\n\n  const handleLanguageChange = async (languageCode) => {\n    await setLanguage(languageCode);\n    setIsOpen(false);\n  };\n\n  const openPopover = (e) => {\n    setPopoverEvent(e.nativeEvent);\n    setIsOpen(true);\n  };\n\n  const getCurrentLanguageInfo = () => {\n    return availableLanguages.find(lang => lang.code === currentLang) || availableLanguages[0];\n  };\n\n  const currentLanguageInfo = getCurrentLanguageInfo();\n\n  return (\n    <div className={`${styles.languageSelector} ${className}`}>\n      <IonButton\n        fill=\"outline\"\n        size=\"small\"\n        onClick={openPopover}\n        className={styles.languageButton}\n      >\n        <span className={styles.languageFlag}>{currentLanguageInfo.flag}</span>\n        <span className={styles.languageCode}>\n          {currentLang.toUpperCase()}\n        </span>\n        <IonIcon icon={language} className={styles.languageIcon} />\n      </IonButton>\n\n      <IonPopover\n        isOpen={isOpen}\n        event={popoverEvent}\n        onDidDismiss={() => setIsOpen(false)}\n        showBackdrop={true}\n        className={styles.languagePopover}\n      >\n        <IonContent>\n          <div className={styles.popoverHeader}>\n            <h4 className={styles.popoverTitle}>{t('languageSettings')}</h4>\n          </div>\n          <IonList className={styles.languageList}>\n            {availableLanguages.map((language) => (\n              <IonItem\n                key={language.code}\n                button\n                onClick={() => handleLanguageChange(language.code)}\n                className={`${styles.languageItem} ${\n                  currentLang === language.code ? styles.selected : ''\n                }`}\n              >\n                <div className={styles.languageOption}>\n                  <span className={styles.optionFlag}>{language.flag}</span>\n                  <div className={styles.optionText}>\n                    <div className={styles.optionName}>{language.name}</div>\n                    <div className={styles.optionCode}>\n                      {language.code === 'ko' ? t('koreanLanguage') : t('chineseLanguage')}\n                    </div>\n                  </div>\n                  {currentLang === language.code && (\n                    <IonIcon \n                      icon={checkmark} \n                      className={styles.checkIcon}\n                    />\n                  )}\n                </div>\n              </IonItem>\n            ))}\n          </IonList>\n          <div className={styles.popoverFooter}>\n            <p className={styles.footerText}>\n              {t('currentLanguage')}: {currentLanguageInfo.name}\n            </p>\n          </div>\n        </IonContent>\n      </IonPopover>\n    </div>\n  );\n}",
  "components/Loading.jsx": "import React from 'react';\nimport { t } from '../utils/i18n';\nimport styles from '../styles/Loading.module.css';\n\nexport default function Loading({ isVisible, message = null }) {\n  if (!isVisible) return null;\n\n  return (\n    <div className={styles.overlay}>\n      <div className={styles.container}>\n        <div className={styles.spinner}>\n          <div className={styles.leaf}>🌱</div>\n          <div className={styles.leaf}>🌿</div>\n          <div className={styles.leaf}>🍃</div>\n        </div>\n        <p className={styles.message}>{message || t('preparingGarden')}</p>\n      </div>\n    </div>\n  );\n}\n",
  "components/SettingsTab.jsx": "import React, { useState, useEffect } from 'react';\nimport { IonButton, IonIcon, IonToggle, IonRange, IonItem, IonLabel, IonPage, IonContent, IonModal } from '@ionic/react';\nimport { notifications, download, trash, informationCircle, close } from 'ionicons/icons';\nimport { PageHeader } from '@morphixai/components';\nimport { useTimerStore } from '../stores/timerStore';\nimport { useTaskStore } from '../stores/taskStore';\nimport AppSdk from '@morphixai/app-sdk';\nimport { reportError } from '@morphixai/lib';\nimport { t, addLanguageListener, formatTime } from '../utils/i18n';\nimport { getSetting, getLanguageSetting, getTimerSetting, getThemeSetting, updateSetting } from '../utils/dataHelpers';\nimport LanguageSelector from './LanguageSelector';\nimport Loading from './Loading';\nimport styles from '../styles/SettingsTab.module.css';\n\nexport default function SettingsTab() {\n  const { plants, completedPomodoros, totalFocusTime } = useTimerStore();\n  const { tasks } = useTaskStore();\n  \n  const [notificationsEnabled, setNotificationsEnabled] = useState(true);\n  const [soundEnabled, setSoundEnabled] = useState(true);\n  const [soundVolume, setSoundVolume] = useState(50);\n  const [isExporting, setIsExporting] = useState(false);\n  const [selectedCard, setSelectedCard] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [currentLanguage, setCurrentLanguage] = useState('ko');\n  const [isLoading, setIsLoading] = useState(true);\n  const [settings, setSettings] = useState({});\n  const [animatedValues, setAnimatedValues] = useState({\n    pomodoros: 0,\n    focusTime: 0,\n    completedTasks: 0\n  });\n\n  const handleGoToTimer = () => {\n    // 切换到计时器 Tab\n    const timerTab = document.querySelector('ion-tab-button[tab=\"timer\"]');\n    if (timerTab) {\n      timerTab.click();\n    }\n  };\n\n  useEffect(() => {\n    const unsubscribe = addLanguageListener((newLanguage) => {\n      setCurrentLanguage(newLanguage);\n    });\n    return unsubscribe;\n  }, []);\n\n  useEffect(() => {\n    const loadSettings = async () => {\n      try {\n        setIsLoading(true);\n        const [languageSettings, timerSettings, themeSettings] = await Promise.all([\n          getLanguageSetting(),\n          getTimerSetting(), \n          getThemeSetting()\n        ]);\n        \n        setSettings({\n          language: languageSettings,\n          timer: timerSettings,\n          theme: themeSettings\n        });\n        \n        if (timerSettings) {\n          setNotificationsEnabled(timerSettings.notifications ?? true);\n          setSoundEnabled(timerSettings.sound ?? true);\n        }\n        \n        if (languageSettings) {\n          setCurrentLanguage(languageSettings.current || 'ko');\n        }\n        \n      } catch (error) {\n        await reportError(error, 'JavaScriptError', { \n          component: 'SettingsTab',\n          context: 'loadSettings'\n        });\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    loadSettings();\n  }, []);\n\n  useEffect(() => {\n    const completedTasks = tasks.filter(task => task.completed).length;\n    \n    const animateValue = (start, end, duration, key) => {\n      const startTime = Date.now();\n      const animate = () => {\n        const elapsed = Date.now() - startTime;\n        const progress = Math.min(elapsed / duration, 1);\n        const current = Math.floor(start + (end - start) * progress);\n        \n        setAnimatedValues(prev => ({ ...prev, [key]: current }));\n        \n        if (progress < 1) {\n          requestAnimationFrame(animate);\n        }\n      };\n      animate();\n    };\n\n    setTimeout(() => animateValue(0, completedPomodoros, 1000, 'pomodoros'), 300);\n    setTimeout(() => animateValue(0, totalFocusTime, 1200, 'focusTime'), 600);\n    setTimeout(() => animateValue(0, completedTasks, 800, 'completedTasks'), 900);\n  }, [completedPomodoros, totalFocusTime, tasks]);\n\n  const handleExportData = async () => {\n    setIsExporting(true);\n    try {\n      const exportData = {\n        plants,\n        tasks,\n        stats: {\n          completedPomodoros,\n          totalFocusTime,\n          exportDate: new Date().toISOString()\n        }\n      };\n\n      const dataString = JSON.stringify(exportData, null, 2);\n      const blob = new Blob([dataString], { type: 'application/json' });\n      const base64Data = await new Promise((resolve) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.readAsDataURL(blob);\n      });\n\n      const filename = `nature-garden-pomodoro-${new Date().toISOString().split('T')[0]}.json`;\n      \n      await AppSdk.fileSystem.downloadFile({\n        url: base64Data,\n        filename\n      });\n\n    } catch (error) {\n      await reportError(error, 'JavaScriptError', { component: 'SettingsTab' });\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  const handleClearAllData = async () => {\n    if (window.confirm(t('confirmClearData'))) {\n      try {\n        await AppSdk.appData.deleteData({\n          collection: 'timer',\n          id: 'current'\n        });\n\n        try {\n          await AppSdk.appData.deleteData({\n            collection: 'tasks',\n            id: 'list'\n          });\n        } catch (error) {\n          console.log('tasks/list document not found or already deleted');\n        }\n\n        for (const task of tasks) {\n          try {\n            await AppSdk.appData.deleteData({\n              collection: 'tasks',\n              id: task.id\n            });\n          } catch (error) {\n            console.log(`Failed to delete task ${task.id}:`, error);\n          }\n        }\n\n        try {\n          await AppSdk.appData.deleteData({\n            collection: 'stats',\n            id: 'history'\n          });\n        } catch (error) {\n          console.log('stats/history document not found or already deleted');\n        }\n\n        window.location.reload();\n      } catch (error) {\n        await reportError(error, 'JavaScriptError', { component: 'SettingsTab' });\n      }\n    }\n  };\n\n  const formatTimeNatural = (seconds) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    \n    if (hours > 0) {\n      return t('timeFormat', { hours, minutes });\n    }\n    if (minutes > 0) {\n      return t('minutesOnly', { minutes });\n    }\n    return t('notStarted');\n  };\n\n  const getGardenStartDate = () => {\n    if (plants.length === 0) {\n      return t('startingToday');\n    }\n    const firstPlant = plants.reduce((earliest, plant) => \n      plant.completedAt < earliest.completedAt ? plant : earliest\n    );\n    const startDate = new Date(firstPlant.completedAt);\n    const today = new Date();\n    const diffTime = Math.abs(today - startDate);\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 1) {\n      return t('startedYesterday');\n    } else if (diffDays < 7) {\n      return t('startedDaysAgo', { days: diffDays });\n    } else if (diffDays < 30) {\n      const weeks = Math.floor(diffDays / 7);\n      return t('startedWeeksAgo', { weeks });\n    } else {\n      const months = Math.floor(diffDays / 30);\n      return t('startedMonthsAgo', { months });\n    }\n  };\n\n  const getProgressPercentage = () => {\n    if (completedPomodoros === 0) return 0;\n    const targetPomodoros = 50;\n    return Math.min((completedPomodoros / targetPomodoros) * 100, 100);\n  };\n\n  const getAchievementLevel = () => {\n    if (completedPomodoros >= 100) return { \n      title: t('gardenMaster'), \n      color: '#E91E63', \n      description: t('gardenMasterDesc') \n    };\n    if (completedPomodoros >= 50) return { \n      title: t('skilledGardener'), \n      color: '#9C27B0', \n      description: t('skilledGardenerDesc') \n    };\n    if (completedPomodoros >= 20) return { \n      title: t('growingGardener'), \n      color: '#4CAF50', \n      description: t('growingGardenerDesc') \n    };\n    if (completedPomodoros >= 5) return { \n      title: t('sproutGardener'), \n      color: '#8BC34A', \n      description: t('sproutGardenerDesc') \n    };\n    return { \n      title: t('seedPlanting'), \n      color: '#795548', \n      description: t('seedPlantingDesc') \n    };\n  };\n\n  const getMotivationalMessage = (type, value) => {\n    const messageKeys = {\n      pomodoros: {\n        0: \"plantFirstSeed\",\n        1: \"sproutGrowing\",\n        5: \"flowersBloom\",\n        20: \"gardenInFullBloom\",\n        50: \"amazingGardener\"\n      },\n      tasks: {\n        0: \"completeFirstTask\",\n        1: \"goodStart\",\n        5: \"consistentAchievement\",\n        10: \"excellentExecution\"\n      },\n      time: {\n        0: \"gardenAwaits\",\n        900: \"good15MinFocus\",\n        1800: \"good30MinFocus\",\n        3600: \"excellent1HourFocus\"\n      }\n    };\n\n    const getMessageForValue = (messageObj, val) => {\n      const keys = Object.keys(messageObj).map(Number).sort((a, b) => b - a);\n      for (const key of keys) {\n        if (val >= key) return t(messageObj[key]);\n      }\n      return t(messageObj[0]);\n    };\n\n    return getMessageForValue(messageKeys[type], value);\n  };\n\n  const handleCardClick = (cardData) => {\n    setSelectedCard(cardData);\n    setIsModalOpen(true);\n  };\n\n  if (isLoading) {\n    return (\n      <IonPage>\n        <PageHeader title={t('settingsTitle')} />\n        <IonContent>\n          <Loading \n            isVisible={isLoading} \n            message={t('loadingSettingsText')} \n          />\n        </IonContent>\n      </IonPage>\n    );\n  }\n\n  const completedTasks = tasks.filter(task => task.completed).length;\n  const achievement = getAchievementLevel();\n\n  const gardenCards = [\n    {\n      id: 'focus-sessions',\n      icon: '🌱',\n      title: t('plantedSeeds'),\n      subtitle: t('focusSessions'),\n      value: animatedValues.pomodoros,\n      realValue: completedPomodoros,\n      description: t('completedPomodoroSessions'),\n      message: getMotivationalMessage('pomodoros', completedPomodoros),\n      progress: getProgressPercentage(),\n      details: {\n        total: completedPomodoros,\n        today: Math.min(completedPomodoros, 3),\n        thisWeek: Math.min(completedPomodoros, 15),\n        target: 50,\n        streak: Math.min(completedPomodoros, 7)\n      }\n    },\n    {\n      id: 'grown-sprouts',\n      icon: '🌿',\n      title: t('grownSprouts'),\n      subtitle: t('completedPomodoros'),\n      value: animatedValues.pomodoros,\n      realValue: completedPomodoros,\n      description: t('successfulFocusTime'),\n      message: completedPomodoros > 0 ? t('beautifulSprouts', { count: completedPomodoros }) : t('growFirstSprout'),\n      progress: (completedPomodoros / 25) * 100,\n      details: {\n        efficiency: completedPomodoros > 0 ? Math.min(95, 70 + completedPomodoros * 2) : 0,\n        avgSession: 25,\n        bestStreak: Math.min(completedPomodoros, 10),\n        totalDays: Math.min(Math.ceil(completedPomodoros / 3), 30)\n      }\n    },\n    {\n      id: 'bloomed-flowers',\n      icon: '🌸',\n      title: t('bloomedFlowers'),\n      subtitle: t('completedTasks'),\n      value: animatedValues.completedTasks,\n      realValue: completedTasks,\n      description: t('achievedTasks'),\n      message: getMotivationalMessage('tasks', completedTasks),\n      progress: tasks.length > 0 ? (completedTasks / tasks.length) * 100 : 0,\n      details: {\n        completed: completedTasks,\n        pending: tasks.length - completedTasks,\n        completionRate: tasks.length > 0 ? Math.round((completedTasks / tasks.length) * 100) : 0,\n        productivity: completedTasks > 0 ? t('high') : t('startingStage')\n      }\n    },\n    {\n      id: 'butterfly-rest',\n      icon: '🦋',\n      title: t('butterflyRest'),\n      subtitle: t('restTime'),\n      value: Math.floor(animatedValues.focusTime / 5),\n      realValue: Math.floor(totalFocusTime / 5),\n      description: t('healthyRestPattern'),\n      message: totalFocusTime > 0 ? t('balancedRest') : t('restIsImportant'),\n      progress: Math.min((Math.floor(totalFocusTime / 5) / 60) * 100, 100),\n      details: {\n        totalBreaks: Math.floor(totalFocusTime / 1500),\n        avgBreakTime: 5,\n        restQuality: totalFocusTime > 0 ? t('good') : t('measuring'),\n        balance: totalFocusTime > 0 ? t('balanced') : t('startingStage')\n      }\n    },\n    {\n      id: 'garden-time',\n      icon: '🌺',\n      title: t('gardenTime'),\n      subtitle: t('recordedTime'),\n      value: Math.floor(animatedValues.focusTime / 60),\n      realValue: Math.floor(totalFocusTime / 60),\n      description: t('totalFocusTime'),\n      message: getMotivationalMessage('time', totalFocusTime),\n      progress: Math.min((totalFocusTime / 18000) * 100, 100),\n      details: {\n        totalMinutes: Math.floor(totalFocusTime / 60),\n        totalHours: Math.floor(totalFocusTime / 3600),\n        avgDaily: Math.floor(totalFocusTime / Math.max(1, Math.ceil(completedPomodoros / 3)) / 60),\n        focusQuality: totalFocusTime > 3600 ? t('excellent') : totalFocusTime > 1800 ? t('good') : t('startingStage')\n      }\n    },\n    {\n      id: 'gardener-level',\n      icon: '🌳',\n      title: t('gardenerLevel'),\n      subtitle: t('consecutiveDays'),\n      value: Math.min(completedPomodoros, 30),\n      realValue: Math.min(completedPomodoros, 30),\n      description: t('consistentGrowthRecord'),\n      message: completedPomodoros > 7 ? t('becomingSteadyGardener') : t('growDailySlowly'),\n      progress: Math.min((completedPomodoros / 30) * 100, 100),\n      details: {\n        currentStreak: Math.min(completedPomodoros, 15),\n        bestStreak: Math.min(completedPomodoros, 20),\n        level: Math.floor(completedPomodoros / 10) + 1,\n        nextLevelIn: 10 - (completedPomodoros % 10)\n      }\n    }\n  ];\n\n  return (\n    <IonPage>\n      <PageHeader title={t('settingsTitle')} />\n      <IonContent>\n        <div className={styles.container}>\n          <div className=\"garden-card\">\n            <h3 className=\"gradient-text\">{t('appInfo')}</h3>\n            <div className={styles.appInfo}>\n              <p className={styles.appDescription}>\n                {t('appDescription')}\n              </p>\n              <div className={styles.version}>{t('version')}</div>\n            </div>\n          </div>\n\n          <div className=\"garden-card\">\n            <h3 className=\"gradient-text\">🌍 {t('languageSettings')}</h3>\n            <div className={styles.languageSection}>\n              <div className={styles.languageInfo}>\n                <p className={styles.languageDescription}>\n                  {currentLanguage === 'ko' \n                    ? t('changeLanguageDescription') \n                    : t('changeLanguageDescription')}\n                </p>\n                <div className={styles.currentLanguageDisplay}>\n                  <span className={styles.currentLanguageLabel}>{t('currentLanguage')}:</span>\n                  <span className={styles.currentLanguageValue}>\n                    {currentLanguage === 'ko' ? `🇰🇷 ${t('koreanLanguage')}` : `🇨🇳 ${t('chineseLanguage')}`}\n                  </span>\n                </div>\n              </div>\n              <div className={styles.languageSelectorContainer}>\n                <LanguageSelector />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"garden-card\">\n            <h3 className=\"gradient-text\">🌺 {t('myGardenDiary')}</h3>\n            \n            <div className={styles.achievementBadge}>\n              <span className={styles.achievementIcon}>{achievement.title.split(' ')[0]}</span>\n              <div className={styles.achievementText}>\n                <div className={styles.achievementTitle}>{achievement.title.split(' ').slice(1).join(' ')}</div>\n                <div className={styles.achievementSubtitle}>{achievement.description}</div>\n              </div>\n            </div>\n\n            <div className={styles.todaySection}>\n              <h4 className={styles.sectionTitle}>📊 {t('todayAchievements')}</h4>\n              <div className={styles.todayStats}>\n                <div className={styles.todayStat}>\n                  <span className={styles.todayIcon}>🌱</span>\n                  <span className={styles.todayValue}>{Math.min(completedPomodoros, 3)}{t('count')}</span>\n                  <span className={styles.todayLabel}>{t('focusSessions')}</span>\n                </div>\n                <div className={styles.todayStat}>\n                  <span className={styles.todayIcon}>🌸</span>\n                  <span className={styles.todayValue}>{Math.min(completedTasks, 5)}{t('count')}</span>\n                  <span className={styles.todayLabel}>{t('completedTasks')}</span>\n                </div>\n                <div className={styles.todayStat}>\n                  <span className={styles.todayIcon}>⏰</span>\n                  <span className={styles.todayValue}>{Math.floor(Math.min(totalFocusTime, 7200) / 60)}{t('minutes')}</span>\n                  <span className={styles.todayLabel}>{t('focusTime')}</span>\n                </div>\n              </div>\n              <div className={styles.todayMessage}>\n                {completedPomodoros > 0 ? t('keepBeautifyingGarden') : t('plantFirstSeed')}\n              </div>\n            </div>\n\n            <div className={styles.gardenStatsGrid}>\n              {gardenCards.map((card, index) => (\n                <div \n                  key={card.id}\n                  className={`${styles.gardenStatCard} ${styles.interactive}`}\n                  onClick={() => handleCardClick(card)}\n                  style={{ animationDelay: `${index * 0.1}s` }}\n                >\n                  <div className={styles.cardHeader}>\n                    <div className={styles.statIcon}>{card.icon}</div>\n                    <IonIcon \n                      icon={informationCircle} \n                      className={styles.infoIcon}\n                    />\n                  </div>\n                  \n                  <div className={styles.statContent}>\n                    <div className={styles.statTitle}>{card.title}</div>\n                    <div className={styles.statSubtitle}>{card.subtitle}</div>\n                    \n                    <div className={styles.statValue}>\n                      {card.realValue === 0 ? (\n                        <span className={styles.emptyState}>{t('noneYet')}</span>\n                      ) : (\n                        <span className={styles.countUp}>{card.value}</span>\n                      )}\n                    </div>\n\n                    {card.progress > 0 && (\n                      <div className={styles.progressContainer}>\n                        <div className={styles.progressBar}>\n                          <div \n                            className={styles.progressFill} \n                            style={{ width: `${Math.min(card.progress, 100)}%` }}\n                          ></div>\n                        </div>\n                        <span className={styles.progressText}>{Math.round(card.progress)}%</span>\n                      </div>\n                    )}\n\n                    <div className={styles.encouragement}>{card.message}</div>\n                  </div>\n\n                  <div className={styles.cardGlow}></div>\n                </div>\n              ))}\n            </div>\n\n            {completedPomodoros === 0 && (\n              <div className={styles.emptyGardenMessage}>\n                <div className={styles.emptyGardenIcon}>🌱</div>\n                <h4>{t('noSeedsPlanted')}</h4>\n                <p>{t('startTimerMessage')}</p>\n                <div \n                  className={styles.startButton}\n                  onClick={handleGoToTimer}\n                >\n                  <span>{t('startFromTimerTab')} →</span>\n                </div>\n              </div>\n            )}\n\n            <div className={styles.motivationalQuotes}>\n              <div className={styles.quote}>\n                <span className={styles.quoteIcon}>🌿</span>\n                <span className={styles.quoteText}>\n                  {completedPomodoros > 20 ? t('gardenGrowingLush') :\n                   completedPomodoros > 5 ? t('steadyEffortBloomsFlowers') :\n                   t('growSlowlyButSteadily')}\n                </span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"garden-card\">\n            <h3 className=\"gradient-text\">{t('gardenPreview')}</h3>\n            <div className={styles.gardenPreview}>\n              {plants.length === 0 ? (\n                <div className={styles.emptyGarden}>\n                  <span className={styles.seedling}>🌱</span>\n                  <p>{t('noPlants')}</p>\n                  <p>{t('completeFirstPomodoro')}</p>\n                </div>\n              ) : (\n                <div className={styles.plantGarden}>\n                  {plants.slice(-20).map((plant, index) => {\n                    const plantEmojis = {\n                      seedling: '🌱',\n                      flower: '🌿',\n                      fruit: '🌸',\n                      tree: '🌳'\n                    };\n                    return (\n                      <span \n                        key={plant.id} \n                        className={styles.gardenPlant}\n                        style={{ animationDelay: `${index * 0.1}s` }}\n                      >\n                        {plantEmojis[plant.type] || '🌱'}\n                      </span>\n                    );\n                  })}\n                  {plants.length > 20 && (\n                    <div className={styles.morePlants}>\n                      +{plants.length - 20}{t('morePlants')}\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n\n          <IonModal isOpen={isModalOpen} onDidDismiss={() => setIsModalOpen(false)}>\n            <div className={styles.modalContent}>\n              <div className={styles.modalHeader}>\n                <h3>{selectedCard?.icon} {selectedCard?.title}</h3>\n                <IonButton \n                  fill=\"clear\" \n                  onClick={() => setIsModalOpen(false)}\n                  className={styles.closeButton}\n                >\n                  <IonIcon icon={close} />\n                </IonButton>\n              </div>\n              \n              {selectedCard && (\n                <div className={styles.modalBody}>\n                  <div className={styles.modalStats}>\n                    <div className={styles.modalMainStat}>\n                      <span className={styles.modalMainValue}>{selectedCard.realValue}</span>\n                      <span className={styles.modalMainLabel}>{selectedCard.subtitle}</span>\n                    </div>\n                    \n                    <div className={styles.modalDetailStats}>\n                      {Object.entries(selectedCard.details).map(([key, value]) => (\n                        <div key={key} className={styles.modalDetailStat}>\n                          <span className={styles.modalDetailLabel}>\n                            {t(`detail_${key}`, key)}\n                          </span>\n                          <span className={styles.modalDetailValue}>\n                            {typeof value === 'number' ? \n                              (key.includes('Rate') ? `${value}%` : value) : \n                              value}\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                  \n                  <div className={styles.modalMessage}>\n                    <p>{selectedCard.message}</p>\n                  </div>\n                </div>\n              )}\n            </div>\n          </IonModal>\n        </div>\n      </IonContent>\n    </IonPage>\n  );\n}",
  "components/StatsTab.jsx": "import React, { useState, useEffect } from 'react';\nimport { IonSegment, IonSegmentButton, IonLabel, IonContent } from '@ionic/react';\nimport { useTimerStore } from '../stores/timerStore';\nimport { useTaskStore } from '../stores/taskStore';\nimport { t } from '../utils/i18n';\nimport styles from '../styles/StatsTab.module.css';\n\nexport default function StatsTab() {\n  const { plants, getTodayStats } = useTimerStore();\n  const { getTaskStats } = useTaskStore();\n  const [selectedPeriod, setSelectedPeriod] = useState('today');\n  \n  const timerStats = getTodayStats();\n  const taskStats = getTaskStats();\n\n  // Calculate weekly stats\n  const getWeeklyStats = () => {\n    const now = new Date();\n    const weekStart = new Date(now);\n    weekStart.setDate(now.getDate() - 6);\n    weekStart.setHours(0, 0, 0, 0);\n\n    const weeklyPlants = plants.filter(plant => \n      plant.completedAt >= weekStart.getTime()\n    );\n\n    return {\n      pomodoros: weeklyPlants.length,\n      focusTime: weeklyPlants.length * 25 * 60,\n      days: 7\n    };\n  };\n\n  // Calculate monthly stats\n  const getMonthlyStats = () => {\n    const now = new Date();\n    const monthStart = new Date(now.getFullYear(), now.getMonth(), 1);\n    \n    const monthlyPlants = plants.filter(plant => \n      plant.completedAt >= monthStart.getTime()\n    );\n\n    return {\n      pomodoros: monthlyPlants.length,\n      focusTime: monthlyPlants.length * 25 * 60,\n      days: now.getDate()\n    };\n  };\n\n  const getCurrentStats = () => {\n    switch (selectedPeriod) {\n      case 'today':\n        return {\n          pomodoros: timerStats.todayPomodoros,\n          focusTime: timerStats.todayFocusTime,\n          label: t('todayGardenLabel')\n        };\n      case 'week':\n        const weekStats = getWeeklyStats();\n        return {\n          pomodoros: weekStats.pomodoros,\n          focusTime: weekStats.focusTime,\n          label: t('weeklyGrowthLabel')\n        };\n      case 'month':\n        const monthStats = getMonthlyStats();\n        return {\n          pomodoros: monthStats.pomodoros,\n          focusTime: monthStats.focusTime,\n          label: t('monthlyFlowerbedLabel')\n        };\n      case 'total':\n        return {\n          pomodoros: timerStats.totalPomodoros,\n          focusTime: timerStats.totalFocusTime,\n          label: t('totalGardenStatusLabel')\n        };\n      default:\n        return {\n          pomodoros: 0,\n          focusTime: 0,\n          label: t('todayGardenLabel')\n        };\n    }\n  };\n\n  const currentStats = getCurrentStats();\n\n  const formatTime = (seconds) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    \n    if (hours > 0) {\n      return t('timeFormat', { hours, minutes });\n    }\n    return t('minutesFormat', { minutes });\n  };\n\n  const getPlantTypeStats = () => {\n    const plantCounts = plants.filter(plant => plant).reduce((acc, plant) => {\n      acc[plant.type] = (acc[plant.type] || 0) + 1;\n      return acc;\n    }, {});\n\n    const plantTypes = [\n      { type: 'seedling', emoji: '🌱', name: t('plantedSprouts') },\n      { type: 'flower', emoji: '🌿', name: t('grownLeaves') },\n      { type: 'fruit', emoji: '🌸', name: t('bloomedFlowers') },\n      { type: 'tree', emoji: '🌳', name: t('grownTrees') }\n    ];\n\n    return plantTypes.map(plant => ({\n      ...plant,\n      count: plantCounts[plant.type] || 0\n    }));\n  };\n\n  const plantTypeStats = getPlantTypeStats();\n\n  // Get daily focus pattern for the last 7 days\n  const getDailyPattern = () => {\n    const days = [];\n    const now = new Date();\n    \n    for (let i = 6; i >= 0; i--) {\n      const date = new Date(now);\n      date.setDate(now.getDate() - i);\n      date.setHours(0, 0, 0, 0);\n      \n      const dayPlants = plants.filter(plant => {\n        const plantDate = new Date(plant.completedAt);\n        plantDate.setHours(0, 0, 0, 0);\n        return plantDate.getTime() === date.getTime();\n      });\n      \n      days.push({\n        date: date.toLocaleDateString('ko-KR', { weekday: 'short' }),\n        pomodoros: dayPlants.length,\n        focusTime: dayPlants.length * 25 * 60\n      });\n    }\n    \n    return days;\n  };\n\n  const dailyPattern = getDailyPattern();\n  const maxDailyPomodoros = Math.max(...dailyPattern.map(d => d.pomodoros), 1);\n\n  return (\n    <IonContent style={{ '--background': '#FFFFFF' }}>\n      <div className={styles.container}>\n        {/* Period Selector */}\n        <div className={styles.gardenCard}>\n          <h3 className={styles.cardTitle}>🌺 {t('periodSelection')}</h3>\n          <IonSegment \n            value={selectedPeriod} \n            onIonChange={(e) => setSelectedPeriod(e.detail.value)}\n            className={styles.periodSelector}\n          >\n            <IonSegmentButton value=\"today\">\n              <IonLabel>{t('todayLabel')}</IonLabel>\n            </IonSegmentButton>\n            <IonSegmentButton value=\"week\">\n              <IonLabel>{t('weekLabel')}</IonLabel>\n            </IonSegmentButton>\n            <IonSegmentButton value=\"month\">\n              <IonLabel>{t('monthLabel')}</IonLabel>\n            </IonSegmentButton>\n            <IonSegmentButton value=\"total\">\n              <IonLabel>{t('totalLabel')}</IonLabel>\n            </IonSegmentButton>\n          </IonSegment>\n        </div>\n\n        {/* Main Stats */}\n        <div className={styles.gardenCard}>\n          <h3 className={styles.cardTitle}>🌻 {currentStats.label} {t('currentStatus')}</h3>\n          <div className={styles.statsGrid}>\n            <div className={styles.statCard}>\n              <div className={styles.statIcon}>🌱</div>\n              <div className={styles.statContent}>\n                <div className={styles.statNumber}>{currentStats.pomodoros}</div>\n                <div className={styles.statLabel}>{t('plantedSeeds')}</div>\n              </div>\n            </div>\n            <div className={styles.statCard}>\n              <div className={styles.statIcon}>⏰</div>\n              <div className={styles.statContent}>\n                <div className={styles.statNumber}>{formatTime(currentStats.focusTime)}</div>\n                <div className={styles.statLabel}>{t('focusedTime')}</div>\n              </div>\n            </div>\n            <div className={styles.statCard}>\n              <div className={styles.statIcon}>✅</div>\n              <div className={styles.statContent}>\n                <div className={styles.statNumber}>{taskStats.completed}</div>\n                <div className={styles.statLabel}>{t('completedTodos')}</div>\n              </div>\n            </div>\n            <div className={styles.statCard}>\n              <div className={styles.statIcon}>📈</div>\n              <div className={styles.statContent}>\n                <div className={styles.statNumber}>{taskStats.completionRate}%</div>\n                <div className={styles.statLabel}>{t('completionRate')}</div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Daily Pattern */}\n        <div className={styles.gardenCard}>\n          <h3 className={styles.cardTitle}>🌿 {t('recent7DaysGrowth')}</h3>\n          <div className={styles.dailyChart}>\n            {dailyPattern.map((day, index) => (\n              <div key={index} className={styles.dayColumn}>\n                <div className={styles.dayBar}>\n                  <div \n                    className={styles.dayBarFill}\n                    style={{ \n                      height: `${(day.pomodoros / maxDailyPomodoros) * 100}%` \n                    }}\n                  />\n                </div>\n                <div className={styles.dayLabel}>{day.date}</div>\n                <div className={styles.dayValue}>\n                  {day.pomodoros > 0 ? '🌸' : '🌱'} {day.pomodoros}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Plant Collection */}\n        <div className={styles.gardenCard}>\n          <h3 className={styles.cardTitle}>🌺 {t('myPlantCollection')}</h3>\n          <div className={styles.plantCollection}>\n            {plantTypeStats.map((plant) => (\n              <div key={plant.type} className={styles.plantStat}>\n                <div className={styles.plantEmoji}>{plant.emoji}</div>\n                <div className={styles.plantInfo}>\n                  <div className={styles.plantName}>{plant.name}</div>\n                  <div className={styles.plantCount}>{plant.count}{t('countUnit')}</div>\n                </div>\n                <div className={styles.plantProgress}>\n                  <div \n                    className={styles.plantProgressFill}\n                    style={{ \n                      width: `${plants.length > 0 ? (plant.count / plants.length) * 100 : 0}%` \n                    }}\n                  />\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Achievement Summary */}\n        <div className={styles.gardenCard}>\n          <h3 className={styles.cardTitle}>🏆 {t('gardenAchievementSummary')}</h3>\n          <div className={styles.achievements}>\n            <div className={styles.achievement}>\n              <span className={styles.achievementIcon}>🌻</span>\n              <div className={styles.achievementText}>\n                <div className={styles.achievementTitle}>{t('totalFocusTimeLabel')}</div>\n                <div className={styles.achievementValue}>\n                  {formatTime(timerStats.totalFocusTime)}\n                </div>\n              </div>\n            </div>\n            \n            <div className={styles.achievement}>\n              <span className={styles.achievementIcon}>🌱</span>\n              <div className={styles.achievementText}>\n                <div className={styles.achievementTitle}>{t('grownPlantsLabel')}</div>\n                <div className={styles.achievementValue}>\n                  {plants.length}{t('countUnit')}\n                </div>\n              </div>\n            </div>\n            \n            <div className={styles.achievement}>\n              <span className={styles.achievementIcon}>🌸</span>\n              <div className={styles.achievementText}>\n                <div className={styles.achievementTitle}>{t('completedTasksLabel')}</div>\n                <div className={styles.achievementValue}>\n                  {taskStats.completed}{t('countUnit')}\n                </div>\n              </div>\n            </div>\n            \n            <div className={styles.achievement}>\n              <span className={styles.achievementIcon}>🦋</span>\n              <div className={styles.achievementText}>\n                <div className={styles.achievementTitle}>{t('averageCompletionLabel')}</div>\n                <div className={styles.achievementValue}>\n                  {taskStats.completionRate}%\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Empty State */}\n        {plants.length === 0 && (\n          <div className={styles.gardenCard}>\n            <div className={styles.emptyState}>\n              <div className={styles.emptyIcon}>🌱</div>\n              <h3 className={styles.emptyTitle}>{t('noSeedsPlantedTitle')}</h3>\n              <p className={styles.emptyMessage}>\n                {t('startTimerPlantFirstSeed')}<br/>\n                {t('beautifulGardenGrows')}\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n    </IonContent>\n  );\n}",
  "components/TasksTab.jsx": "import React, { useState, useEffect } from 'react';\nimport { IonButton, IonIcon, IonInput, IonSelect, IonSelectOption, IonCheckbox, IonSpinner, IonItem, IonLabel, IonFab, IonFabButton, IonPage, IonContent } from '@ionic/react';\nimport { add, trash, create, checkmark, close } from 'ionicons/icons';\nimport { PageHeader } from '@morphixai/components';\nimport { useTaskStore } from '../stores/taskStore';\nimport { t } from '../utils/i18n';\nimport styles from '../styles/TasksTab.module.css';\n\nexport default function TasksTab() {\n  const {\n    tasks,\n    loading,\n    addTask,\n    toggleTask,\n    deleteTask,\n    updateTask,\n    getFlowerTypeForPriority\n  } = useTaskStore();\n\n  const [newTaskText, setNewTaskText] = useState('');\n  const [newTaskPriority, setNewTaskPriority] = useState('medium');\n  const [filter, setFilter] = useState('all');\n  const [editingTask, setEditingTask] = useState(null);\n  const [editText, setEditText] = useState('');\n  const [isDataReady, setIsDataReady] = useState(false);\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [completedTasks, setCompletedTasks] = useState(new Set());\n  const [removingTasks, setRemovingTasks] = useState(new Set());\n\n  // 检查数据是否准备完毕\n  useEffect(() => {\n    if (Array.isArray(tasks) && !loading) {\n      setIsDataReady(true);\n    }\n  }, [tasks, loading]);\n\n  const handleAddTask = async () => {\n    if (newTaskText.trim()) {\n      try {\n        await addTask(newTaskText, newTaskPriority);\n        setNewTaskText('');\n        setNewTaskPriority('medium');\n        setShowAddForm(false);\n      } catch (error) {\n        console.error('Failed to add task:', error);\n      }\n    }\n  };\n\n  const handleToggleTask = async (taskId) => {\n    try {\n      const task = tasks.find(t => t.id === taskId);\n      if (!task.completed) {\n        // 完成动画触发\n        setCompletedTasks(prev => new Set([...prev, taskId]));\n        setTimeout(() => {\n          setCompletedTasks(prev => {\n            const newSet = new Set(prev);\n            newSet.delete(taskId);\n            return newSet;\n          });\n        }, 1000);\n      }\n      await toggleTask(taskId);\n    } catch (error) {\n      console.error('Failed to toggle task:', error);\n    }\n  };\n\n  const handleDeleteTask = async (taskId) => {\n    try {\n      // 添加删除动画\n      setRemovingTasks(prev => new Set([...prev, taskId]));\n      \n      // 等待动画完成后删除\n      setTimeout(async () => {\n        await deleteTask(taskId);\n        setRemovingTasks(prev => {\n          const newSet = new Set(prev);\n          newSet.delete(taskId);\n          return newSet;\n        });\n      }, 300);\n    } catch (error) {\n      console.error('Failed to delete task:', error);\n      // 如果删除失败，移除动画状态\n      setRemovingTasks(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(taskId);\n        return newSet;\n      });\n    }\n  };\n\n  const startEditing = (task) => {\n    setEditingTask(task.id);\n    setEditText(task.text);\n  };\n\n  const saveEdit = async () => {\n    if (editText.trim() && editingTask) {\n      try {\n        await updateTask(editingTask, editText);\n        setEditingTask(null);\n        setEditText('');\n      } catch (error) {\n        console.error('Failed to update task:', error);\n      }\n    }\n  };\n\n  const cancelEdit = () => {\n    setEditingTask(null);\n    setEditText('');\n  };\n\n  const getFilteredTasks = () => {\n    switch (filter) {\n      case 'completed':\n        return tasks.filter(task => task.completed);\n      case 'pending':\n        return tasks.filter(task => !task.completed);\n      case 'high':\n        return tasks.filter(task => task.priority === 'high');\n      case 'medium':\n        return tasks.filter(task => task.priority === 'medium');\n      case 'low':\n        return tasks.filter(task => task.priority === 'low');\n      default:\n        return tasks;\n    }\n  };\n\n  const getPriorityIcon = (priority) => {\n    const icons = {\n      high: '🌹',\n      medium: '🌻', \n      low: '🌿'\n    };\n    return icons[priority] || icons.medium;\n  };\n\n  const getPriorityBorderColor = (priority) => {\n    const colors = {\n      high: '#E74C3C',\n      medium: '#F39C12',\n      low: '#7FB069'\n    };\n    return colors[priority] || colors.medium;\n  };\n\n  const getTaskStats = () => {\n    const total = tasks.length;\n    const completed = tasks.filter(task => task.completed).length;\n    const pending = total - completed;\n    return { total, completed, pending };\n  };\n\n  // 数据未准备好时显示加载状态\n  if (!isDataReady) {\n    return (\n      <IonPage>\n        <PageHeader title={t('myTaskGardenTitle')} />\n        <IonContent>\n          <div className={styles.loadingContainer}>\n            <IonSpinner name=\"crescent\" />\n            <p>{t('loadingTasksList')}</p>\n          </div>\n        </IonContent>\n      </IonPage>\n    );\n  }\n\n  const filteredTasks = getFilteredTasks();\n  const stats = getTaskStats();\n\n  return (\n    <IonPage>\n      <PageHeader title={t('myTaskGardenTitle')} />\n      <IonContent>\n        <div className={styles.container}>\n          {/* 자연 배경 */}\n          <div className={styles.gardenBackground}>\n            \n            {/* 페이지 제목 */}\n            <div className={styles.pageHeader}>\n              <h1 className={styles.pageTitle}>{t('myTaskGardenTitle')}</h1>\n              <p className={styles.pageSubtitle}>{t('taskGardenSubtitle')}</p>\n            </div>\n\n            {/* 통계 카드 */}\n            <div className={styles.statsContainer}>\n              <div className={styles.statCard}>\n                <div className={styles.statIcon}>🌱</div>\n                <div className={styles.statNumber}>{stats.total}</div>\n                <div className={styles.statLabel}>{t('totalTasksLabel')}</div>\n              </div>\n              <div className={styles.statCard}>\n                <div className={styles.statIcon}>🌸</div>\n                <div className={styles.statNumber}>{stats.completed}</div>\n                <div className={styles.statLabel}>{t('completedTasksLabel')}</div>\n              </div>\n              <div className={styles.statCard}>\n                <div className={styles.statIcon}>🌿</div>\n                <div className={styles.statNumber}>{stats.pending}</div>\n                <div className={styles.statLabel}>{t('pendingTasksLabel')}</div>\n              </div>\n            </div>\n\n            {/* 필터 섹션 */}\n            <div className={styles.filterSection}>\n              <IonSelect\n                value={filter}\n                onIonChange={(e) => setFilter(e.detail.value)}\n                className={styles.filterSelect}\n                placeholder={t('taskFilterPlaceholder')}\n              >\n                <IonSelectOption value=\"all\">🌺 {t('viewAll')}</IonSelectOption>\n                <IonSelectOption value=\"pending\">🌱 {t('viewPending')}</IonSelectOption>\n                <IonSelectOption value=\"completed\">🌸 {t('viewCompleted')}</IonSelectOption>\n                <IonSelectOption value=\"high\">🌹 {t('highPriorityFilter')}</IonSelectOption>\n                <IonSelectOption value=\"medium\">🌻 {t('mediumPriorityFilter')}</IonSelectOption>\n                <IonSelectOption value=\"low\">🌿 {t('lowPriorityFilter')}</IonSelectOption>\n              </IonSelect>\n            </div>\n\n            {/* 할일 추가 폼 */}\n            {showAddForm && (\n              <div className={styles.addTaskForm}>\n                <div className={styles.formCard}>\n                  <div className={styles.formHeader}>\n                    <span className={styles.formIcon}>🌱</span>\n                    <span className={styles.formTitle}>{t('formTitleNewTask')}</span>\n                    <IonButton \n                      fill=\"clear\" \n                      size=\"small\"\n                      onClick={() => setShowAddForm(false)}\n                      className={styles.closeButton}\n                    >\n                      <IonIcon icon={close} />\n                    </IonButton>\n                  </div>\n                  \n                  <IonInput\n                    value={newTaskText}\n                    placeholder={t('newTaskInputPlaceholder')}\n                    onIonInput={(e) => setNewTaskText(e.detail.value ?? '')}\n                    className={styles.taskInput}\n                    onKeyPress={(e) => {\n                      if (e.key === 'Enter') {\n                        handleAddTask();\n                      }\n                    }}\n                  />\n                  \n                  <IonSelect\n                    value={newTaskPriority}\n                    onIonChange={(e) => setNewTaskPriority(e.detail.value)}\n                    className={styles.prioritySelect}\n                    placeholder={t('prioritySelectionPlaceholder')}\n                  >\n                    <IonSelectOption value=\"high\">🌹 {t('highPriorityOption')}</IonSelectOption>\n                    <IonSelectOption value=\"medium\">🌻 {t('mediumPriorityOption')}</IonSelectOption>\n                    <IonSelectOption value=\"low\">🌿 {t('lowPriorityOption')}</IonSelectOption>\n                  </IonSelect>\n                  \n                  <div className={styles.formActions}>\n                    <IonButton\n                      onClick={handleAddTask}\n                      disabled={!newTaskText.trim()}\n                      className={styles.plantButton}\n                      expand=\"block\"\n                    >\n                      <IonIcon icon={add} slot=\"start\" />\n                      {t('plantTaskButtonText')}\n                    </IonButton>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* 할일 목록 */}\n            <div className={styles.tasksList}>\n              {filteredTasks.length === 0 ? (\n                <div className={styles.emptyState}>\n                  <div className={styles.emptyIcon}>🌱</div>\n                  <h3 className={styles.emptyTitle}>{t('noTasksEmptyTitle')}</h3>\n                  <p className={styles.emptyText}>\n                    {filter === 'all' \n                      ? t('firstSeedPlantMessage') \n                      : t('noMatchingTasksMessage')}\n                  </p>\n                  {filter === 'all' && (\n                    <IonButton \n                      onClick={() => setShowAddForm(true)}\n                      className={styles.emptyActionButton}\n                    >\n                      <IonIcon icon={add} slot=\"start\" />\n                      {t('plantFirstTaskButtonText')}\n                    </IonButton>\n                  )}\n                </div>\n              ) : (\n                filteredTasks.map((task) => (\n                  <div\n                    key={task.id}\n                    className={`${styles.taskCard} ${task.completed ? styles.completed : ''} ${completedTasks.has(task.id) ? styles.completing : ''} ${removingTasks.has(task.id) ? styles.removing : ''}`}\n                  >\n                    <div \n                      className={styles.priorityBorder}\n                      style={{ borderColor: getPriorityBorderColor(task.priority) }}\n                    />\n                    \n                    <div className={styles.taskContent}>\n                      <div className={styles.taskLeft}>\n                        <IonCheckbox\n                          checked={task.completed}\n                          onIonChange={() => handleToggleTask(task.id)}\n                          className={styles.taskCheckbox}\n                        />\n                        \n                        <div className={styles.priorityIcon}>\n                          {getPriorityIcon(task.priority)}\n                        </div>\n                      </div>\n                      \n                      <div className={styles.taskInfo}>\n                        {editingTask === task.id ? (\n                          <div className={styles.editMode}>\n                            <IonInput\n                              value={editText}\n                              onIonInput={(e) => setEditText(e.detail.value ?? '')}\n                              className={styles.editInput}\n                              onKeyPress={(e) => {\n                                if (e.key === 'Enter') {\n                                  saveEdit();\n                                } else if (e.key === 'Escape') {\n                                  cancelEdit();\n                                }\n                              }}\n                            />\n                            <div className={styles.editActions}>\n                              <IonButton size=\"small\" onClick={saveEdit} className={styles.saveButton}>\n                                <IonIcon icon={checkmark} />\n                              </IonButton>\n                              <IonButton size=\"small\" fill=\"clear\" onClick={cancelEdit} className={styles.cancelButton}>\n                                <IonIcon icon={close} />\n                              </IonButton>\n                            </div>\n                          </div>\n                        ) : (\n                          <>\n                            <div className={`${styles.taskText} ${task.completed ? styles.completedText : ''}`}>\n                              {task.text}\n                            </div>\n                            <div className={styles.taskMeta}>\n                              <span className={styles.priorityLabel}>\n                                {task.priority === 'high' ? t('highPriorityLabel') : \n                                 task.priority === 'medium' ? t('mediumPriorityLabel') : t('lowPriorityLabel')}\n                              </span>\n                              {task.completedAt && (\n                                <span className={styles.completedTime}>\n                                  {new Date(task.completedAt).toLocaleDateString('ko-KR')}\n                                </span>\n                              )}\n                            </div>\n                          </>\n                        )}\n                      </div>\n                      \n                      <div className={styles.taskActions}>\n                        {editingTask !== task.id && (\n                          <>\n                            <IonButton\n                              fill=\"clear\"\n                              size=\"small\"\n                              onClick={() => startEditing(task)}\n                              className={styles.editButton}\n                            >\n                              <IonIcon icon={create} />\n                            </IonButton>\n                            <IonButton\n                              fill=\"clear\"\n                              size=\"small\"\n                              onClick={() => handleDeleteTask(task.id)}\n                              className={styles.deleteButton}\n                            >\n                              <IonIcon icon={trash} />\n                            </IonButton>\n                          </>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* 완료 애니메이션 */}\n                    {completedTasks.has(task.id) && (\n                      <div className={styles.completionAnimation}>\n                        <span className={styles.growthAnimation}>🌱→🌸</span>\n                      </div>\n                    )}\n                  </div>\n                ))\n              )}\n            </div>\n\n            {/* 장식용 꽃들 */}\n            <div className={styles.decorativeElements}>\n              {Array.from({ length: Math.min(stats.completed, 8) }, (_, i) => (\n                <span \n                  key={i} \n                  className={styles.decorativeFlower}\n                  style={{\n                    left: `${5 + (i % 4) * 22}%`,\n                    bottom: `${2 + Math.floor(i / 4) * 8}%`,\n                    animationDelay: `${i * 0.5}s`\n                  }}\n                >\n                  {i % 3 === 0 ? '🌺' : i % 3 === 1 ? '🌸' : '🌼'}\n                </span>\n              ))}\n            </div>\n          </div>\n\n          {/* 플로팅 추가 버튼 */}\n          {!showAddForm && (\n            <IonFab vertical=\"bottom\" horizontal=\"end\" slot=\"fixed\">\n              <IonFabButton \n                onClick={() => setShowAddForm(true)}\n                className={styles.fabButton}\n              >\n                🌱\n              </IonFabButton>\n            </IonFab>\n          )}\n        </div>\n      </IonContent>\n    </IonPage>\n  );\n}",
  "components/TimerTab.jsx": "import React, { useEffect, useState } from 'react';\nimport { IonButton, IonIcon, IonSpinner, IonSelect, IonSelectOption, IonAlert, IonContent } from '@ionic/react';\nimport { play, pause, refresh, leaf, checkmarkCircle, chevronDown } from 'ionicons/icons';\nimport { useTimerStore } from '../stores/timerStore';\nimport { useTaskStore } from '../stores/taskStore';\nimport FlowerAnimation from './FlowerAnimation';\nimport GardenFairy from './GardenFairy';\nimport { t, addLanguageListener } from '../utils/i18n';\nimport { showErrorToast } from './ErrorToast';\nimport styles from '../styles/TimerTab.module.css';\n\nexport default function TimerTab() {\n  const {\n    remainingTime,\n    isRunning,\n    mode,\n    currentSession,\n    completedPomodoros,\n    startTimer,\n    pauseTimer,\n    resetTimer,\n    tick,\n    restoreTimer,\n    skipBreak,\n    setReminderErrorCallback\n  } = useTimerStore();\n\n  const {\n    tasks,\n    loadTasks,\n    toggleTask\n  } = useTaskStore();\n\n  const [showAnimation, setShowAnimation] = useState(false);\n  const [isDataReady, setIsDataReady] = useState(false);\n  const [selectedTaskId, setSelectedTaskId] = useState(null);\n  const [showCompletionAlert, setShowCompletionAlert] = useState(false);\n  const [currentLanguage, setCurrentLanguage] = useState('ko');\n  const [isAppVisible, setIsAppVisible] = useState(true);\n  \n  // 监听语言变化\n  useEffect(() => {\n    const unsubscribe = addLanguageListener((newLanguage) => {\n      setCurrentLanguage(newLanguage);\n    });\n    return unsubscribe;\n  }, []);\n\n  // 设置提醒错误回调\n  useEffect(() => {\n    setReminderErrorCallback((errorMessage) => {\n      showErrorToast(t('reminderCreateFailed') || '提醒创建失败，但计时器正常运行');\n    });\n  }, [setReminderErrorCallback]);\n\n  // App visibility and lifecycle management\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      const isVisible = !document.hidden;\n      setIsAppVisible(isVisible);\n      \n      if (isVisible) {\n        // App became visible, restore timer state\n        console.log('App became visible, restoring timer...');\n        restoreTimer();\n      }\n    };\n\n    const handleFocus = () => {\n      console.log('App gained focus, restoring timer...');\n      setIsAppVisible(true);\n      restoreTimer();\n    };\n\n    const handleBlur = () => {\n      console.log('App lost focus');\n      setIsAppVisible(false);\n    };\n\n    // Listen for visibility changes\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    window.addEventListener('focus', handleFocus);\n    window.addEventListener('blur', handleBlur);\n\n    // Initial restore when component mounts\n    restoreTimer();\n\n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n      window.removeEventListener('focus', handleFocus);\n      window.removeEventListener('blur', handleBlur);\n    };\n  }, [restoreTimer]);\n\n  useEffect(() => {\n    if (remainingTime !== undefined && remainingTime !== null) {\n      setIsDataReady(true);\n    }\n  }, [remainingTime]);\n\n  useEffect(() => {\n    loadTasks();\n  }, [loadTasks]);\n\n  // Timer tick - only when app is visible or for background sync\n  useEffect(() => {\n    let interval;\n    if (isRunning) {\n      interval = setInterval(() => {\n        tick();\n      }, 1000);\n    }\n    return () => clearInterval(interval);\n  }, [isRunning, tick]);\n\n  // Background timer sync - check every 30 seconds when app is hidden\n  useEffect(() => {\n    let backgroundInterval;\n    \n    if (isRunning && !isAppVisible) {\n      backgroundInterval = setInterval(() => {\n        console.log('Background sync - restoring timer state');\n        restoreTimer();\n      }, 30000); // Check every 30 seconds\n    }\n    \n    return () => {\n      if (backgroundInterval) {\n        clearInterval(backgroundInterval);\n      }\n    };\n  }, [isRunning, isAppVisible, restoreTimer]);\n\n  const isBreak = mode === 'shortBreak' || mode === 'longBreak';\n\n  useEffect(() => {\n    if (remainingTime === 0 && !isBreak && selectedTaskId) {\n      setShowAnimation(true);\n      setShowCompletionAlert(true);\n      setTimeout(() => setShowAnimation(false), 3000);\n    } else if (remainingTime === 0) {\n      setShowAnimation(true);\n      setTimeout(() => setShowAnimation(false), 3000);\n    }\n  }, [remainingTime, isBreak, selectedTaskId]);\n\n  const handleStartPause = async () => {\n    try {\n      if (isRunning) {\n        await pauseTimer();\n      } else {\n        await startTimer();\n      }\n    } catch (error) {\n      console.error('Timer operation failed:', error);\n      showErrorToast(t('timerStartFailed') || '计时器启动失败，请重试');\n    }\n  };\n\n  const handleReset = async () => {\n    await resetTimer();\n  };\n\n  const handleSkipBreak = async () => {\n    await skipBreak();\n  };\n\n  const handleTaskComplete = async () => {\n    if (selectedTaskId) {\n      await toggleTask(selectedTaskId);\n      setSelectedTaskId(null);\n    }\n    setShowCompletionAlert(false);\n  };\n\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const getSessionTitle = () => {\n    return isBreak ? t('butterflyRest') : t('focusSession');\n  };\n\n  const getSessionEmoji = () => {\n    if (isBreak) {\n      return '🦋';\n    }\n    \n    const { duration, remainingTime } = useTimerStore.getState();\n    const elapsed = duration - remainingTime;\n    const progress = elapsed / duration;\n    \n    if (progress < 0.3) {\n      return '🌱';\n    } else if (progress < 0.7) {\n      return '🌿';\n    } else {\n      return '🌸';\n    }\n  };\n\n  const getProgress = () => {\n    const { duration, shortBreak, longBreak, mode, remainingTime } = useTimerStore.getState();\n    let totalTime;\n    \n    switch (mode) {\n      case 'shortBreak':\n        totalTime = shortBreak;\n        break;\n      case 'longBreak':\n        totalTime = longBreak;\n        break;\n      default:\n        totalTime = duration;\n    }\n    \n    return ((totalTime - remainingTime) / totalTime) * 100;\n  };\n\n  const getSelectedTask = () => {\n    return tasks.find(task => task.id === selectedTaskId);\n  };\n\n  const getIncompleteTasks = () => {\n    return tasks.filter(task => !task.completed);\n  };\n\n  const getPriorityIcon = (priority) => {\n    const icons = {\n      high: '🌹',\n      medium: '🌻', \n      low: '🌿'\n    };\n    return icons[priority] || '🌻';\n  };\n\n  // Show background timer indicator\n  const getTimerStatusMessage = () => {\n    if (!isRunning) return null;\n    \n    if (!isAppVisible) {\n      return (\n        <div className={styles.backgroundTimerIndicator}>\n          <span className={styles.backgroundIcon}>🌱</span>\n          <span className={styles.backgroundText}>\n            {isBreak ? t('restingBackground') : t('focusingBackground')}\n          </span>\n        </div>\n      );\n    }\n    \n    return null;\n  };\n\n  if (!isDataReady) {\n    return (\n      <IonContent style={{ '--background': '#FFFFFF' }}>\n        <div className={styles.loadingContainer}>\n          <IonSpinner name=\"crescent\" />\n          <p>{t('loadingTimer')}</p>\n        </div>\n      </IonContent>\n    );\n  }\n\n  const incompleteTasks = getIncompleteTasks();\n  const selectedTask = getSelectedTask();\n\n  return (\n    <IonContent style={{ '--background': '#FFFFFF' }}>\n      <div className={styles.container}>\n        {showAnimation && <FlowerAnimation />}\n        \n        {getTimerStatusMessage()}\n        \n        <GardenFairy\n          isTimerRunning={isRunning}\n          isBreak={isBreak}\n          completedPomodoros={completedPomodoros}\n          selectedTask={selectedTask}\n          timeLeft={remainingTime}\n        />\n        \n        <div className={styles.gardenBackground}>\n          <div className={styles.taskSelection}>\n            <h3 className={styles.taskSelectionTitle}>\n              🌱 {t('selectTask')}\n            </h3>\n            \n            {incompleteTasks.length > 0 ? (\n              <div className={styles.taskSelectContainer}>\n                <IonSelect\n                  value={selectedTaskId}\n                  placeholder={t('selectTaskPlaceholder')}\n                  onIonChange={(e) => setSelectedTaskId(e.detail.value)}\n                  className={styles.taskSelect}\n                  interface=\"popover\"\n                >\n                  {incompleteTasks.map(task => (\n                    <IonSelectOption key={task.id} value={task.id}>\n                      <div className={styles.taskOption}>\n                        <span className={styles.taskPriorityIcon}>\n                          {getPriorityIcon(task.priority)}\n                        </span>\n                        <span className={styles.taskText}>{task.text}</span>\n                      </div>\n                    </IonSelectOption>\n                  ))}\n                </IonSelect>\n                <IonIcon icon={chevronDown} className={styles.selectIcon} />\n              </div>\n            ) : (\n              <div className={styles.noTasksMessage}>\n                <span className={styles.noTasksIcon}>🌺</span>\n                <p>{t('noTasks')}</p>\n              </div>\n            )}\n          </div>\n\n          {selectedTask ? (\n            <div className={styles.selectedTaskDisplay}>\n              <div className={styles.selectedTaskCard}>\n                <span className={styles.selectedTaskIcon}>\n                  {getPriorityIcon(selectedTask.priority)}\n                </span>\n                <div className={styles.selectedTaskInfo}>\n                  <h4 className={styles.selectedTaskTitle}>🌸 {t('currentTask')}</h4>\n                  <p className={styles.selectedTaskText}>{selectedTask.text}</p>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className={styles.noSelectedTask}>\n              <span className={styles.encourageIcon}>🌱</span>\n              <p>{t('encourageStart')}</p>\n            </div>\n          )}\n\n          <div className={styles.sessionHeader}>\n            <span className={styles.sessionEmoji}>{getSessionEmoji()}</span>\n            <h2 className={styles.sessionTitle}>{getSessionTitle()}</h2>\n          </div>\n\n          <div className={styles.timerDisplay}>\n            <div className={styles.timeCircle}>\n              <svg className={styles.progressRing} viewBox=\"0 0 120 120\">\n                <circle\n                  className={styles.progressRingBackground}\n                  cx=\"60\"\n                  cy=\"60\"\n                  r=\"54\"\n                  fill=\"transparent\"\n                  stroke=\"rgba(200, 230, 201, 0.3)\"\n                  strokeWidth=\"4\"\n                />\n                <circle\n                  className={styles.progressRingProgress}\n                  cx=\"60\"\n                  cy=\"60\"\n                  r=\"54\"\n                  fill=\"transparent\"\n                  stroke={isBreak ? \"#A0C8E6\" : \"#2E7D32\"}\n                  strokeWidth=\"4\"\n                  strokeDasharray={`${2 * Math.PI * 54}`}\n                  strokeDashoffset={`${2 * Math.PI * 54 * (1 - getProgress() / 100)}`}\n                  transform=\"rotate(-90 60 60)\"\n                />\n              </svg>\n              <div className={styles.timeText}>\n                {formatTime(remainingTime)}\n              </div>\n            </div>\n          </div>\n\n          <div className={styles.controls}>\n            <IonButton\n              fill=\"clear\"\n              size=\"large\"\n              onClick={handleStartPause}\n              className={styles.playPauseButton}\n            >\n              <IonIcon \n                icon={isRunning ? pause : play} \n                size=\"large\"\n              />\n              <span className={styles.buttonText}>\n                {isRunning ? t('pause') : t('start')}\n              </span>\n            </IonButton>\n            \n            {/* 只在休息时间显示跳过按钮 */}\n            {isBreak && (\n              <IonButton\n                fill=\"clear\"\n                size=\"large\"\n                onClick={handleSkipBreak}\n                className={styles.skipButton}\n              >\n                <IonIcon \n                  icon={leaf} \n                  size=\"large\"\n                />\n                <span className={styles.buttonText}>{t('skipBreak')}</span>\n              </IonButton>\n            )}\n            \n            <IonButton\n              fill=\"clear\"\n              size=\"large\"\n              onClick={handleReset}\n              className={styles.resetButton}\n            >\n              <IonIcon \n                icon={refresh} \n                size=\"large\"\n              />\n              <span className={styles.buttonText}>{t('reset')}</span>\n            </IonButton>\n          </div>\n\n          <div className={styles.stats}>\n            <div className={styles.statItem}>\n              <span className={styles.statIcon}>🌸</span>\n              <span className={styles.statText}>\n                {t('completedFlowers', { count: completedPomodoros })}\n              </span>\n            </div>\n            <div className={styles.statItem}>\n              <span className={styles.statIcon}>🌺</span>\n              <span className={styles.statText}>\n                {t('todayCompleted', { count: completedPomodoros })}\n              </span>\n            </div>\n          </div>\n\n          <div className={styles.gardenElements}>\n            <div className={styles.backgroundTrees}>\n              <span className={styles.tree} style={{ left: '10%', top: '20%' }}>🌳</span>\n              <span className={styles.tree} style={{ right: '15%', top: '15%' }}>🌲</span>\n              <span className={styles.tree} style={{ left: '80%', top: '25%' }}>🌳</span>\n            </div>\n            \n            <div className={styles.growingPlants}>\n              {isRunning && !isBreak && (\n                <div className={styles.plantGrowth}>\n                  <span className={styles.growingPlant}>🌱</span>\n                  <span className={styles.growingPlant} style={{ animationDelay: '1s' }}>🌿</span>\n                  <span className={styles.growingPlant} style={{ animationDelay: '2s' }}>🌸</span>\n                </div>\n              )}\n            </div>\n            \n            <div className={styles.flowers}>\n              {Array.from({ length: Math.min(completedPomodoros, 8) }, (_, i) => (\n                <span key={i} className={styles.flower} style={{\n                  left: `${20 + (i % 4) * 20}%`,\n                  bottom: `${10 + Math.floor(i / 4) * 15}%`,\n                  animationDelay: `${i * 0.5}s`\n                }}>\n                  🌸\n                </span>\n              ))}\n            </div>\n            \n            {isBreak && (\n              <div className={styles.butterflies}>\n                <span className={styles.butterfly}>🦋</span>\n                <span className={styles.butterfly} style={{ animationDelay: '2s' }}>🦋</span>\n                <span className={styles.butterfly} style={{ animationDelay: '4s' }}>🦋</span>\n              </div>\n            )}\n            \n            <div className={styles.clouds}>\n              <span className={styles.cloud} style={{ left: '20%', top: '10%' }}>☁️</span>\n              <span className={styles.cloud} style={{ right: '30%', top: '5%' }}>☁️</span>\n            </div>\n          </div>\n        </div>\n\n        <IonAlert\n          isOpen={showCompletionAlert}\n          onDidDismiss={() => setShowCompletionAlert(false)}\n          header={`🌸 ${t('pomodoroComplete')}`}\n          message={selectedTask ? t('taskCompleteQuestion', { task: selectedTask.text }) : t('pomodoroComplete')}\n          buttons={[\n            {\n              text: t('stillWorking'),\n              role: 'cancel',\n              handler: () => {\n                setShowCompletionAlert(false);\n              }\n            },\n            {\n              text: t('completed'),\n              handler: handleTaskComplete\n            }\n          ]}\n        />\n      </div>\n    </IonContent>\n  );\n}",
  "components/Welcome.jsx": "import React from 'react';\nimport { IonIcon } from '@ionic/react';\nimport { downloadOutline, globeOutline, chatbubbleEllipsesOutline, sparklesOutline, deviceMobileOutline } from 'ionicons/icons';\nimport styles from '../styles/Welcome.module.css';\n\n/**\n * 欢迎组件 - 仅用于演示\n * \n * 这个组件用于展示 Morphix AI Code 的功能和界面设计\n * 在实际开发中，请删除此组件并创建您自己的应用界面\n * \n * @component\n * @returns {JSX.Element} 欢迎页面组件\n */\nexport default function Welcome() {\n    const openDownload = () => {\n        window.open('https://baibian.app/mobile-download', '_blank');\n    };\n\n    const openWebsite = () => {\n        window.open('https://baibian.app/', '_blank');\n    };\n\n    return (\n        <div className={styles.welcomeContainer}>\n\n            {/* 头部 */}\n            <div className={styles.header}>\n                <div className={styles.logo}>\n                    <img\n                        src=\"https://app-shell.focusbe.com/Icon-60@3x.png\"\n                        alt=\"Morphix AI Logo\"\n                        className={styles.logoImage}\n                        onError={(e) => {\n                            e.target.style.display = 'none';\n                        }}\n                    />\n                    <div className={styles.logoGlow}></div>\n                </div>\n\n                <h1 className={styles.title}>\n                    <span className={styles.titleGradient}>Morphix AI</span>\n                    <span className={styles.titleSubtext}>Code</span>\n                </h1>\n                <p className={styles.subtitle}>Create your own app with AI</p>\n            </div>\n\n            {/* 三个步骤 */}\n            <div className={styles.steps}>\n                <div className={styles.step}>\n                    <div className={styles.stepNumber}>1</div>\n                    <div className={styles.stepContent}>\n                        <h3>Describe</h3>\n                        <p>Your app idea</p>\n                    </div>\n                </div>\n\n                <div className={styles.step}>\n                    <div className={styles.stepNumber}>2</div>\n                    <div className={styles.stepContent}>\n                        <h3>Generate</h3>\n                        <p>AI builds a preview</p>\n                    </div>\n                </div>\n\n                <div className={styles.step}>\n                    <div className={styles.stepNumber}>3</div>\n                    <div className={styles.stepContent}>\n                        <h3>Launch</h3>\n                        <p>Use in Morphix</p>\n                    </div>\n                </div>\n            </div>\n\n            {/* 行动按钮 */}\n            <div className={styles.ctaSection}>\n                <button \n                    className={styles.primaryBtn}\n                    onClick={openDownload}\n                >\n                    <IonIcon icon={downloadOutline} />\n                    Download Morphix AI\n                </button>\n                \n                <button \n                    className={styles.secondaryBtn}\n                    onClick={openWebsite}\n                >\n                    <IonIcon icon={globeOutline} />\n                    Visit Website\n                </button>\n            </div>\n\n            {/* 底部 */}\n            <div className={styles.footer}>\n                <p>2024 Morphix AI. Empowering everyone to create apps.</p>\n            </div>\n        </div>\n    );\n}\n",
  "stores/taskStore.js": "import { create } from 'zustand';\nimport AppSdk from '@morphixai/app-sdk';\nimport { reportError } from '@morphixai/lib';\n\nexport const useTaskStore = create((set, get) => ({\n  tasks: [],\n  loading: false,\n\n  // Get flower type based on priority\n  getFlowerTypeForPriority: (priority) => {\n    const flowerTypes = {\n      high: 'rose',\n      medium: 'tulip',\n      low: 'daisy'\n    };\n    return flowerTypes[priority] || 'tulip';\n  },\n\n  // Load tasks from storage with enhanced error handling\n  loadTasks: async () => {\n    set({ loading: true });\n    try {\n      console.log('Loading tasks from storage...');\n      \n      // 先尝试查询所有任务\n      let tasksData;\n      try {\n        tasksData = await AppSdk.appData.queryData({\n          collection: 'tasks',\n          query: []\n        });\n        \n        // 过滤掉list文档，只保留实际的任务项\n        if (Array.isArray(tasksData)) {\n          tasksData = tasksData.filter(task => task.id !== 'list' && task.text);\n        }\n      } catch (queryError) {\n        console.log('Query failed, trying to get tasks list data:', queryError.message);\n        \n        // 如果查询失败，尝试获取任务列表数据\n        try {\n          const listData = await AppSdk.appData.getData({\n            collection: 'tasks',\n            id: 'list'\n          });\n          if (listData) {\n            tasksData = listData.items || [];\n          } else {\n            console.log('Tasks list data is null, starting with empty array');\n            tasksData = [];\n          }\n        } catch (getError) {\n          console.log('No tasks data found, starting with empty array');\n          tasksData = [];\n        }\n      }\n      \n      // Handle case where no tasks exist yet\n      const tasks = Array.isArray(tasksData) ? tasksData : [];\n      const sortedTasks = tasks.sort((a, b) => (b.createdAt || 0) - (a.createdAt || 0));\n      \n      set({ tasks: sortedTasks });\n      console.log(`Loaded ${sortedTasks.length} tasks successfully`);\n    } catch (error) {\n      console.error('Error loading tasks:', error);\n      await reportError(error, 'JavaScriptError', { component: 'TaskStore' });\n      // Always set empty array to prevent app crash\n      set({ tasks: [] });\n      console.log('Set empty tasks array due to error');\n    } finally {\n      set({ loading: false });\n    }\n  },\n\n  // Add new task with enhanced error handling\n  addTask: async (taskText, priority = 'medium') => {\n    if (!taskText.trim()) return;\n    \n    try {\n      const newTask = {\n        text: taskText.trim(),\n        completed: false,\n        priority,\n        createdAt: Date.now(),\n        completedAt: null,\n        flowerType: get().getFlowerTypeForPriority(priority)\n      };\n      \n      let savedTask;\n      try {\n        // 对于单个任务，不传 id，让系统自动生成\n        savedTask = await AppSdk.appData.createData({\n          collection: 'tasks',\n          data: newTask\n        });\n      } catch (createError) {\n        console.error('Failed to save task to storage:', createError);\n        // 如果保存失败，至少在内存中添加任务\n        savedTask = {\n          id: `temp_${Date.now()}`,\n          ...newTask\n        };\n      }\n      \n      set(state => ({\n        tasks: [savedTask, ...state.tasks]\n      }));\n      \n      return savedTask;\n    } catch (error) {\n      console.error('Error adding task:', error);\n      await reportError(error, 'JavaScriptError', { component: 'TaskStore' });\n    }\n  },\n\n  // Toggle task completion with enhanced error handling\n  toggleTask: async (taskId) => {\n    try {\n      const task = get().tasks.find(t => t.id === taskId);\n      if (!task) return;\n      \n      const updatedTaskData = {\n        completed: !task.completed,\n        completedAt: !task.completed ? Date.now() : null\n      };\n      \n      let updatedTask;\n      try {\n        updatedTask = await AppSdk.appData.updateData({\n          collection: 'tasks',\n          id: taskId,\n          data: updatedTaskData\n        });\n      } catch (updateError) {\n        console.error('Failed to update task in storage:', updateError);\n        // 如果更新失败，至少在内存中更新\n        updatedTask = {\n          ...task,\n          ...updatedTaskData\n        };\n      }\n      \n      set(state => ({\n        tasks: state.tasks.map(t => \n          t.id === taskId ? updatedTask : t\n        )\n      }));\n      \n      return updatedTask;\n    } catch (error) {\n      console.error('Error toggling task:', error);\n      await reportError(error, 'JavaScriptError', { component: 'TaskStore' });\n    }\n  },\n\n  // Delete task with enhanced error handling\n  deleteTask: async (taskId) => {\n    try {\n      try {\n        await AppSdk.appData.deleteData({\n          collection: 'tasks',\n          id: taskId\n        });\n      } catch (deleteError) {\n        console.error('Failed to delete task from storage:', deleteError);\n        // 继续删除内存中的任务，即使存储删除失败\n      }\n      \n      set(state => ({\n        tasks: state.tasks.filter(t => t.id !== taskId)\n      }));\n    } catch (error) {\n      console.error('Error deleting task:', error);\n      await reportError(error, 'JavaScriptError', { component: 'TaskStore' });\n    }\n  },\n\n  // Update task text with enhanced error handling\n  updateTask: async (taskId, newText) => {\n    if (!newText.trim()) return;\n    \n    try {\n      const task = get().tasks.find(t => t.id === taskId);\n      if (!task) return;\n      \n      const updateData = {\n        text: newText.trim(),\n        updatedAt: Date.now()\n      };\n      \n      let updatedTask;\n      try {\n        updatedTask = await AppSdk.appData.updateData({\n          collection: 'tasks',\n          id: taskId,\n          data: updateData\n        });\n      } catch (updateError) {\n        console.error('Failed to update task in storage:', updateError);\n        // 如果更新失败，至少在内存中更新\n        updatedTask = {\n          ...task,\n          ...updateData\n        };\n      }\n      \n      set(state => ({\n        tasks: state.tasks.map(t => \n          t.id === taskId ? updatedTask : t\n        )\n      }));\n      \n      return updatedTask;\n    } catch (error) {\n      console.error('Error updating task:', error);\n      await reportError(error, 'JavaScriptError', { component: 'TaskStore' });\n    }\n  },\n\n  // Get completed tasks count\n  getCompletedTasksCount: () => {\n    return get().tasks.filter(task => task.completed).length;\n  },\n\n  // Get tasks by priority\n  getTasksByPriority: (priority) => {\n    return get().tasks.filter(task => task.priority === priority);\n  },\n\n  // Clear all completed tasks\n  clearCompletedTasks: async () => {\n    try {\n      const completedTasks = get().tasks.filter(task => task.completed);\n      \n      // Delete completed tasks from storage\n      for (const task of completedTasks) {\n        try {\n          await AppSdk.appData.deleteData({\n            collection: 'tasks',\n            id: task.id\n          });\n        } catch (deleteError) {\n          console.error(`Failed to delete completed task ${task.id}:`, deleteError);\n        }\n      }\n      \n      // Remove completed tasks from state\n      set(state => ({\n        tasks: state.tasks.filter(task => !task.completed)\n      }));\n      \n      console.log(`Cleared ${completedTasks.length} completed tasks`);\n    } catch (error) {\n      console.error('Error clearing completed tasks:', error);\n      await reportError(error, 'JavaScriptError', { component: 'TaskStore' });\n    }\n  },\n\n  // Get task statistics\n  getTaskStats: () => {\n    const { tasks } = get();\n    const total = tasks.length;\n    const completed = tasks.filter(task => task.completed).length;\n    const pending = total - completed;\n    const completionRate = total > 0 ? Math.round((completed / total) * 100) : 0;\n\n    return {\n      total,\n      completed,\n      pending,\n      completionRate\n    };\n  }\n}));",
  "stores/timerStore.js": "import { create } from 'zustand';\nimport AppSdk from '@morphixai/app-sdk';\nimport { reportError } from '@morphixai/lib';\nimport { \n  debugReminder, \n  cleanupTimerRemindersSafely, \n  createReminderSafely, \n  deleteReminderSafely,\n  handleReminderError \n} from '../utils/errorHandlers';\n\nexport const useTimerStore = create((set, get) => ({\n  isRunning: false,\n  mode: 'focus',\n  remainingTime: 25 * 60,\n  duration: 25 * 60,\n  shortBreak: 5 * 60,\n  longBreak: 15 * 60,\n  currentSession: 1,\n  totalSessions: 4,\n  plants: [],\n  completedPomodoros: 0,\n  totalFocusTime: 0,\n  currentReminderId: null,\n  onReminderError: null, // 提醒错误回调函数\n  \n  initializeTimer: async () => {\n    try {\n      console.log('Initializing timer...');\n      const timerData = await AppSdk.appData.getData({\n        collection: 'timer',\n        id: 'current'\n      });\n      \n      if (timerData) {\n        console.log('Found existing timer data:', timerData);\n        set({\n          isRunning: timerData.isRunning || false,\n          mode: timerData.mode || 'focus',\n          remainingTime: timerData.remainingTime || 25 * 60,\n          duration: timerData.duration || 25 * 60,\n          shortBreak: timerData.shortBreak || 5 * 60,\n          longBreak: timerData.longBreak || 15 * 60,\n          currentSession: timerData.currentCycle || 1,\n          totalSessions: timerData.cycles || 4,\n          completedPomodoros: timerData.completedPomodoros || 0,\n          totalFocusTime: timerData.totalFocusTime || 0,\n          plants: timerData.plants || []\n        });\n      }\n      \n      const statsData = await AppSdk.appData.getData({\n        collection: 'stats',\n        id: 'history'\n      });\n      \n      if (statsData) {\n        console.log('Found existing stats data:', statsData);\n        set({\n          completedPomodoros: statsData.completedPomodoros || get().completedPomodoros,\n          totalFocusTime: statsData.totalFocusTime || get().totalFocusTime\n        });\n      }\n      \n      console.log('Timer initialization completed');\n    } catch (error) {\n      console.error('Failed to initialize timer:', error);\n      await reportError(error, 'TimerInitError');\n    }\n  },\n  \n  tick: async () => {\n    const { remainingTime, isRunning } = get();\n    \n    if (!isRunning || remainingTime <= 0) {\n      return;\n    }\n    \n    const newRemainingTime = remainingTime - 1;\n    \n    if (newRemainingTime <= 0) {\n      await get().completeSession();\n    } else {\n      set({ remainingTime: newRemainingTime });\n      \n      if (newRemainingTime % 10 === 0) {\n        await get().saveTimerState();\n      }\n    }\n  },\n  \n  restoreTimer: async () => {\n    try {\n      const { currentReminderId, isRunning } = get();\n      \n      if (!isRunning || !currentReminderId) {\n        return;\n      }\n      \n      console.log('Restoring timer from background...');\n      \n      const reminder = await AppSdk.reminder.getReminder({ id: currentReminderId });\n      \n      if (!reminder) {\n        console.log('Reminder not found, timer may have completed');\n        await get().completeSession();\n        return;\n      }\n      \n      const now = Date.now();\n      const reminderTime = reminder.start_time;\n      const timeLeft = Math.max(0, Math.floor((reminderTime - now) / 1000));\n      \n      console.log(`Timer restored: ${timeLeft} seconds remaining`);\n      \n      if (timeLeft <= 0) {\n        await get().completeSession();\n      } else {\n        set({ remainingTime: timeLeft });\n        await get().saveTimerState();\n      }\n      \n    } catch (error) {\n      console.error('Failed to restore timer:', error);\n      await reportError(error, 'TimerRestoreError');\n    }\n  },\n  \n  saveTimerState: async () => {\n    try {\n      const state = get();\n      \n      await AppSdk.appData.updateData({\n        collection: 'timer',\n        id: 'current',\n        data: {\n          isRunning: state.isRunning,\n          mode: state.mode,\n          remainingTime: state.remainingTime,\n          duration: state.duration,\n          shortBreak: state.shortBreak,\n          longBreak: state.longBreak,\n          currentCycle: state.currentSession,\n          cycles: state.totalSessions,\n          completedPomodoros: state.completedPomodoros,\n          totalFocusTime: state.totalFocusTime,\n          plants: state.plants,\n          lastUpdated: Date.now()\n        }\n      });\n      \n    } catch (error) {\n      console.error('Failed to save timer state:', error);\n    }\n  },\n  \n  startTimer: async () => {\n    try {\n      const { remainingTime, mode } = get();\n      \n      // 立即启动计时器，不等待提醒创建\n      set({ \n        isRunning: true\n      });\n      \n      await get().saveTimerState();\n      \n      // 异步创建提醒，不阻塞计时器运行\n      createReminderSafely({\n        message: mode === 'focus' ? '집중 시간이 끝났습니다!' : '휴식 시간이 끝났습니다!',\n        start_time: Date.now() + (remainingTime * 1000),\n        title: '자연 정원 뽀모도로',\n        sub_title: mode === 'focus' ? '휴식을 취하세요' : '다시 집중할 시간입니다'\n      }).then(reminderResult => {\n        if (reminderResult.success) {\n          console.log('提醒创建成功:', reminderResult.reminder.id);\n          // 更新 reminderId\n          set({ currentReminderId: reminderResult.reminder.id });\n          get().saveTimerState();\n        } else {\n          console.warn('提醒创建失败，但计时器继续运行:', reminderResult.error);\n          // 通知 UI 层显示错误提示\n          if (get().onReminderError) {\n            get().onReminderError(reminderResult.error);\n          }\n        }\n      }).catch(error => {\n        console.error('提醒创建异常:', error);\n        if (get().onReminderError) {\n          get().onReminderError(error.message || '提醒创建失败');\n        }\n      });\n      \n    } catch (error) {\n      console.error('Failed to start timer:', error);\n      await reportError(error, 'TimerStartError');\n      // 如果启动计时器本身失败，恢复状态\n      set({ isRunning: false });\n      throw error; // 向上抛出，让 UI 层处理\n    }\n  },\n  \n  pauseTimer: async () => {\n    try {\n      const { currentReminderId } = get();\n      \n      if (currentReminderId) {\n        const deleteResult = await deleteReminderSafely(currentReminderId);\n        if (!deleteResult.success) {\n          console.warn('리마인더 삭제 실패:', deleteResult.error);\n        }\n      }\n      \n      set({ \n        isRunning: false, \n        currentReminderId: null \n      });\n      \n      await get().saveTimerState();\n      \n    } catch (error) {\n      console.error('Failed to pause timer:', error);\n      await reportError(error, 'TimerPauseError');\n      await handleReminderError(error, 'pauseTimer');\n    }\n  },\n  \n  resetTimer: async () => {\n    try {\n      const { currentReminderId, mode, duration, shortBreak, longBreak } = get();\n      \n      if (currentReminderId) {\n        const deleteResult = await deleteReminderSafely(currentReminderId);\n        if (!deleteResult.success) {\n          console.warn('리마인더 삭제 실패:', deleteResult.error);\n        }\n      }\n      \n      let newDuration;\n      switch (mode) {\n        case 'focus':\n          newDuration = duration;\n          break;\n        case 'shortBreak':\n          newDuration = shortBreak;\n          break;\n        case 'longBreak':\n          newDuration = longBreak;\n          break;\n        default:\n          newDuration = duration;\n      }\n      \n      set({ \n        isRunning: false, \n        remainingTime: newDuration,\n        currentReminderId: null \n      });\n      \n      await get().saveTimerState();\n      \n    } catch (error) {\n      console.error('Failed to reset timer:', error);\n      await reportError(error, 'TimerResetError');\n      await handleReminderError(error, 'resetTimer');\n    }\n  },\n  \n  completeSession: async () => {\n    try {\n      const { mode, currentSession, totalSessions, plants, completedPomodoros, totalFocusTime } = get();\n      \n      if (mode === 'focus') {\n        const newPlant = {\n          id: Date.now(),\n          type: 'tree',\n          completedAt: Date.now(),\n          session: currentSession\n        };\n        \n        const updatedPlants = [...plants, newPlant];\n        const newCompletedPomodoros = completedPomodoros + 1;\n        const newTotalFocusTime = totalFocusTime + (25 * 60);\n        \n        set({\n          plants: updatedPlants,\n          completedPomodoros: newCompletedPomodoros,\n          totalFocusTime: newTotalFocusTime\n        });\n        \n        try {\n          await AppSdk.appData.createData({\n            collection: 'plants',\n            data: newPlant\n          });\n          \n          await AppSdk.appData.updateData({\n            collection: 'stats',\n            id: 'history',\n            data: {\n              completedPomodoros: newCompletedPomodoros,\n              totalFocusTime: newTotalFocusTime\n            }\n          });\n        } catch (storageError) {\n          console.error('Failed to save plant data:', storageError);\n        }\n      }\n      \n      let nextMode;\n      let nextSession = currentSession;\n      \n      if (mode === 'focus') {\n        if (currentSession % 4 === 0) {\n          nextMode = 'longBreak';\n        } else {\n          nextMode = 'shortBreak';\n        }\n        nextSession = currentSession + 1;\n      } else {\n        nextMode = 'focus';\n      }\n      \n      if (nextSession > totalSessions) {\n        nextSession = 1;\n      }\n      \n      const { duration, shortBreak, longBreak } = get();\n      let newDuration;\n      switch (nextMode) {\n        case 'focus':\n          newDuration = duration;\n          break;\n        case 'shortBreak':\n          newDuration = shortBreak;\n          break;\n        case 'longBreak':\n          newDuration = longBreak;\n          break;\n        default:\n          newDuration = duration;\n      }\n      \n      set({\n        mode: nextMode,\n        currentSession: nextSession,\n        remainingTime: newDuration,\n        isRunning: false,\n        currentReminderId: null\n      });\n      \n      await get().saveTimerState();\n      \n    } catch (error) {\n      console.error('Failed to complete session:', error);\n      await reportError(error, 'SessionCompleteError');\n    }\n  },\n  \n  skipBreak: async () => {\n    try {\n      const { mode, isRunning } = get();\n      \n      // 只允许在休息时间跳过\n      if (mode !== 'shortBreak' && mode !== 'longBreak') {\n        return;\n      }\n      \n      console.log('Skipping break...');\n      \n      // 停止当前计时器\n      if (isRunning) {\n        await get().pauseTimer();\n      }\n      \n      // 直接完成当前会话，进入下一个阶段\n      await get().completeSession();\n      \n    } catch (error) {\n      console.error('Failed to skip break:', error);\n      await reportError(error, 'SkipBreakError');\n    }\n  },\n  \n  updateRemainingTime: (time) => {\n    set({ remainingTime: time });\n  },\n  \n  setMode: (mode) => {\n    const { duration, shortBreak, longBreak } = get();\n    let newDuration;\n    \n    switch (mode) {\n      case 'focus':\n        newDuration = duration;\n        break;\n      case 'shortBreak':\n        newDuration = shortBreak;\n        break;\n      case 'longBreak':\n        newDuration = longBreak;\n        break;\n      default:\n        newDuration = duration;\n    }\n    \n    set({ \n      mode, \n      remainingTime: newDuration,\n      isRunning: false \n    });\n  },\n  \n  updateSettings: (settings) => {\n    const { mode } = get();\n    let newRemainingTime = get().remainingTime;\n    \n    if (mode === 'focus' && settings.duration) {\n      newRemainingTime = settings.duration;\n    } else if (mode === 'shortBreak' && settings.shortBreak) {\n      newRemainingTime = settings.shortBreak;\n    } else if (mode === 'longBreak' && settings.longBreak) {\n      newRemainingTime = settings.longBreak;\n    }\n    \n    set({ \n      ...settings,\n      remainingTime: newRemainingTime\n    });\n  },\n  \n  loadData: async () => {\n    try {\n      const plantsData = await AppSdk.appData.queryData({\n        collection: 'plants',\n        query: []\n      });\n      \n      const statsData = await AppSdk.appData.getData({\n        collection: 'stats',\n        id: 'history'\n      });\n      \n      set({\n        plants: plantsData || [],\n        completedPomodoros: statsData?.completedPomodoros || 0,\n        totalFocusTime: statsData?.totalFocusTime || 0\n      });\n      \n    } catch (error) {\n      console.error('Failed to load timer data:', error);\n      await reportError(error, 'TimerDataLoadError');\n    }\n  },\n  \n  getTodayStats: () => {\n    const { plants, completedPomodoros, totalFocusTime } = get();\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const todayTime = today.getTime();\n\n    const todayPlants = plants.filter(plant => {\n      const plantDate = new Date(plant.completedAt);\n      plantDate.setHours(0, 0, 0, 0);\n      return plantDate.getTime() === todayTime;\n    });\n\n    return {\n      todayPomodoros: todayPlants.length,\n      todayFocusTime: todayPlants.length * 25 * 60,\n      totalPomodoros: completedPomodoros,\n      totalFocusTime: totalFocusTime\n    };\n  },\n\n  debugReminderIssues: async (reminderId) => {\n    console.log('=== 타이머 스토어 리마인더 디버깅 ===');\n    await debugReminder(reminderId);\n    \n    const { isRunning, mode, remainingTime } = get();\n    console.log('현재 타이머 상태:', {\n      isRunning,\n      mode,\n      remainingTime\n    });\n    \n    console.log('타이머 리마인더 정리 테스트 시작...');\n    const cleanupResult = await cleanupTimerRemindersSafely();\n    console.log('정리 결과:', cleanupResult);\n    \n    console.log('=== 디버깅 완료 ===');\n    return cleanupResult;\n  },\n  \n  // 设置提醒错误回调\n  setReminderErrorCallback: (callback) => {\n    set({ onReminderError: callback });\n  }\n}));",
  "styles/App.module.css": "/* 主应用样式 */\n\n.content {\n  --padding: 0;\n  background: #ffffff;\n  min-height: 100vh;\n  color: #1f2937;\n}",
  "styles/FlowerAnimation.module.css": ".animationContainer {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  pointer-events: none;\n  z-index: 1000;\n  overflow: hidden;\n}\n\n.particle {\n  position: absolute;\n  font-size: 24px;\n  pointer-events: none;\n  z-index: 1001;\n}\n\n.grow {\n  animation: plantGrowth 3s ease-out forwards;\n}\n\n.butterfly {\n  animation: butterflyFlight 4s ease-in-out forwards;\n}\n\n@keyframes plantGrowth {\n  0% {\n    transform: scale(0) translateY(50px) rotate(0deg);\n    opacity: 0;\n  }\n  20% {\n    transform: scale(0.3) translateY(30px) rotate(90deg);\n    opacity: 0.6;\n  }\n  50% {\n    transform: scale(0.8) translateY(10px) rotate(180deg);\n    opacity: 0.9;\n  }\n  80% {\n    transform: scale(1.2) translateY(-10px) rotate(270deg);\n    opacity: 1;\n  }\n  100% {\n    transform: scale(1) translateY(-20px) rotate(360deg);\n    opacity: 0;\n  }\n}\n\n@keyframes butterflyFlight {\n  0% {\n    transform: translateX(0px) translateY(0px) rotate(0deg) scale(0.5);\n    opacity: 0;\n  }\n  10% {\n    opacity: 1;\n    transform: scale(1);\n  }\n  25% {\n    transform: translateX(100px) translateY(-50px) rotate(45deg) scale(1.1);\n  }\n  50% {\n    transform: translateX(-50px) translateY(-100px) rotate(-30deg) scale(0.9);\n  }\n  75% {\n    transform: translateX(150px) translateY(-30px) rotate(60deg) scale(1.2);\n  }\n  90% {\n    opacity: 1;\n  }\n  100% {\n    transform: translateX(200px) translateY(-150px) rotate(90deg) scale(0.3);\n    opacity: 0;\n  }\n}\n\n.growthCenter {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 1002;\n}\n\n.growthRing {\n  width: 120px;\n  height: 120px;\n  border: 3px solid var(--secondary-green);\n  border-radius: 50%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  animation: growthRingExpand 3s ease-out forwards;\n}\n\n.growthCore {\n  font-size: 48px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  animation: growthCoreBloom 3s ease-out forwards;\n}\n\n@keyframes growthRingExpand {\n  0% {\n    width: 0px;\n    height: 0px;\n    opacity: 1;\n    border-width: 6px;\n  }\n  50% {\n    width: 200px;\n    height: 200px;\n    opacity: 0.8;\n    border-width: 4px;\n  }\n  100% {\n    width: 300px;\n    height: 300px;\n    opacity: 0;\n    border-width: 1px;\n  }\n}\n\n@keyframes growthCoreBloom {\n  0% {\n    transform: translate(-50%, -50%) scale(0) rotate(0deg);\n    opacity: 0;\n  }\n  30% {\n    transform: translate(-50%, -50%) scale(1.5) rotate(180deg);\n    opacity: 1;\n  }\n  70% {\n    transform: translate(-50%, -50%) scale(1.2) rotate(270deg);\n    opacity: 1;\n  }\n  100% {\n    transform: translate(-50%, -50%) scale(1) rotate(360deg);\n    opacity: 0;\n  }\n}\n\n.butterflyTrail {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 300px;\n  height: 300px;\n  z-index: 1002;\n}\n\n.trailDot {\n  position: absolute;\n  width: 8px;\n  height: 8px;\n  background: radial-gradient(circle, var(--sky-blue), var(--secondary-green));\n  border-radius: 50%;\n  animation: trailDotMove 4s ease-in-out infinite;\n}\n\n@keyframes trailDotMove {\n  0% {\n    transform: rotate(0deg) translateX(0px) scale(0);\n    opacity: 0;\n  }\n  10% {\n    opacity: 1;\n    transform: scale(1);\n  }\n  25% {\n    transform: rotate(90deg) translateX(80px) scale(1.2);\n    opacity: 0.8;\n  }\n  50% {\n    transform: rotate(180deg) translateX(120px) scale(0.8);\n    opacity: 0.6;\n  }\n  75% {\n    transform: rotate(270deg) translateX(100px) scale(1.1);\n    opacity: 0.4;\n  }\n  90% {\n    opacity: 0.2;\n  }\n  100% {\n    transform: rotate(360deg) translateX(0px) scale(0);\n    opacity: 0;\n  }\n}\n\n.trailDot:nth-child(odd) {\n  background: radial-gradient(circle, var(--light-green), var(--primary-green));\n}\n\n.trailDot:nth-child(3n) {\n  background: radial-gradient(circle, var(--earth-brown), var(--secondary-green));\n  animation-direction: reverse;\n}\n\n.trailDot:nth-child(4n) {\n  width: 6px;\n  height: 6px;\n  background: radial-gradient(circle, var(--sky-blue), transparent);\n}\n\n@media (max-width: 768px) {\n  .particle {\n    font-size: 20px;\n  }\n  \n  .growthCore {\n    font-size: 36px;\n  }\n  \n  .butterflyTrail {\n    width: 200px;\n    height: 200px;\n  }\n  \n  .trailDot {\n    width: 6px;\n    height: 6px;\n  }\n}",
  "styles/GardenFairy.module.css": "/* 정원 요정 컴포넌트 스타일 */\n\n.fairyButton {\n  position: fixed;\n  top: 80px;\n  right: 20px;\n  z-index: 1000;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.fairyButton:hover {\n  transform: scale(1.1);\n}\n\n.fairyIcon {\n  position: relative;\n  width: 50px;\n  height: 50px;\n  background: linear-gradient(135deg, #7FB069, #4A7C59);\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 4px 12px rgba(74, 124, 89, 0.3);\n  animation: fairyFloat 3s ease-in-out infinite;\n}\n\n.fairyEmoji {\n  font-size: 24px;\n  animation: fairySparkle 2s ease-in-out infinite;\n}\n\n.sparkleEffect {\n  position: absolute;\n  top: -5px;\n  right: -5px;\n  color: #FFD700;\n  animation: sparkleRotate 2s linear infinite;\n}\n\n.sparkle {\n  font-size: 16px;\n}\n\n.fairyTooltip {\n  position: absolute;\n  top: 55px;\n  right: 0;\n  background: rgba(74, 124, 89, 0.9);\n  color: white;\n  padding: 6px 12px;\n  border-radius: 8px;\n  font-size: 12px;\n  white-space: nowrap;\n  opacity: 0;\n  transform: translateY(-10px);\n  transition: all 0.3s ease;\n  pointer-events: none;\n}\n\n.fairyButton:hover .fairyTooltip {\n  opacity: 1;\n  transform: translateY(0);\n}\n\n/* 精灵对话模态框样式 */\n.fairyModal {\n  --height: 100vh;\n  --width: 100vw;\n  --border-radius: 0;\n  --box-shadow: none;\n}\n\n.fairyModal ion-content {\n  --padding-bottom: 0;\n  --offset-bottom: 0;\n}\n\n/* 모달 스타일 */\n.modalHeader {\n  --background: linear-gradient(135deg, #7FB069, #4A7C59);\n  --color: white;\n}\n\n.modalTitle {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-weight: 600;\n}\n\n.titleIcon {\n  font-size: 20px;\n}\n\n.closeButton {\n  --color: white;\n}\n\n/* Header中的精灵切换按钮样式 */\n.headerModelSwitchButton {\n  --color: white;\n  --padding-start: 8px;\n  --padding-end: 8px;\n  margin-right: 8px;\n}\n\n.headerModelSwitchButton:hover {\n  --color: rgba(255, 255, 255, 0.8);\n}\n\n/* 模态框容器 - 使用 flex 布局 */\n.modalContainer {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  background: linear-gradient(to bottom, #F0F8F0, #E8F5E8);\n}\n\n/* 消息列表容器 - 可滚动区域 */\n.messagesContainer {\n  flex: 1;\n  overflow-y: auto;\n  overflow-x: hidden;\n  padding: 16px;\n  padding-bottom: 0;\n  /* max-height: calc(100vh-20px); */\n}\n\n.messagesList {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  min-height: 100%;\n}\n\n.messageItem {\n  display: flex;\n  width: 100%;\n}\n\n.userMessage {\n  justify-content: flex-end;\n}\n\n.fairyMessage {\n  justify-content: flex-start;\n}\n\n.messageContent {\n  display: flex;\n  align-items: flex-end;\n  gap: 8px;\n  max-width: 85%;\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n}\n\n.messageIcon {\n  font-size: 20px;\n  margin-bottom: 4px;\n}\n\n.messageBubble {\n  padding: 12px 16px;\n  border-radius: 18px;\n  position: relative;\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n  hyphens: auto;\n  max-width: 100%;\n  display: flex;\n  align-items: flex-start;\n  gap: 8px;\n  cursor: pointer;\n  user-select: none;\n  transition: all 0.2s ease;\n}\n\n.userMessage .messageBubble {\n  background: linear-gradient(135deg, #4A7C59, #7FB069);\n  color: white;\n  border-bottom-right-radius: 6px;\n}\n\n.fairyMessage .messageBubble {\n  background: white;\n  color: #2E5233;\n  border: 1px solid rgba(74, 124, 89, 0.2);\n  border-bottom-left-radius: 6px;\n  box-shadow: 0 2px 8px rgba(74, 124, 89, 0.1);\n}\n\n.messageText {\n  margin: 0;\n  font-size: 14px;\n  line-height: 1.5;\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n  white-space: pre-wrap;\n  flex: 1;\n}\n\n.loadingSpinner {\n  --color: #7FB069;\n  width: 20px;\n  height: 20px;\n}\n\n/* 长按和复制状态样式 */\n.messageBubble:active {\n  transform: scale(0.98);\n  opacity: 0.8;\n}\n\n.messageBubble.copied {\n  border: 2px solid #4A7C59;\n  box-shadow: 0 0 0 2px rgba(74, 124, 89, 0.2);\n}\n\n.userMessage .messageBubble.copied {\n  border: 2px solid #7FB069;\n  box-shadow: 0 0 0 2px rgba(127, 176, 105, 0.2);\n}\n\n.copiedIcon {\n  color: #4A7C59;\n  font-size: 18px;\n  flex-shrink: 0;\n  animation: checkmarkPulse 0.3s ease;\n}\n\n.userMessage .copiedIcon {\n  color: white;\n}\n\n@keyframes checkmarkPulse {\n  0% {\n    transform: scale(0);\n    opacity: 0;\n  }\n  50% {\n    transform: scale(1.2);\n    opacity: 1;\n  }\n  100% {\n    transform: scale(1);\n    opacity: 1;\n  }\n}\n\n/* 빠른 질문 섹션 */\n.quickQuestions {\n  padding: 16px;\n  background: rgba(255, 255, 255, 0.8);\n  border-top: 1px solid rgba(74, 124, 89, 0.1);\n}\n\n.quickQuestionsTitle {\n  margin: 0 0 12px 0;\n  font-size: 14px;\n  font-weight: 600;\n  color: #4A7C59;\n  text-align: center;\n}\n\n.quickQuestionButtons {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n  justify-content: center;\n}\n\n.quickQuestionChip {\n  --background: white;\n  --color: #4A7C59;\n  border: 1px solid rgba(74, 124, 89, 0.3);\n  border-radius: 20px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.quickQuestionChip:hover {\n  --background: #F0F8F0;\n  transform: translateY(-2px);\n  box-shadow: 0 4px 12px rgba(74, 124, 89, 0.2);\n}\n\n.quickQuestionIcon {\n  margin-right: 4px;\n}\n\n.quickQuestionText {\n  font-size: 12px;\n  font-weight: 500;\n}\n\n/* 输入框容器 - 固定在底部 */\n.inputContainer {\n  flex-shrink: 0;\n  padding: 16px 16px max(8px, env(safe-area-inset-bottom)) 16px;\n  background: white;\n  border-top: 1px solid rgba(74, 124, 89, 0.1);\n}\n\n.inputItem {\n  --background: #F8FDF8;\n  --border-color: rgba(74, 124, 89, 0.3);\n  border-radius: 25px;\n  padding: 0 16px;\n  width: 100%;\n}\n\n.textInput {\n  --color: #2E5233;\n  --placeholder-color: rgba(46, 82, 51, 0.6);\n  font-size: 14px;\n}\n\n.sendButton {\n  --color: #7FB069;\n  margin-left: 8px;\n}\n\n.sendButton:hover {\n  --color: #4A7C59;\n}\n\n\n/* 애니메이션 */\n@keyframes fairyFloat {\n  0%, 100% {\n    transform: translateY(0px);\n  }\n  50% {\n    transform: translateY(-8px);\n  }\n}\n\n@keyframes fairySparkle {\n  0%, 100% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.1);\n  }\n}\n\n@keyframes sparkleRotate {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n/* 반응형 디자인 */\n@media (max-width: 768px) {\n  .fairyButton {\n    top: 70px;\n    right: 16px;\n  }\n  \n  .fairyIcon {\n    width: 45px;\n    height: 45px;\n  }\n  \n  .fairyEmoji {\n    font-size: 22px;\n  }\n  \n  .messageContent {\n    max-width: 90%;\n  }\n  \n  .messageBubble {\n    padding: 10px 14px;\n  }\n  \n  .messageText {\n    font-size: 13px;\n    line-height: 1.4;\n  }\n  \n  .quickQuestionButtons {\n    gap: 6px;\n  }\n  \n  .quickQuestionText {\n    font-size: 11px;\n  }\n}",
  "styles/LanguageSelector.module.css": ".languageSelector {\n  display: inline-block;\n}\n\n.languageButton {\n  --background: rgba(255, 255, 255, 0.9);\n  --background-hover: rgba(255, 255, 255, 1);\n  --background-activated: rgba(240, 240, 240, 1);\n  --border-color: rgba(74, 124, 89, 0.3);\n  --border-width: 1px;\n  --border-radius: 12px;\n  --color: #4A7C59;\n  --padding-start: 12px;\n  --padding-end: 12px;\n  --padding-top: 8px;\n  --padding-bottom: 8px;\n  height: auto;\n  min-height: 36px;\n  font-size: 14px;\n  font-weight: 500;\n  box-shadow: 0 2px 8px rgba(74, 124, 89, 0.1);\n  transition: all 0.3s ease;\n}\n\n.languageButton:hover {\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(74, 124, 89, 0.15);\n}\n\n.languageFlag {\n  font-size: 16px;\n  margin-right: 6px;\n}\n\n.languageCode {\n  font-weight: 600;\n  margin-right: 4px;\n  letter-spacing: 0.5px;\n}\n\n.languageIcon {\n  font-size: 16px;\n  margin-left: 4px;\n  opacity: 0.7;\n}\n\n.languagePopover {\n  --width: 280px;\n  --max-width: 90vw;\n  --border-radius: 16px;\n  --box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);\n}\n\n.popoverHeader {\n  padding: 16px 20px 8px;\n  border-bottom: 1px solid rgba(74, 124, 89, 0.1);\n  background: linear-gradient(135deg, #f8fdf9 0%, #f0f8f2 100%);\n}\n\n.popoverTitle {\n  margin: 0;\n  font-size: 16px;\n  font-weight: 600;\n  color: #2E5233;\n  text-align: center;\n}\n\n.languageList {\n  padding: 8px 0;\n}\n\n.languageItem {\n  --padding-start: 0;\n  --padding-end: 0;\n  --inner-padding-start: 20px;\n  --inner-padding-end: 20px;\n  --min-height: 56px;\n  --background: transparent;\n  --background-hover: rgba(74, 124, 89, 0.05);\n  --background-activated: rgba(74, 124, 89, 0.1);\n  transition: all 0.2s ease;\n}\n\n.languageItem.selected {\n  --background: rgba(74, 124, 89, 0.08);\n}\n\n.languageItem:hover {\n  --background: rgba(74, 124, 89, 0.05);\n}\n\n.languageOption {\n  display: flex;\n  align-items: center;\n  width: 100%;\n  gap: 12px;\n}\n\n.optionFlag {\n  font-size: 20px;\n  flex-shrink: 0;\n}\n\n.optionText {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n}\n\n.optionName {\n  font-size: 15px;\n  font-weight: 500;\n  color: #2E5233;\n  line-height: 1.2;\n}\n\n.optionCode {\n  font-size: 13px;\n  color: #6B8E6B;\n  opacity: 0.8;\n}\n\n.checkIcon {\n  color: #4A7C59;\n  font-size: 18px;\n  flex-shrink: 0;\n}\n\n.popoverFooter {\n  padding: 8px 20px 16px;\n  border-top: 1px solid rgba(74, 124, 89, 0.1);\n  background: rgba(248, 253, 249, 0.5);\n}\n\n.footerText {\n  margin: 0;\n  font-size: 12px;\n  color: #6B8E6B;\n  text-align: center;\n  opacity: 0.8;\n}\n\n/* 深色模式支持 */\n@media (prefers-color-scheme: dark) {\n  .languageButton {\n    --background: rgba(45, 45, 45, 0.9);\n    --background-hover: rgba(55, 55, 55, 1);\n    --background-activated: rgba(35, 35, 35, 1);\n    --border-color: rgba(139, 195, 74, 0.3);\n    --color: #8BC34A;\n  }\n\n  .popoverHeader {\n    background: linear-gradient(135deg, #2a2a2a 0%, #1e1e1e 100%);\n  }\n\n  .popoverTitle {\n    color: #8BC34A;\n  }\n\n  .languageItem.selected {\n    --background: rgba(139, 195, 74, 0.15);\n  }\n\n  .languageItem:hover {\n    --background: rgba(139, 195, 74, 0.1);\n  }\n\n  .optionName {\n    color: #E8F5E8;\n  }\n\n  .optionCode {\n    color: #A5C9A5;\n  }\n\n  .checkIcon {\n    color: #8BC34A;\n  }\n\n  .popoverFooter {\n    background: rgba(42, 42, 42, 0.5);\n  }\n\n  .footerText {\n    color: #A5C9A5;\n  }\n}\n\n/* 响应式设计 */\n@media (max-width: 480px) {\n  .languagePopover {\n    --width: 260px;\n  }\n\n  .languageButton {\n    --padding-start: 10px;\n    --padding-end: 10px;\n    min-height: 32px;\n    font-size: 13px;\n  }\n\n  .languageFlag {\n    font-size: 14px;\n    margin-right: 4px;\n  }\n\n  .languageCode {\n    margin-right: 2px;\n  }\n\n  .languageIcon {\n    font-size: 14px;\n    margin-left: 2px;\n  }\n}\n\n/* 动画效果 */\n.languageItem {\n  animation: fadeInUp 0.3s ease forwards;\n}\n\n.languageItem:nth-child(1) { animation-delay: 0.1s; }\n.languageItem:nth-child(2) { animation-delay: 0.2s; }\n\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}",
  "styles/Loading.module.css": ".overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(8px);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 9999;\n  animation: fadeIn 0.3s ease-in-out;\n}\n\n.container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 2rem;\n  background: linear-gradient(135deg, #f0f8f0 0%, #e8f5e8 100%);\n  border-radius: 20px;\n  box-shadow: 0 10px 30px rgba(46, 125, 50, 0.1);\n  border: 1px solid rgba(46, 125, 50, 0.1);\n  backdrop-filter: blur(10px);\n  min-width: 200px;\n  text-align: center;\n}\n\n.spinner {\n  position: relative;\n  width: 80px;\n  height: 80px;\n  margin-bottom: 1.5rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.leaf {\n  position: absolute;\n  font-size: 2rem;\n  animation: rotate 2s linear infinite;\n  transform-origin: center;\n}\n\n.leaf:nth-child(1) {\n  animation-delay: 0s;\n  top: 0;\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n.leaf:nth-child(2) {\n  animation-delay: -0.66s;\n  top: 50%;\n  right: 0;\n  transform: translateY(-50%);\n}\n\n.leaf:nth-child(3) {\n  animation-delay: -1.33s;\n  bottom: 0;\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n.message {\n  color: #2E7D32;\n  font-size: 1rem;\n  font-weight: 500;\n  margin: 0;\n  letter-spacing: 0.5px;\n  opacity: 0.9;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: scale(0.95);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n\n@keyframes rotate {\n  0% {\n    transform: rotate(0deg) translateX(30px) rotate(0deg);\n    opacity: 1;\n    scale: 1;\n  }\n  50% {\n    opacity: 0.7;\n    scale: 1.2;\n  }\n  100% {\n    transform: rotate(360deg) translateX(30px) rotate(-360deg);\n    opacity: 1;\n    scale: 1;\n  }\n}\n\n/* 响应式设计 */\n@media (max-width: 480px) {\n  .container {\n    padding: 1.5rem;\n    min-width: 160px;\n  }\n  \n  .spinner {\n    width: 60px;\n    height: 60px;\n    margin-bottom: 1rem;\n  }\n  \n  .leaf {\n    font-size: 1.5rem;\n  }\n  \n  .leaf:nth-child(1),\n  .leaf:nth-child(3) {\n    transform: translateX(-50%);\n  }\n  \n  .leaf:nth-child(2) {\n    transform: translateY(-50%);\n  }\n  \n  .message {\n    font-size: 0.9rem;\n  }\n  \n  @keyframes rotate {\n    0% {\n      transform: rotate(0deg) translateX(20px) rotate(0deg);\n      opacity: 1;\n      scale: 1;\n    }\n    50% {\n      opacity: 0.7;\n      scale: 1.2;\n    }\n    100% {\n      transform: rotate(360deg) translateX(20px) rotate(-360deg);\n      opacity: 1;\n      scale: 1;\n    }\n  }\n}",
  "styles/SettingsTab.module.css": "/* 设置页面容器 */\n.container {\n  padding: 0;\n  background: #FAFCFA;\n  min-height: 100vh;\n}\n\n/* 应用信息 */\n.appInfo {\n  text-align: center;\n  padding: 16px 0;\n}\n\n.appDescription {\n  font-size: 14px;\n  color: #6B8E6B;\n  line-height: 1.6;\n  margin: 0 0 16px 0;\n}\n\n.version {\n  font-size: 12px;\n  color: #9CA3AF;\n  font-weight: 500;\n}\n\n/* 语言设置部分 */\n.languageSection {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 16px;\n  padding: 16px 0;\n}\n\n.languageInfo {\n  flex: 1;\n}\n\n.languageDescription {\n  margin: 0 0 12px 0;\n  font-size: 14px;\n  color: #6B8E6B;\n  line-height: 1.5;\n}\n\n.currentLanguageDisplay {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 14px;\n}\n\n.currentLanguageLabel {\n  color: #4A7C59;\n  font-weight: 500;\n}\n\n.currentLanguageValue {\n  color: #2E5233;\n  font-weight: 600;\n  padding: 4px 8px;\n  background: rgba(74, 124, 89, 0.1);\n  border-radius: 6px;\n  font-size: 13px;\n}\n\n.languageSelectorContainer {\n  flex-shrink: 0;\n}\n\n/* 成就徽章 */\n.achievementBadge {\n  display: flex;\n  align-items: center;\n  gap: 16px;\n  padding: 20px;\n  background: linear-gradient(135deg, #E8F5E8, #F0F9F0);\n  border-radius: 16px;\n  border: 2px solid #BED8A3;\n  margin-bottom: 24px;\n}\n\n.achievementIcon {\n  font-size: 48px;\n  line-height: 1;\n}\n\n.achievementText {\n  flex: 1;\n}\n\n.achievementTitle {\n  font-size: 20px;\n  font-weight: 700;\n  color: #2E7D32;\n  margin-bottom: 4px;\n}\n\n.achievementSubtitle {\n  font-size: 14px;\n  color: #6B8E6B;\n  line-height: 1.4;\n}\n\n/* 今日成就部分 */\n.todaySection {\n  margin-bottom: 32px;\n}\n\n.sectionTitle {\n  font-size: 18px;\n  font-weight: 600;\n  color: #2E7D32;\n  margin: 0 0 16px 0;\n}\n\n.todayStats {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 12px;\n  margin-bottom: 16px;\n}\n\n.todayStat {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 16px 8px;\n  background: white;\n  border-radius: 12px;\n  border: 1px solid #E5E7EB;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n}\n\n.todayIcon {\n  font-size: 24px;\n  margin-bottom: 8px;\n}\n\n.todayValue {\n  font-size: 18px;\n  font-weight: 700;\n  color: #2E7D32;\n  margin-bottom: 4px;\n}\n\n.todayLabel {\n  font-size: 12px;\n  color: #6B8E6B;\n  text-align: center;\n  line-height: 1.3;\n}\n\n.todayMessage {\n  text-align: center;\n  font-size: 14px;\n  color: #4A7C59;\n  font-style: italic;\n}\n\n/* 花园统计网格 */\n.gardenStatsGrid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n  gap: 20px;\n  margin: 24px 0;\n}\n\n.gardenStatCard {\n  background: white;\n  border-radius: 16px;\n  padding: 20px;\n  border: 1px solid #E5E7EB;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);\n  position: relative;\n  overflow: hidden;\n  transition: all 0.3s ease;\n  cursor: pointer;\n}\n\n.gardenStatCard.interactive:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);\n}\n\n.cardHeader {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: 16px;\n}\n\n.statIcon {\n  font-size: 32px;\n  line-height: 1;\n}\n\n.infoIcon {\n  color: #9CA3AF;\n  font-size: 16px;\n}\n\n.statContent {\n  flex: 1;\n}\n\n.statTitle {\n  font-size: 16px;\n  font-weight: 600;\n  color: #1F2937;\n  margin-bottom: 4px;\n}\n\n.statSubtitle {\n  font-size: 12px;\n  color: #6B7280;\n  margin-bottom: 12px;\n}\n\n.statValue {\n  font-size: 28px;\n  font-weight: 700;\n  color: #2E7D32;\n  margin-bottom: 16px;\n}\n\n.emptyState {\n  font-size: 14px;\n  color: #9CA3AF;\n  font-weight: 400;\n}\n\n.countUp {\n  display: inline-block;\n  animation: countUp 1s ease-out;\n}\n\n@keyframes countUp {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.progressContainer {\n  margin-bottom: 12px;\n}\n\n.progressBar {\n  height: 6px;\n  background: #F3F4F6;\n  border-radius: 3px;\n  overflow: hidden;\n  margin-bottom: 4px;\n}\n\n.progressFill {\n  height: 100%;\n  background: linear-gradient(90deg, #2E7D32, #7FB069);\n  border-radius: 3px;\n  transition: width 1s ease-out;\n}\n\n.progressText {\n  font-size: 12px;\n  color: #6B7280;\n  font-weight: 500;\n}\n\n.encouragement {\n  font-size: 13px;\n  color: #4A7C59;\n  line-height: 1.4;\n  font-style: italic;\n}\n\n.cardGlow {\n  position: absolute;\n  top: -2px;\n  left: -2px;\n  right: -2px;\n  bottom: -2px;\n  background: linear-gradient(45deg, #2E7D32, #7FB069, #BED8A3);\n  border-radius: 18px;\n  z-index: -1;\n  opacity: 0;\n  transition: opacity 0.3s ease;\n}\n\n.gardenStatCard:hover .cardGlow {\n  opacity: 0.1;\n}\n\n/* 空花园消息 */\n.emptyGardenMessage {\n  text-align: center;\n  padding: 40px 20px;\n  background: #F9FBF9;\n  border-radius: 16px;\n  border: 2px dashed #BED8A3;\n  margin: 24px 0;\n}\n\n.emptyGardenIcon {\n  font-size: 48px;\n  margin-bottom: 16px;\n}\n\n.startButton {\n  margin-top: 16px;\n  padding: 12px 24px;\n  background: var(--button-primary-bg);\n  color: white;\n  border-radius: 8px;\n  font-size: 14px;\n  font-weight: 500;\n  display: inline-block;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  box-shadow: 0 2px 8px var(--button-primary-shadow);\n}\n\n.startButton:hover {\n  background: var(--button-primary-hover-bg);\n  transform: translateY(-2px);\n  box-shadow: 0 4px 12px var(--button-primary-hover-shadow);\n}\n\n.startButton:active {\n  background: var(--button-primary-active-bg);\n  transform: translateY(0);\n  box-shadow: 0 1px 4px var(--button-primary-active-shadow);\n}\n\n/* 励志语录 */\n.motivationalQuotes {\n  margin: 24px 0;\n}\n\n.quote {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  padding: 16px;\n  background: #F0F9F0;\n  border-radius: 12px;\n  border-left: 4px solid #2E7D32;\n}\n\n.quoteIcon {\n  font-size: 20px;\n  flex-shrink: 0;\n}\n\n.quoteText {\n  font-size: 14px;\n  color: #2E5233;\n  line-height: 1.5;\n  font-style: italic;\n}\n\n/* 花园预览 */\n.gardenPreview {\n  min-height: 120px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.emptyGarden {\n  text-align: center;\n  color: #6B7280;\n}\n\n.seedling {\n  font-size: 48px;\n  margin-bottom: 12px;\n  display: block;\n}\n\n.plantGarden {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n  justify-content: center;\n  align-items: center;\n}\n\n.gardenPlant {\n  font-size: 24px;\n  animation: plantGrow 0.6s ease-out;\n}\n\n@keyframes plantGrow {\n  0% {\n    transform: scale(0) rotate(-180deg);\n    opacity: 0;\n  }\n  50% {\n    transform: scale(1.2) rotate(0deg);\n    opacity: 0.8;\n  }\n  100% {\n    transform: scale(1) rotate(0deg);\n    opacity: 1;\n  }\n}\n\n.morePlants {\n  padding: 8px 12px;\n  background: #E5E7EB;\n  border-radius: 16px;\n  font-size: 12px;\n  color: #6B7280;\n  font-weight: 500;\n}\n\n/* 模态框样式 */\n.modalContent {\n  padding: 0;\n}\n\n.modalHeader {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px 24px;\n  border-bottom: 1px solid #E5E7EB;\n}\n\n.closeButton {\n  --color: #6B7280;\n}\n\n.modalBody {\n  padding: 24px;\n}\n\n.modalStats {\n  margin-bottom: 24px;\n}\n\n.modalMainStat {\n  text-align: center;\n  margin-bottom: 24px;\n}\n\n.modalMainValue {\n  display: block;\n  font-size: 48px;\n  font-weight: 700;\n  color: #2E7D32;\n  margin-bottom: 8px;\n}\n\n.modalMainLabel {\n  font-size: 16px;\n  color: #6B7280;\n  font-weight: 500;\n}\n\n.modalDetailStats {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n  gap: 16px;\n}\n\n.modalDetailStat {\n  text-align: center;\n  padding: 12px;\n  background: #F9FAFB;\n  border-radius: 8px;\n}\n\n.modalDetailLabel {\n  display: block;\n  font-size: 12px;\n  color: #6B7280;\n  margin-bottom: 4px;\n  font-weight: 500;\n}\n\n.modalDetailValue {\n  font-size: 18px;\n  font-weight: 600;\n  color: #1F2937;\n}\n\n.modalMessage {\n  text-align: center;\n  padding: 16px;\n  background: #F0F9F0;\n  border-radius: 12px;\n  border: 1px solid #BED8A3;\n}\n\n/* 响应式设计 */\n@media (max-width: 768px) {\n  .languageSection {\n    flex-direction: column;\n    align-items: stretch;\n    gap: 12px;\n  }\n\n  .languageSelectorContainer {\n    align-self: center;\n  }\n\n  .todayStats {\n    grid-template-columns: 1fr;\n    gap: 8px;\n  }\n\n  .todayStat {\n    flex-direction: row;\n    justify-content: space-between;\n    text-align: left;\n    padding: 12px 16px;\n  }\n\n  .todayIcon {\n    margin-bottom: 0;\n    margin-right: 12px;\n  }\n\n  .gardenStatsGrid {\n    grid-template-columns: 1fr;\n    gap: 16px;\n  }\n\n  .modalDetailStats {\n    grid-template-columns: repeat(2, 1fr);\n  }\n}",
  "styles/StatsTab.module.css": ".container {\n  padding: 16px;\n  padding-bottom: 100px;\n  min-height: 100vh;\n  background: linear-gradient(\n    180deg,\n    #FFFFFF 0%,      /* 순수한 흰색 */\n    #FAFCFA 25%,     /* 거의 흰색에 가까운 연한 녹색 */\n    #F8FBF8 50%,     /* 매우 밝은 녹색 */\n    #F5F9F5 75%,     /* 연한 녹색 */\n    #F8FBF8 100%     /* 하단 밝은 녹색 */\n  );\n}\n\n/* 할일 페이지와 동일한 카드 디자인 */\n.gardenCard {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  border-radius: 20px;\n  padding: 24px;\n  margin-bottom: 20px;\n  box-shadow: \n    0 4px 16px rgba(200, 230, 201, 0.08),\n    0 1px 4px rgba(200, 230, 201, 0.05);\n  border: 1px solid rgba(200, 230, 201, 0.15);\n  position: relative;\n  overflow: hidden;\n}\n\n.gardenCard::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 3px;\n  background: linear-gradient(90deg, #2E7D32, #7FB069, #BED8A3);\n  border-radius: 20px 20px 0 0;\n}\n\n.cardTitle {\n  font-size: 20px;\n  font-weight: 700;\n  color: #2E7D32;\n  margin: 0 0 20px 0;\n  text-align: center;\n  text-shadow: 0 1px 2px rgba(46, 125, 50, 0.1);\n}\n\n/* Period Selector - 使用 indicator-color 优化 */\n.periodSelector {\n  background: rgba(200, 230, 201, 0.15);\n  border-radius: 16px;\n  padding: 6px;\n  box-shadow: \n    0 2px 8px rgba(200, 230, 201, 0.1),\n    inset 0 1px 2px rgba(200, 230, 201, 0.1);\n  border: 1px solid rgba(200, 230, 201, 0.2);\n  \n  /* 使用 Ionic 推荐的 CSS 变量 */\n  --background: rgba(200, 230, 201, 0.15);\n  --border-radius: 16px;\n}\n\n.periodSelector ion-segment-button {\n  /* 基础样式 */\n  --color: #2E7D32;\n  --color-checked: white;\n  --background: transparent;\n  --border-radius: 12px;\n  \n  /* 使用 indicator 相关变量优化选中效果 */\n  --indicator-color: #2E7D32;\n  --indicator-height: 100%;\n  --indicator-box-shadow: 0 2px 8px rgba(46, 125, 50, 0.3);\n  --indicator-transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  \n  /* 文字和布局 */\n  font-weight: 600;\n  font-size: 14px;\n  margin: 2px;\n}\n\n/* Hover和Focus效果 */\n.periodSelector ion-segment-button:hover {\n  --background-hover: rgba(200, 230, 201, 0.2);\n  --background-hover-opacity: 1;\n}\n\n.periodSelector ion-segment-button:focus {\n  --background-focused: rgba(200, 230, 201, 0.15);\n  --background-focused-opacity: 1;\n}\n\n/* Stats Grid - 할일 페이지와 동일한 스타일 */\n.statsGrid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));\n  gap: 16px;\n  margin-top: 16px;\n}\n\n.statCard {\n  background: rgba(255, 255, 255, 0.9);\n  backdrop-filter: blur(5px);\n  border: 1px solid rgba(200, 230, 201, 0.2);\n  border-radius: 16px;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n  box-shadow: \n    0 4px 16px rgba(200, 230, 201, 0.1),\n    0 1px 4px rgba(200, 230, 201, 0.05);\n  transition: all 0.3s ease;\n  position: relative;\n  overflow: hidden;\n}\n\n.statCard::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 2px;\n  background: linear-gradient(90deg, #2E7D32, #7FB069);\n}\n\n.statCard:hover {\n  transform: translateY(-2px);\n  box-shadow: \n    0 8px 24px rgba(200, 230, 201, 0.15),\n    0 2px 8px rgba(200, 230, 201, 0.1);\n}\n\n.statIcon {\n  font-size: 32px;\n  animation: gentle-bounce 3s ease-in-out infinite;\n}\n\n@keyframes gentle-bounce {\n  0%, 100% { \n    transform: translateY(0px);\n  }\n  50% { \n    transform: translateY(-3px);\n  }\n}\n\n.statContent {\n  text-align: center;\n}\n\n.statNumber {\n  font-size: 24px;\n  font-weight: 700;\n  color: #2E7D32;\n  margin-bottom: 4px;\n  text-shadow: 0 1px 2px rgba(46, 125, 50, 0.1);\n}\n\n.statLabel {\n  font-size: 14px;\n  color: #7FB069;\n  font-weight: 500;\n}\n\n/* Daily Chart - 자연 정원 스타일 */\n.dailyChart {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-end;\n  height: 140px;\n  margin-top: 20px;\n  padding: 16px;\n  background: linear-gradient(135deg, rgba(248, 251, 248, 0.8), rgba(245, 249, 245, 0.9));\n  border-radius: 16px;\n  border: 1px solid rgba(200, 230, 201, 0.2);\n  box-shadow: \n    0 2px 8px rgba(200, 230, 201, 0.1),\n    inset 0 1px 2px rgba(255, 255, 255, 0.8);\n}\n\n.dayColumn {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  flex: 1;\n  max-width: 50px;\n}\n\n.dayBar {\n  width: 28px;\n  height: 90px;\n  background: rgba(200, 230, 201, 0.3);\n  border-radius: 14px;\n  position: relative;\n  overflow: hidden;\n  margin-bottom: 8px;\n  box-shadow: \n    inset 0 2px 4px rgba(200, 230, 201, 0.2),\n    0 1px 2px rgba(200, 230, 201, 0.1);\n  border: 1px solid rgba(200, 230, 201, 0.2);\n}\n\n.dayBarFill {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background: linear-gradient(180deg, #7FB069, #2E7D32);\n  border-radius: 14px;\n  transition: height 0.5s ease;\n  min-height: 4px;\n  box-shadow: \n    0 2px 8px rgba(46, 125, 50, 0.3),\n    inset 0 1px 2px rgba(255, 255, 255, 0.3);\n}\n\n.dayLabel {\n  font-size: 12px;\n  color: #7FB069;\n  font-weight: 600;\n  margin-bottom: 4px;\n}\n\n.dayValue {\n  font-size: 12px;\n  color: #2E7D32;\n  font-weight: 600;\n  display: flex;\n  align-items: center;\n  gap: 2px;\n}\n\n/* Plant Collection - 할일 페이지 스타일 */\n.plantCollection {\n  margin-top: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n}\n\n.plantStat {\n  display: flex;\n  align-items: center;\n  gap: 16px;\n  padding: 16px;\n  background: rgba(255, 255, 255, 0.9);\n  backdrop-filter: blur(5px);\n  border-radius: 16px;\n  border: 1px solid rgba(200, 230, 201, 0.2);\n  box-shadow: \n    0 4px 16px rgba(200, 230, 201, 0.1),\n    0 1px 4px rgba(200, 230, 201, 0.05);\n  position: relative;\n  overflow: hidden;\n  transition: all 0.3s ease;\n}\n\n.plantStat::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 2px;\n  background: linear-gradient(90deg, #2E7D32, #7FB069);\n}\n\n.plantStat:hover {\n  transform: translateY(-1px);\n  box-shadow: \n    0 6px 20px rgba(200, 230, 201, 0.15),\n    0 2px 8px rgba(200, 230, 201, 0.1);\n}\n\n.plantEmoji {\n  font-size: 32px;\n  flex-shrink: 0;\n  animation: gentle-bounce 2s ease-in-out infinite;\n}\n\n.plantInfo {\n  flex: 1;\n  min-width: 0;\n}\n\n.plantName {\n  font-size: 16px;\n  font-weight: 600;\n  color: #2E7D32;\n  margin-bottom: 4px;\n}\n\n.plantCount {\n  font-size: 14px;\n  color: #7FB069;\n  font-weight: 500;\n}\n\n.plantProgress {\n  width: 80px;\n  height: 8px;\n  background: rgba(200, 230, 201, 0.3);\n  border-radius: 4px;\n  overflow: hidden;\n  flex-shrink: 0;\n  border: 1px solid rgba(200, 230, 201, 0.2);\n}\n\n.plantProgressFill {\n  height: 100%;\n  background: linear-gradient(90deg, #2E7D32, #7FB069);\n  border-radius: 4px;\n  transition: width 0.5s ease;\n  box-shadow: 0 1px 2px rgba(46, 125, 50, 0.2);\n}\n\n/* Achievements - 할일 페이지 스타일 */\n.achievements {\n  margin-top: 16px;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 16px;\n}\n\n.achievement {\n  display: flex;\n  align-items: center;\n  gap: 16px;\n  padding: 20px;\n  background: rgba(255, 255, 255, 0.9);\n  backdrop-filter: blur(5px);\n  border-radius: 16px;\n  border: 1px solid rgba(200, 230, 201, 0.2);\n  box-shadow: \n    0 4px 16px rgba(200, 230, 201, 0.1),\n    0 1px 4px rgba(200, 230, 201, 0.05);\n  position: relative;\n  overflow: hidden;\n  transition: all 0.3s ease;\n}\n\n.achievement::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 2px;\n  background: linear-gradient(90deg, #2E7D32, #7FB069);\n}\n\n.achievement:hover {\n  transform: translateY(-1px);\n  box-shadow: \n    0 6px 20px rgba(200, 230, 201, 0.15),\n    0 2px 8px rgba(200, 230, 201, 0.1);\n}\n\n.achievementIcon {\n  font-size: 32px;\n  flex-shrink: 0;\n  animation: gentle-bounce 2s ease-in-out infinite;\n}\n\n.achievementText {\n  flex: 1;\n  min-width: 0;\n}\n\n.achievementTitle {\n  font-size: 14px;\n  color: #7FB069;\n  font-weight: 500;\n  margin-bottom: 4px;\n}\n\n.achievementValue {\n  font-size: 20px;\n  color: #2E7D32;\n  font-weight: 700;\n  text-shadow: 0 1px 2px rgba(46, 125, 50, 0.1);\n}\n\n/* Empty State - 자연 정원 스타일 */\n.emptyState {\n  text-align: center;\n  padding: 40px 20px;\n}\n\n.emptyIcon {\n  font-size: 64px;\n  margin-bottom: 16px;\n  animation: gentle-bounce 3s ease-in-out infinite;\n}\n\n.emptyTitle {\n  font-size: 20px;\n  font-weight: 600;\n  color: #2E7D32;\n  margin: 0 0 12px 0;\n}\n\n.emptyMessage {\n  font-size: 16px;\n  color: #7FB069;\n  line-height: 1.5;\n  margin: 0;\n}\n\n/* 반응형 디자인 */\n@media (max-width: 768px) {\n  .container {\n    padding: 12px;\n    padding-bottom: 100px;\n  }\n  \n  .gardenCard {\n    padding: 20px;\n    margin-bottom: 16px;\n  }\n  \n  .cardTitle {\n    font-size: 18px;\n  }\n  \n  .statsGrid {\n    grid-template-columns: repeat(2, 1fr);\n    gap: 12px;\n  }\n  \n  .statCard {\n    padding: 16px;\n  }\n  \n  .statIcon {\n    font-size: 28px;\n  }\n  \n  .statNumber {\n    font-size: 20px;\n  }\n  \n  .statLabel {\n    font-size: 12px;\n  }\n  \n  .dailyChart {\n    height: 120px;\n    padding: 12px;\n  }\n  \n  .dayBar {\n    width: 24px;\n    height: 70px;\n  }\n  \n  .dayLabel {\n    font-size: 11px;\n  }\n  \n  .dayValue {\n    font-size: 11px;\n  }\n  \n  .achievements {\n    grid-template-columns: 1fr;\n    gap: 12px;\n  }\n  \n  .achievement {\n    padding: 16px;\n  }\n  \n  .achievementIcon {\n    font-size: 28px;\n  }\n  \n  .achievementValue {\n    font-size: 18px;\n  }\n  \n  .plantStat {\n    padding: 12px;\n    gap: 12px;\n  }\n  \n  .plantEmoji {\n    font-size: 28px;\n  }\n  \n  .plantProgress {\n    width: 60px;\n    height: 6px;\n  }\n  \n  .emptyIcon {\n    font-size: 48px;\n  }\n  \n  .emptyTitle {\n    font-size: 18px;\n  }\n  \n  .emptyMessage {\n    font-size: 14px;\n  }\n}",
  "styles/TasksTab.module.css": ".container {\n  min-height: 100vh;\n  background: linear-gradient(135deg, #F8FBF6 0%, #E8F5E8 50%, #F0F8F0 100%);\n  position: relative;\n  overflow-x: hidden;\n}\n\n.gardenBackground {\n  position: relative;\n  padding: 20px;\n  padding-bottom: 100px;\n  background-image: \n    radial-gradient(circle at 20% 80%, rgba(127, 176, 105, 0.1) 0%, transparent 50%),\n    radial-gradient(circle at 80% 20%, rgba(190, 216, 163, 0.1) 0%, transparent 50%),\n    radial-gradient(circle at 40% 40%, rgba(74, 124, 89, 0.05) 0%, transparent 50%);\n}\n\n/* 페이지 헤더 */\n.pageHeader {\n  text-align: center;\n  margin-bottom: 30px;\n  padding: 20px;\n  background: rgba(255, 255, 255, 0.8);\n  border-radius: 20px;\n  backdrop-filter: blur(10px);\n  box-shadow: 0 8px 32px rgba(74, 124, 89, 0.1);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.pageTitle {\n  font-size: 28px;\n  font-weight: 700;\n  color: #4A7C59;\n  margin: 0 0 8px 0;\n  text-shadow: 0 2px 4px rgba(74, 124, 89, 0.1);\n}\n\n.pageSubtitle {\n  font-size: 16px;\n  color: #7FB069;\n  margin: 0;\n  opacity: 0.8;\n}\n\n/* 통계 카드 */\n.statsContainer {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n  gap: 16px;\n  margin-bottom: 30px;\n}\n\n.statCard {\n  background: linear-gradient(135deg, rgba(255, 255, 255, 0.9) 0%, rgba(248, 251, 246, 0.9) 100%);\n  border-radius: 16px;\n  padding: 20px;\n  text-align: center;\n  box-shadow: 0 8px 24px rgba(74, 124, 89, 0.1);\n  border: 2px solid rgba(127, 176, 105, 0.2);\n  backdrop-filter: blur(10px);\n  transition: all 0.3s ease;\n  position: relative;\n  overflow: hidden;\n}\n\n.statCard::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 4px;\n  background: linear-gradient(90deg, #4A7C59, #7FB069, #BED8A3);\n}\n\n.statCard:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 12px 32px rgba(74, 124, 89, 0.15);\n}\n\n.statIcon {\n  font-size: 24px;\n  margin-bottom: 8px;\n  display: block;\n  animation: gentle-bounce 2s ease-in-out infinite;\n}\n\n.statNumber {\n  font-size: 32px;\n  font-weight: 700;\n  color: #4A7C59;\n  margin-bottom: 4px;\n  display: block;\n  text-shadow: 0 2px 4px rgba(74, 124, 89, 0.1);\n}\n\n.statLabel {\n  font-size: 14px;\n  color: #7FB069;\n  font-weight: 500;\n}\n\n/* 필터 섹션 */\n.filterSection {\n  margin-bottom: 24px;\n}\n\n.filterSelect {\n  background: rgba(255, 255, 255, 0.9);\n  border: 2px solid #BED8A3;\n  border-radius: 16px;\n  padding: 16px 20px;\n  font-size: 16px;\n  color: #4A7C59;\n  box-shadow: 0 4px 16px rgba(74, 124, 89, 0.1);\n  backdrop-filter: blur(10px);\n  transition: all 0.3s ease;\n}\n\n.filterSelect:hover {\n  border-color: #7FB069;\n  box-shadow: 0 6px 20px rgba(74, 124, 89, 0.15);\n}\n\n/* 할일 추가 폼 */\n.addTaskForm {\n  margin-bottom: 30px;\n  animation: slide-down 0.3s ease-out;\n}\n\n.formCard {\n  background: linear-gradient(135deg, rgba(255, 255, 255, 0.95) 0%, rgba(248, 251, 246, 0.95) 100%);\n  border-radius: 20px;\n  padding: 24px;\n  box-shadow: 0 12px 40px rgba(74, 124, 89, 0.15);\n  border: 2px solid rgba(190, 216, 163, 0.3);\n  backdrop-filter: blur(15px);\n  position: relative;\n  overflow: hidden;\n}\n\n.formCard::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 4px;\n  background: linear-gradient(90deg, #4A7C59, #7FB069, #BED8A3);\n}\n\n.formHeader {\n  display: flex;\n  align-items: center;\n  margin-bottom: 20px;\n  gap: 12px;\n}\n\n.formIcon {\n  font-size: 24px;\n  animation: gentle-bounce 2s ease-in-out infinite;\n}\n\n.formTitle {\n  font-size: 18px;\n  font-weight: 600;\n  color: #4A7C59;\n  flex: 1;\n}\n\n.closeButton {\n  --color: #7FB069;\n  --background: transparent;\n}\n\n.taskInput {\n  background: rgba(255, 255, 255, 0.8);\n  border: 2px solid #BED8A3;\n  border-radius: 12px;\n  padding: 16px 20px;\n  margin-bottom: 16px;\n  font-size: 16px;\n  color: #4A7C59;\n  transition: all 0.3s ease;\n}\n\n.taskInput:focus {\n  border-color: #7FB069;\n  box-shadow: 0 0 0 4px rgba(127, 176, 105, 0.1);\n  background: rgba(255, 255, 255, 0.95);\n}\n\n.prioritySelect {\n  background: rgba(255, 255, 255, 0.8);\n  border: 2px solid #BED8A3;\n  border-radius: 12px;\n  padding: 16px 20px;\n  margin-bottom: 20px;\n  font-size: 16px;\n  color: #4A7C59;\n  transition: all 0.3s ease;\n}\n\n.prioritySelect:hover {\n  border-color: #7FB069;\n}\n\n.formActions {\n  display: flex;\n  gap: 12px;\n}\n\n.plantButton {\n  --background: var(--button-primary-bg);\n  --color: white;\n  --border-radius: 12px;\n  --padding-start: 20px;\n  --padding-end: 20px;\n  --padding-top: 16px;\n  --padding-bottom: 16px;\n  font-weight: 600;\n  box-shadow: 0 4px 16px var(--button-primary-shadow);\n  transition: all 0.3s ease;\n}\n\n.plantButton:hover {\n  --background: var(--button-primary-hover-bg);\n  transform: translateY(-2px);\n  box-shadow: 0 6px 20px var(--button-primary-hover-shadow);\n}\n\n.plantButton:active {\n  --background: var(--button-primary-active-bg);\n  transform: translateY(0);\n  box-shadow: 0 2px 8px var(--button-primary-active-shadow);\n}\n\n/* 할일 목록 */\n.tasksList {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n}\n\n.taskCard {\n  background: linear-gradient(135deg, rgba(255, 255, 255, 0.95) 0%, rgba(248, 251, 246, 0.9) 100%);\n  border-radius: 16px;\n  padding: 20px;\n  box-shadow: 0 8px 24px rgba(74, 124, 89, 0.1);\n  border: 2px solid rgba(190, 216, 163, 0.3);\n  backdrop-filter: blur(10px);\n  transition: all 0.3s ease;\n  position: relative;\n  overflow: hidden;\n  animation: slide-up 0.3s ease-out;\n}\n\n.taskCard::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  width: 4px;\n  background: linear-gradient(180deg, #4A7C59, #7FB069);\n  transition: all 0.3s ease;\n}\n\n.taskCard:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 12px 32px rgba(74, 124, 89, 0.15);\n}\n\n.taskCard:hover::before {\n  width: 6px;\n}\n\n.priorityBorder {\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  width: 4px;\n  border-left: 4px solid;\n  transition: all 0.3s ease;\n}\n\n.taskContent {\n  display: flex;\n  align-items: flex-start;\n  gap: 16px;\n  position: relative;\n  z-index: 1;\n}\n\n.taskLeft {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  flex-shrink: 0;\n}\n\n.taskCheckbox {\n  width: 24px;\n  height: 24px;\n  border-radius: 50%;\n  --border-color: #7FB069;\n  --checkmark-color: white;\n  --background-checked: #7FB069;\n  transition: all 0.3s ease;\n}\n\n.taskCheckbox:hover {\n  transform: scale(1.1);\n}\n\n.priorityIcon {\n  font-size: 24px;\n  animation: gentle-sway 3s ease-in-out infinite;\n}\n\n.taskInfo {\n  flex: 1;\n  min-width: 0;\n}\n\n.taskText {\n  font-size: 16px;\n  color: #4A7C59;\n  line-height: 1.5;\n  margin-bottom: 8px;\n  font-weight: 500;\n  transition: all 0.3s ease;\n}\n\n.completedText {\n  text-decoration: line-through;\n  color: #7FB069;\n  opacity: 0.7;\n}\n\n.taskMeta {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  font-size: 12px;\n}\n\n.priorityLabel {\n  background: rgba(127, 176, 105, 0.2);\n  color: #4A7C59;\n  padding: 4px 8px;\n  border-radius: 8px;\n  font-weight: 500;\n  font-size: 11px;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.completedTime {\n  color: #7FB069;\n  opacity: 0.8;\n}\n\n.taskActions {\n  display: flex;\n  gap: 8px;\n  flex-shrink: 0;\n}\n\n.editButton, .deleteButton {\n  --color: var(--button-secondary-color);\n  --background: transparent;\n  --border-radius: 8px;\n  transition: all 0.3s ease;\n}\n\n.editButton:hover {\n  --background: var(--button-secondary-hover-bg);\n}\n\n.editButton:active {\n  --background: var(--button-secondary-active-bg);\n}\n\n.deleteButton:hover {\n  --color: #E74C3C;\n  --background: rgba(231, 76, 60, 0.1);\n}\n\n.deleteButton:active {\n  --color: #C0392B;\n  --background: rgba(231, 76, 60, 0.2);\n}\n\n/* 편집 모드 */\n.editMode {\n  width: 100%;\n}\n\n.editInput {\n  background: rgba(255, 255, 255, 0.9);\n  border: 2px solid #BED8A3;\n  border-radius: 8px;\n  padding: 12px 16px;\n  margin-bottom: 12px;\n  font-size: 16px;\n  color: #4A7C59;\n}\n\n.editActions {\n  display: flex;\n  gap: 8px;\n}\n\n.saveButton {\n  --background: var(--button-primary-bg);\n  --color: white;\n  --border-radius: 8px;\n  transition: all 0.3s ease;\n}\n\n.saveButton:hover {\n  --background: var(--button-primary-hover-bg);\n}\n\n.saveButton:active {\n  --background: var(--button-primary-active-bg);\n}\n\n.cancelButton {\n  --color: var(--button-secondary-color);\n  --background: transparent;\n  --border-radius: 8px;\n  transition: all 0.3s ease;\n}\n\n.cancelButton:hover {\n  --background: var(--button-secondary-hover-bg);\n}\n\n.cancelButton:active {\n  --background: var(--button-secondary-active-bg);\n}\n\n/* 완료된 할일 스타일 */\n.completed {\n  opacity: 0.8;\n  background: linear-gradient(135deg, rgba(190, 216, 163, 0.3) 0%, rgba(248, 251, 246, 0.8) 100%);\n}\n\n.completed .taskText {\n  color: #7FB069;\n}\n\n/* 완료 애니메이션 */\n.completing {\n  animation: completion-celebration 1s ease-out;\n}\n\n.completionAnimation {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  pointer-events: none;\n  z-index: 10;\n}\n\n.growthAnimation {\n  font-size: 32px;\n  animation: growth-burst 1s ease-out;\n}\n\n/* 빈 상태 */\n.emptyState {\n  text-align: center;\n  padding: 60px 20px;\n  background: linear-gradient(135deg, rgba(255, 255, 255, 0.8) 0%, rgba(248, 251, 246, 0.6) 100%);\n  border-radius: 20px;\n  border: 2px dashed #BED8A3;\n  backdrop-filter: blur(10px);\n}\n\n.emptyIcon {\n  font-size: 64px;\n  margin-bottom: 20px;\n  display: block;\n  animation: gentle-bounce 2s ease-in-out infinite;\n}\n\n.emptyTitle {\n  font-size: 20px;\n  color: #4A7C59;\n  margin: 0 0 12px 0;\n  font-weight: 600;\n}\n\n.emptyText {\n  font-size: 16px;\n  color: #7FB069;\n  margin: 0 0 24px 0;\n  opacity: 0.8;\n}\n\n.emptyActionButton {\n  --background: var(--button-primary-bg);\n  --color: white;\n  --border-radius: 12px;\n  --padding-start: 24px;\n  --padding-end: 24px;\n  --padding-top: 16px;\n  --padding-bottom: 16px;\n  font-weight: 600;\n  box-shadow: 0 4px 16px var(--button-primary-shadow);\n  transition: all 0.3s ease;\n}\n\n.emptyActionButton:hover {\n  --background: var(--button-primary-hover-bg);\n  transform: translateY(-2px);\n  box-shadow: 0 6px 20px var(--button-primary-hover-shadow);\n}\n\n.emptyActionButton:active {\n  --background: var(--button-primary-active-bg);\n  transform: translateY(0);\n  box-shadow: 0 2px 8px var(--button-primary-active-shadow);\n}\n\n/* 플로팅 버튼 */\n.fabButton {\n  --background: var(--button-primary-bg);\n  --color: white;\n  --box-shadow: 0 8px 24px var(--button-primary-hover-shadow);\n  transition: all 0.3s ease;\n}\n\n.fabButton:hover {\n  --background: var(--button-primary-hover-bg);\n  transform: scale(1.1);\n  --box-shadow: 0 12px 32px var(--button-primary-active-shadow);\n}\n\n.fabButton:active {\n  --background: var(--button-primary-active-bg);\n  transform: scale(1.05);\n  --box-shadow: 0 6px 16px var(--button-primary-shadow);\n}\n\n/* 장식 요소 */\n.decorativeElements {\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  height: 100px;\n  pointer-events: none;\n  z-index: 0;\n}\n\n.decorativeFlower {\n  position: absolute;\n  font-size: 20px;\n  animation: gentle-float 4s ease-in-out infinite;\n  opacity: 0.6;\n}\n\n/* 로딩 상태 */\n.loadingContainer {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 300px;\n  gap: 20px;\n  color: #4A7C59;\n}\n\n.loadingContainer p {\n  margin: 0;\n  font-size: 16px;\n  opacity: 0.8;\n}\n\n/* 애니메이션 */\n@keyframes gentle-bounce {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-8px); }\n}\n\n@keyframes gentle-sway {\n  0%, 100% { transform: rotate(0deg); }\n  25% { transform: rotate(3deg); }\n  75% { transform: rotate(-3deg); }\n}\n\n@keyframes gentle-float {\n  0%, 100% { transform: translateY(0px) rotate(0deg); }\n  33% { transform: translateY(-10px) rotate(5deg); }\n  66% { transform: translateY(-5px) rotate(-3deg); }\n}\n\n@keyframes slide-down {\n  0% {\n    opacity: 0;\n    transform: translateY(-20px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slide-up {\n  0% {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes completion-celebration {\n  0% { transform: scale(1); }\n  50% { transform: scale(1.05); background: rgba(127, 176, 105, 0.2); }\n  100% { transform: scale(1); }\n}\n\n@keyframes growth-burst {\n  0% {\n    transform: scale(0) rotate(0deg);\n    opacity: 0;\n  }\n  50% {\n    transform: scale(1.5) rotate(180deg);\n    opacity: 1;\n  }\n  100% {\n    transform: scale(1) rotate(360deg);\n    opacity: 0;\n  }\n}\n\n/* 삭제 애니메이션 */\n.removing {\n  animation: fade-out 0.3s ease-out forwards;\n}\n\n@keyframes fade-out {\n  0% {\n    opacity: 1;\n    transform: translateY(0) scale(1);\n  }\n  100% {\n    opacity: 0;\n    transform: translateY(-20px) scale(0.95);\n  }\n}\n\n/* 반응형 디자인 */\n@media (max-width: 768px) {\n  .gardenBackground {\n    padding: 16px;\n    padding-bottom: 100px;\n  }\n  \n  .pageTitle {\n    font-size: 24px;\n  }\n  \n  .pageSubtitle {\n    font-size: 14px;\n  }\n  \n  .statsContainer {\n    grid-template-columns: repeat(3, 1fr);\n    gap: 12px;\n  }\n  \n  .statCard {\n    padding: 16px;\n  }\n  \n  .statNumber {\n    font-size: 24px;\n  }\n  \n  .taskCard {\n    padding: 16px;\n  }\n  \n  .taskContent {\n    gap: 12px;\n  }\n  \n  .taskActions {\n    flex-direction: column;\n    gap: 4px;\n  }\n  \n  .formCard {\n    padding: 20px;\n  }\n  \n  .emptyState {\n    padding: 40px 16px;\n  }\n  \n  .emptyIcon {\n    font-size: 48px;\n  }\n}",
  "styles/TimerTab.module.css": ".loadingContainer {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 200px;\n  gap: 16px;\n  color: #2E7D32;\n}\n\n.loadingContainer p {\n  margin: 0;\n  font-size: 14px;\n  opacity: 0.8;\n}\n\n.container {\n  padding: 16px;\n  padding-top: 40px; /* 정원 요정 버튼을 위한 여백 */\n  min-height: 100vh;\n  position: relative;\n  transition: all 0.8s ease;\n  overflow: hidden;\n  /* 할일 페이지와 동일한 밝고 자연스러운 배경 */\n  background: linear-gradient(\n    180deg,\n    #FFFFFF 0%,      /* 순수한 흰색 */\n    #FAFCFA 25%,     /* 거의 흰색에 가까운 연한 녹색 */\n    #F8FBF8 50%,     /* 매우 밝은 녹색 */\n    #F5F9F5 75%,     /* 연한 녹색 */\n    #F8FBF8 100%     /* 하단 밝은 녹색 */\n  );\n}\n\n.gardenBackground {\n  position: relative;\n  z-index: 1;\n}\n\n/* 작업 선택 영역 - 밝고 깔끔한 디자인 */\n.taskSelection {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  border-radius: 20px;\n  padding: 24px;\n  margin-bottom: 24px;\n  box-shadow: \n    0 4px 16px rgba(200, 230, 201, 0.08),\n    0 1px 4px rgba(200, 230, 201, 0.05);\n  border: 1px solid rgba(200, 230, 201, 0.15);\n}\n\n.taskSelectionTitle {\n  font-size: 18px;\n  font-weight: 600;\n  color: #2E7D32;\n  margin: 0 0 16px 0;\n  text-align: center;\n}\n\n.taskSelectContainer {\n  position: relative;\n}\n\n.taskSelect {\n  width: 100%;\n  background: rgba(255, 255, 255, 0.98);\n  border: 1px solid rgba(200, 230, 201, 0.3);\n  border-radius: 16px;\n  padding: 14px 16px;\n  font-size: 16px;\n  color: #2E7D32;\n  backdrop-filter: blur(5px);\n}\n\n.selectIcon {\n  position: absolute;\n  right: 16px;\n  top: 50%;\n  transform: translateY(-50%);\n  color: #2E7D32;\n  pointer-events: none;\n}\n\n.taskOption {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.taskPriorityIcon {\n  font-size: 18px;\n}\n\n.taskText {\n  flex: 1;\n  font-size: 14px;\n}\n\n.noTasksMessage {\n  text-align: center;\n  padding: 24px;\n  color: #2E7D32;\n}\n\n.noTasksIcon {\n  font-size: 32px;\n  display: block;\n  margin-bottom: 8px;\n}\n\n.noTasksMessage p {\n  margin: 0;\n  font-size: 16px;\n}\n\n/* 선택된 작업 표시 - 새로운 디자인 */\n.selectedTaskDisplay {\n  margin-bottom: 24px;\n}\n\n.selectedTaskCard {\n  background: rgba(255, 255, 255, 0.98);\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(200, 230, 201, 0.2);\n  border-radius: 20px;\n  padding: 20px;\n  display: flex;\n  align-items: center;\n  gap: 16px;\n  box-shadow: \n    0 4px 16px rgba(200, 230, 201, 0.08),\n    0 1px 4px rgba(200, 230, 201, 0.05);\n}\n\n.selectedTaskIcon {\n  font-size: 28px;\n  animation: gentle-pulse 3s ease-in-out infinite;\n}\n\n@keyframes gentle-pulse {\n  0%, 100% { \n    transform: scale(1);\n    opacity: 1;\n  }\n  50% { \n    transform: scale(1.05);\n    opacity: 0.9;\n  }\n}\n\n.selectedTaskInfo {\n  flex: 1;\n}\n\n.selectedTaskTitle {\n  font-size: 14px;\n  font-weight: 600;\n  color: #388E3C;\n  margin: 0 0 4px 0;\n  opacity: 0.8;\n}\n\n.selectedTaskText {\n  font-size: 16px;\n  font-weight: 600;\n  color: #2E7D32;\n  margin: 0;\n  line-height: 1.3;\n}\n\n.noSelectedTask {\n  text-align: center;\n  padding: 24px;\n  background: rgba(255, 255, 255, 0.9);\n  backdrop-filter: blur(5px);\n  border-radius: 16px;\n  border: 1px dashed rgba(200, 230, 201, 0.3);\n  margin-bottom: 24px;\n}\n\n.encourageIcon {\n  font-size: 32px;\n  display: block;\n  margin-bottom: 8px;\n  animation: gentle-bounce 3s ease-in-out infinite;\n}\n\n@keyframes gentle-bounce {\n  0%, 100% { \n    transform: translateY(0px);\n  }\n  50% { \n    transform: translateY(-3px);\n  }\n}\n\n.noSelectedTask p {\n  margin: 0;\n  color: #7FB069;\n  font-size: 16px;\n  font-style: italic;\n}\n\n.sessionHeader {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 12px;\n  margin-bottom: 24px;\n}\n\n.sessionEmoji {\n  font-size: 32px;\n  animation: gentle-bounce 3s ease-in-out infinite;\n}\n\n.sessionTitle {\n  font-size: 24px;\n  font-weight: 700;\n  color: #2E7D32;\n  margin: 0;\n  text-shadow: 0 2px 4px rgba(46, 125, 50, 0.1);\n}\n\n/* 타이머 디스플레이 - 새로운 디자인 */\n.timerDisplay {\n  display: flex;\n  justify-content: center;\n  margin: 32px 0;\n}\n\n.timeCircle {\n  position: relative;\n  width: 220px;\n  height: 220px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.progressRing {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  transform: rotate(-90deg);\n}\n\n.progressRingBackground {\n  stroke-width: 4;\n  stroke: rgba(200, 230, 201, 0.3);\n}\n\n.progressRingProgress {\n  stroke-width: 4;\n  stroke-linecap: round;\n  transition: stroke-dashoffset 0.5s ease;\n  filter: drop-shadow(0 0 8px rgba(46, 125, 50, 0.3));\n}\n\n.timeText {\n  font-size: 36px;\n  font-weight: 700;\n  color: #2E7D32;\n  text-shadow: 0 2px 8px rgba(46, 125, 50, 0.1);\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  border-radius: 50%;\n  width: 160px;\n  height: 160px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: 1px solid rgba(200, 230, 201, 0.4);\n  box-shadow: \n    0 8px 32px rgba(200, 230, 201, 0.2),\n    0 2px 8px rgba(200, 230, 201, 0.1);\n}\n\n/* 컨트롤 버튼 - 새로운 디자인 */\n.controls {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 12px;\n  margin: 32px 0;\n  padding: 0 16px;\n  flex-wrap: wrap;\n}\n\n.playPauseButton,\n.resetButton,\n.skipButton {\n  background: rgba(255, 255, 255, 0.9);\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(200, 230, 201, 0.4);\n  border-radius: 50px;\n  padding: 12px 20px;\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  box-shadow: \n    0 8px 32px rgba(200, 230, 201, 0.2),\n    0 2px 8px rgba(200, 230, 201, 0.1);\n  transition: all 0.3s ease;\n  color: #2E7D32;\n  font-weight: 600;\n  min-width: 100px;\n  flex: 0 1 auto;\n}\n\n.playPauseButton:hover,\n.resetButton:hover,\n.skipButton:hover {\n  transform: translateY(-2px);\n  box-shadow: \n    0 12px 40px rgba(200, 230, 201, 0.25),\n    0 4px 12px rgba(200, 230, 201, 0.15);\n}\n\n.buttonText {\n  font-size: 14px;\n  font-weight: 600;\n}\n\n/* 跳过按钮特殊样式 - 蝴蝶休息时间的特色 */\n.skipButton {\n  background: linear-gradient(135deg, rgba(160, 200, 230, 0.15), rgba(255, 255, 255, 0.9));\n  border: 1px solid rgba(160, 200, 230, 0.4);\n  color: #1976D2;\n}\n\n.skipButton:hover {\n  background: linear-gradient(135deg, rgba(160, 200, 230, 0.25), rgba(255, 255, 255, 0.95));\n  border-color: rgba(160, 200, 230, 0.6);\n  box-shadow: \n    0 12px 40px rgba(160, 200, 230, 0.3),\n    0 4px 12px rgba(160, 200, 230, 0.2);\n}\n\n/* 통계 - 새로운 디자인 */\n.stats {\n  display: flex;\n  justify-content: center;\n  gap: 20px;\n  margin: 24px 0;\n  flex-wrap: wrap;\n}\n\n.statItem {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  background: rgba(255, 255, 255, 0.8);\n  backdrop-filter: blur(5px);\n  padding: 12px 18px;\n  border-radius: 24px;\n  border: 1px solid rgba(200, 230, 201, 0.3);\n  box-shadow: \n    0 4px 16px rgba(200, 230, 201, 0.15),\n    0 1px 4px rgba(200, 230, 201, 0.1);\n}\n\n.statIcon {\n  font-size: 18px;\n}\n\n.statText {\n  font-size: 14px;\n  font-weight: 600;\n  color: #2E7D32;\n}\n\n/* 정원 요소들 - 미니멀하게 수정 */\n.gardenElements {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  pointer-events: none;\n  overflow: hidden;\n}\n\n.backgroundTrees {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n\n.tree {\n  position: absolute;\n  font-size: 20px;\n  animation: gentle-sway 6s ease-in-out infinite;\n  opacity: 0.3;\n  filter: blur(0.5px);\n}\n\n@keyframes gentle-sway {\n  0%, 100% { \n    transform: rotate(0deg);\n  }\n  25% { \n    transform: rotate(1deg);\n  }\n  75% { \n    transform: rotate(-1deg);\n  }\n}\n\n.growingPlants {\n  position: absolute;\n  bottom: 25%;\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n.plantGrowth {\n  display: flex;\n  gap: 12px;\n}\n\n.growingPlant {\n  font-size: 18px;\n  opacity: 0.6;\n  animation: plant-grow 4s ease-in-out infinite;\n}\n\n@keyframes plant-grow {\n  0% { \n    transform: scale(0.9) translateY(5px);\n    opacity: 0.4;\n  }\n  50% { \n    transform: scale(1.05) translateY(-3px);\n    opacity: 0.8;\n  }\n  100% { \n    transform: scale(1) translateY(0px);\n    opacity: 0.6;\n  }\n}\n\n.flowers {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n\n.flower {\n  position: absolute;\n  font-size: 14px;\n  opacity: 0.7;\n  animation: flower-bloom 3s ease-out;\n}\n\n@keyframes flower-bloom {\n  0% {\n    transform: scale(0) rotate(0deg);\n    opacity: 0;\n  }\n  50% {\n    transform: scale(1.2) rotate(180deg);\n    opacity: 0.8;\n  }\n  100% {\n    transform: scale(1) rotate(360deg);\n    opacity: 0.7;\n  }\n}\n\n.butterflies {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n\n.butterfly {\n  position: absolute;\n  font-size: 16px;\n  opacity: 0.6;\n  animation: butterfly-fly 12s ease-in-out infinite;\n}\n\n@keyframes butterfly-fly {\n  0% {\n    left: -5%;\n    top: 30%;\n    transform: rotate(0deg);\n  }\n  25% {\n    left: 30%;\n    top: 20%;\n    transform: rotate(5deg);\n  }\n  50% {\n    left: 70%;\n    top: 40%;\n    transform: rotate(-3deg);\n  }\n  75% {\n    left: 90%;\n    top: 25%;\n    transform: rotate(8deg);\n  }\n  100% {\n    left: 105%;\n    top: 35%;\n    transform: rotate(0deg);\n  }\n}\n\n.clouds {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n\n.cloud {\n  position: absolute;\n  font-size: 18px;\n  animation: cloud-drift 20s linear infinite;\n  opacity: 0.4;\n  filter: blur(0.5px);\n}\n\n@keyframes cloud-drift {\n  0% {\n    transform: translateX(-5px);\n  }\n  100% {\n    transform: translateX(5px);\n  }\n}\n\n/* 반응형 디자인 */\n@media (max-width: 768px) {\n  .container {\n    padding: 12px;\n  }\n  \n  .taskSelection {\n    padding: 20px;\n    margin-bottom: 20px;\n  }\n  \n  .taskSelectionTitle {\n    font-size: 16px;\n  }\n  \n  .selectedTaskCard {\n    padding: 16px;\n  }\n  \n  .selectedTaskIcon {\n    font-size: 24px;\n  }\n  \n  .selectedTaskText {\n    font-size: 14px;\n  }\n  \n  .timeCircle {\n    width: 180px;\n    height: 180px;\n  }\n  \n  .timeText {\n    font-size: 28px;\n    width: 130px;\n    height: 130px;\n  }\n  \n  .sessionTitle {\n    font-size: 20px;\n  }\n  \n  .controls {\n    gap: 8px;\n    padding: 0 12px;\n  }\n  \n  .playPauseButton,\n  .resetButton,\n  .skipButton {\n    padding: 10px 16px;\n    min-width: 80px;\n  }\n  \n  .buttonText {\n    font-size: 12px;\n  }\n  \n  .stats {\n    gap: 16px;\n  }\n  \n  .statItem {\n    padding: 10px 16px;\n  }\n  \n  .statText {\n    font-size: 12px;\n  }\n}",
  "styles/Welcome.module.css": "/* Welcome 组件样式 - 简约风格 */\n\n.welcomeContainer {\n  background: #ffffff;\n  min-height: 100vh;\n  color: #333333;\n  position: relative;\n  padding: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n}\n\n/* 头部 */\n.header {\n  text-align: center;\n  padding: 56px 16px 16px;\n}\n\n.logo {\n  display: inline-block;\n  margin-bottom: 12px;\n}\n\n.logoImage {\n  width: 64px;\n  height: 64px;\n  border-radius: 12px;\n  transition: opacity 0.2s ease;\n  box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.1);\n}\n\n.logoImage:hover {\n  opacity: 0.8;\n}\n\n.title {\n  font-size: 2.1rem;\n  font-weight: 600;\n  margin: 0 0 6px 0;\n  line-height: 1.2;\n  letter-spacing: -0.02em;\n}\n\n.titleGradient {\n  color: #1a1a1a;\n}\n\n.titleSubtext {\n  color: #666666;\n  font-weight: 400;\n  margin-left: 6px;\n}\n\n.subtitle {\n  font-size: 1rem;\n  color: #666666;\n  margin: 0;\n  font-weight: 400;\n}\n\n/* 步骤 */\n.steps {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: 8px 16px 16px;\n  max-width: 560px;\n  margin: 0 auto;\n}\n\n.step {\n  padding: 12px 12px;\n  background: #fff;\n  border-radius: 12px;\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  position: relative;\n  text-align: center;\n  transition: background-color 0.2s ease;\n}\n\n.stepContent {\n  margin-top: 0;\n}\n\n.stepContent h3 {\n  font-size: 1.1rem;\n  font-weight: 500;\n  color: #1a1a1a;\n  margin: 0 0 4px 0;\n}\n\n.stepContent p {\n  color: #666666;\n  margin: 0;\n  font-size: 0.95rem;\n  line-height: 1.4;\n}\n\n.stepNumber {\n  position: absolute;\n  top: 8px;\n  left: 8px;\n  background: #e5e5e5;\n  color: #666666;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 500;\n  font-size: 0.75rem;\n}\n\n/* 行动按钮 */\n.ctaSection {\n  text-align: center;\n  padding: 16px 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  align-items: center;\n}\n\n.primaryBtn {\n  background: #1a1a1a;\n  color: #ffffff;\n  border: none;\n  border-radius: 6px;\n  padding: 10px 18px;\n  font-weight: 500;\n  font-size: 0.95rem;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  justify-content: center;\n  transition: background-color 0.2s ease;\n  width: 180px;\n  max-width: 90%;\n}\n\n.primaryBtn:hover {\n  background: #333333;\n}\n\n.primaryBtn:active {\n  background: #000000;\n}\n\n.secondaryBtn {\n  background: transparent;\n  color: #666666;\n  border: 1px solid #d5d5d5;\n  border-radius: 6px;\n  padding: 10px 18px;\n  font-weight: 500;\n  font-size: 0.95rem;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  justify-content: center;\n  transition: all 0.2s ease;\n  width: 180px;\n  max-width: 90%;\n}\n\n.secondaryBtn:hover {\n  background: #fafafa;\n  border-color: #999999;\n}\n\n/* 底部 */\n.footer {\n  text-align: center;\n  padding: 8px 16px 16px;\n  color: #999999;\n  font-size: 0.85rem;\n}\n\n.footer p {\n  margin: 0;\n}\n\n/* 响应式设计 */\n@media (max-width: 768px) {\n  .header {\n    padding: 40px 12px 16px;\n  }\n  \n  .title {\n    font-size: 2rem;\n  }\n  \n  .subtitle {\n    font-size: 1rem;\n  }\n  \n  .steps {\n    padding: 8px 12px 16px;\n  }\n  \n  .step {\n    padding: 12px 12px;\n  }\n  \n  .ctaSection {\n    padding: 16px 12px;\n  }\n}\n\n@media (max-width: 480px) {\n  .header {\n    padding: 32px 12px 14px;\n  }\n  \n  .logoImage {\n    width: 52px;\n    height: 52px;\n  }\n  \n  .title {\n    font-size: 1.7rem;\n  }\n  \n  .primaryBtn, .secondaryBtn {\n    width: 100%;\n    max-width: 280px;\n  }\n}\n\n/* 桌面端更紧凑的步骤布局 */\n@media (min-width: 768px) {\n  .steps {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 10px;\n    max-width: 840px;\n  }\n  .step {\n    text-align: left;\n    padding: 12px;\n  }\n  .stepNumber {\n    top: 10px;\n    left: 10px;\n  }\n}\n\n/* 简化动画 */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(12px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* 基础进场动画 */\n.logo,\n.title,\n.subtitle,\n.step,\n.ctaSection {\n  opacity: 0;\n  animation: fadeIn 0.5s ease-out forwards;\n}\n\n.logo {\n  animation-delay: 0s;\n}\n\n.title {\n  animation-delay: 0.1s;\n}\n\n.subtitle {\n  animation-delay: 0.2s;\n}\n\n.step:nth-child(1) { \n  animation-delay: 0.3s;\n}\n\n.step:nth-child(2) { \n  animation-delay: 0.4s;\n}\n\n.step:nth-child(3) { \n  animation-delay: 0.5s;\n}\n\n.ctaSection {\n  animation-delay: 0.6s;\n}\n",
  "styles/global.css": ":root {\n  --primary-green: #2E7D32;\n  --secondary-green: #7FB069;\n  --light-green: #BED8A3;\n  --earth-brown: #8B6B4A;\n  --sky-blue: #A0C8E6;\n  --cream-white: #FFF8F0;\n  --soft-gray: #F5F5F5;\n  --text-dark: #2D3748;\n  --text-light: #718096;\n  --shadow-color: rgba(46, 125, 50, 0.1);\n  --border-color: rgba(46, 125, 50, 0.2);\n  \n  /* 按钮主题变量 */\n  --button-primary-bg: linear-gradient(135deg, var(--secondary-green), var(--primary-green));\n  --button-primary-hover-bg: linear-gradient(135deg, #8FC470, #357A39);\n  --button-primary-active-bg: linear-gradient(135deg, #6FA05B, #1E5F22);\n  --button-primary-shadow: rgba(127, 176, 105, 0.3);\n  --button-primary-hover-shadow: rgba(127, 176, 105, 0.4);\n  --button-primary-active-shadow: rgba(127, 176, 105, 0.5);\n  --button-secondary-color: var(--secondary-green);\n  --button-secondary-hover-bg: rgba(127, 176, 105, 0.1);\n  --button-secondary-active-bg: rgba(127, 176, 105, 0.2);\n}\n\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif;\n  background: #FAFCFA;\n  color: var(--text-dark);\n  min-height: 100vh;\n}\n\n/* 强制 Light 主题 */\nhtml {\n  --ion-color-base: #000000;\n  --ion-color-contrast: #ffffff;\n  --ion-background-color: #ffffff;\n  --ion-background-color-rgb: 255,255,255;\n  --ion-text-color: #000000;\n  --ion-text-color-rgb: 0,0,0;\n  --ion-color-step-50: #f2f2f2;\n  --ion-color-step-100: #e6e6e6;\n  --ion-color-step-150: #d9d9d9;\n  --ion-color-step-200: #cccccc;\n  --ion-color-step-250: #bfbfbf;\n  --ion-color-step-300: #b3b3b3;\n  --ion-color-step-350: #a6a6a6;\n  --ion-color-step-400: #999999;\n  --ion-color-step-450: #8c8c8c;\n  --ion-color-step-500: #808080;\n  --ion-color-step-550: #737373;\n  --ion-color-step-600: #666666;\n  --ion-color-step-650: #595959;\n  --ion-color-step-700: #4d4d4d;\n  --ion-color-step-750: #404040;\n  --ion-color-step-800: #333333;\n  --ion-color-step-850: #262626;\n  --ion-color-step-900: #1a1a1a;\n  --ion-color-step-950: #0d0d0d;\n}\n\n/* 强制所有 Ionic 组件使用 light 模式 */\n.ion-palette-light,\n.ion-palette-light ion-app,\n.ion-palette-light ion-page,\n.ion-palette-light ion-content {\n  --ion-color-base: #000000 !important;\n  --ion-color-contrast: #ffffff !important;\n  --ion-background-color: #ffffff !important;\n  --ion-background-color-rgb: 255,255,255 !important;\n  --ion-text-color: #000000 !important;\n  --ion-text-color-rgb: 0,0,0 !important;\n}\n\n.garden-card {\n  background: var(--cream-white);\n  border-radius: 16px;\n  padding: 20px;\n  margin: 16px;\n  box-shadow: 0 4px 20px var(--shadow-color);\n  border: 1px solid var(--border-color);\n  position: relative;\n  overflow: hidden;\n}\n\n.garden-card::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 4px;\n  background: linear-gradient(90deg, var(--primary-green), var(--secondary-green), var(--light-green));\n  border-radius: 16px 16px 0 0;\n}\n\n.garden-button {\n  --background: var(--primary-green);\n  --background-hover: var(--secondary-green);\n  --background-activated: var(--primary-green);\n  --color: white;\n  --border-radius: 12px;\n  --padding-start: 20px;\n  --padding-end: 20px;\n  --padding-top: 12px;\n  --padding-bottom: 12px;\n  font-weight: 600;\n  text-transform: none;\n  box-shadow: 0 4px 12px rgba(46, 125, 50, 0.3);\n  position: relative;\n  overflow: hidden;\n}\n\n.garden-button::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n  transition: left 0.5s;\n}\n\n.garden-button:hover::before {\n  left: 100%;\n}\n\n.garden-button.secondary {\n  --background: var(--earth-brown);\n  --background-hover: #A0845A;\n  --background-activated: var(--earth-brown);\n}\n\n.garden-button.tertiary {\n  --background: var(--sky-blue);\n  --background-hover: #B8D4EA;\n  --background-activated: var(--sky-blue);\n  --color: var(--text-dark);\n}\n\n.gradient-text {\n  background: linear-gradient(135deg, var(--primary-green), var(--secondary-green));\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  font-weight: 700;\n  margin: 0 0 16px 0;\n}\n\n.timer-circle {\n  width: 280px;\n  height: 280px;\n  border-radius: 50%;\n  background: var(--cream-white);\n  border: 8px solid var(--light-green);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  margin: 32px auto;\n  position: relative;\n  box-shadow: \n    0 8px 32px rgba(46, 125, 50, 0.2),\n    inset 0 4px 8px rgba(255, 255, 255, 0.8);\n  overflow: hidden;\n}\n\n.timer-circle::before {\n  content: '';\n  position: absolute;\n  top: -4px;\n  left: -4px;\n  right: -4px;\n  bottom: -4px;\n  border-radius: 50%;\n  background: linear-gradient(45deg, var(--primary-green), var(--secondary-green), var(--light-green), var(--sky-blue));\n  z-index: -1;\n  animation: rotate 20s linear infinite;\n}\n\n@keyframes rotate {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n\n.timer-progress {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  border-radius: 50%;\n  transition: background 0.3s ease;\n}\n\n.timer-time {\n  font-size: 48px;\n  font-weight: 700;\n  color: var(--primary-green);\n  text-shadow: 0 2px 4px rgba(46, 125, 50, 0.1);\n  margin-bottom: 8px;\n}\n\n.timer-label {\n  font-size: 16px;\n  color: var(--text-light);\n  font-weight: 500;\n}\n\n.pulse-glow {\n  animation: pulseGlow 2s ease-in-out infinite;\n}\n\n@keyframes pulseGlow {\n  0%, 100% {\n    box-shadow: \n      0 8px 32px rgba(46, 125, 50, 0.2),\n      inset 0 4px 8px rgba(255, 255, 255, 0.8);\n  }\n  50% {\n    box-shadow: \n      0 12px 40px rgba(46, 125, 50, 0.4),\n      inset 0 4px 8px rgba(255, 255, 255, 0.8),\n      0 0 20px rgba(127, 176, 105, 0.6);\n  }\n}\n\n.plant-decoration {\n  position: absolute;\n  font-size: 24px;\n  animation: float 3s ease-in-out infinite;\n  pointer-events: none;\n}\n\n.plant-decoration:nth-child(1) {\n  top: 20px;\n  right: 20px;\n  animation-delay: 0s;\n}\n\n.plant-decoration:nth-child(2) {\n  bottom: 20px;\n  left: 20px;\n  animation-delay: 0.5s;\n}\n\n.plant-decoration:nth-child(3) {\n  top: 50%;\n  right: 10px;\n  animation-delay: 1s;\n}\n\n.plant-decoration:nth-child(4) {\n  top: 50%;\n  left: 10px;\n  animation-delay: 1.5s;\n}\n\n@keyframes float {\n  0%, 100% {\n    transform: translateY(0px) rotate(0deg);\n  }\n  33% {\n    transform: translateY(-10px) rotate(5deg);\n  }\n  66% {\n    transform: translateY(5px) rotate(-3deg);\n  }\n}\n\n.grow-animation {\n  animation: grow 0.8s ease-out;\n}\n\n@keyframes grow {\n  0% {\n    transform: scale(0) rotate(0deg);\n    opacity: 0;\n  }\n  50% {\n    transform: scale(1.2) rotate(180deg);\n    opacity: 0.8;\n  }\n  100% {\n    transform: scale(1) rotate(360deg);\n    opacity: 1;\n  }\n}\n\n.butterfly-float {\n  animation: butterflyFloat 4s ease-in-out infinite;\n}\n\n@keyframes butterflyFloat {\n  0%, 100% {\n    transform: translateX(0px) translateY(0px) rotate(0deg);\n  }\n  25% {\n    transform: translateX(20px) translateY(-15px) rotate(5deg);\n  }\n  50% {\n    transform: translateX(-10px) translateY(-25px) rotate(-3deg);\n  }\n  75% {\n    transform: translateX(-20px) translateY(-10px) rotate(2deg);\n  }\n}\n\n.garden-tab-bar {\n  --background: var(--cream-white);\n  --border: 1px solid var(--border-color);\n  box-shadow: 0 -4px 20px var(--shadow-color);\n}\n\n.tab-button {\n  --color: var(--text-light);\n  --color-selected: var(--primary-green);\n  font-weight: 500;\n}\n\n.tab-button ion-icon {\n  font-size: 24px;\n  margin-bottom: 4px;\n}\n\n.wood-texture {\n  background: linear-gradient(45deg, #8B6B4A, #A0845A, #8B6B4A);\n  background-size: 20px 20px;\n  position: relative;\n}\n\n.wood-texture::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: repeating-linear-gradient(\n    90deg,\n    transparent,\n    transparent 2px,\n    rgba(0, 0, 0, 0.1) 2px,\n    rgba(0, 0, 0, 0.1) 4px\n  );\n}\n\n.stone-shadow {\n  box-shadow: \n    0 6px 20px rgba(139, 107, 74, 0.3),\n    inset 0 2px 4px rgba(255, 255, 255, 0.5);\n}\n\n.nature-input {\n  --background: var(--cream-white);\n  --color: var(--text-dark);\n  --border-color: var(--border-color);\n  --border-radius: 12px;\n  --padding-start: 16px;\n  --padding-end: 16px;\n  --padding-top: 12px;\n  --padding-bottom: 12px;\n  border: 2px solid var(--border-color);\n  box-shadow: 0 2px 8px var(--shadow-color);\n}\n\n.nature-input:focus {\n  --border-color: var(--primary-green);\n  box-shadow: 0 0 0 3px rgba(46, 125, 50, 0.1);\n}\n\n.leaf-divider {\n  height: 2px;\n  background: linear-gradient(90deg, transparent, var(--light-green), transparent);\n  margin: 24px 0;\n  position: relative;\n}\n\n.leaf-divider::before {\n  content: '🌿';\n  position: absolute;\n  top: -12px;\n  left: 50%;\n  transform: translateX(-50%);\n  background: var(--cream-white);\n  padding: 0 8px;\n  font-size: 16px;\n}",
  "utils/dataHelpers.js": "import AppSdk from '@morphixai/app-sdk';\nimport { reportError } from '@morphixai/lib';\n\n// 通用的数据获取函数，带有存在性检查\nexport const getDataSafely = async (collection, id) => {\n  try {\n    const data = await AppSdk.appData.getData({\n      collection,\n      id\n    });\n    return data;\n  } catch (error) {\n    if (error.message && error.message.includes('Data not found')) {\n      console.log(`Data not found for ${collection}:${id}`);\n      return null;\n    }\n    console.error(`Error getting data for ${collection}:${id}:`, error);\n    await reportError(error, 'JavaScriptError', { \n      component: 'DataHelpers',\n      context: `getData-${collection}-${id}`\n    });\n    return null;\n  }\n};\n\n// 通用的数据创建函数，带有错误处理\nexport const createDataSafely = async (collection, data, id = null) => {\n  try {\n    const payload = {\n      collection,\n      data: id ? { id, ...data } : data\n    };\n    \n    const result = await AppSdk.appData.createData(payload);\n    console.log(`Successfully created data for ${collection}:`, result);\n    return result;\n  } catch (error) {\n    console.error(`Error creating data for ${collection}:`, error);\n    await reportError(error, 'JavaScriptError', { \n      component: 'DataHelpers',\n      context: `createData-${collection}`\n    });\n    return null;\n  }\n};\n\n// 通用的数据更新函数，带有存在性检查\nexport const updateDataSafely = async (collection, id, data) => {\n  try {\n    const existingData = await getDataSafely(collection, id);\n    \n    if (existingData) {\n      const result = await AppSdk.appData.updateData({\n        collection,\n        id,\n        data\n      });\n      console.log(`Successfully updated data for ${collection}:${id}`);\n      return result;\n    } else {\n      const result = await createDataSafely(collection, data, id);\n      console.log(`Created new data for ${collection}:${id} (update fallback)`);\n      return result;\n    }\n  } catch (error) {\n    console.error(`Error updating data for ${collection}:${id}:`, error);\n    await reportError(error, 'JavaScriptError', { \n      component: 'DataHelpers',\n      context: `updateData-${collection}-${id}`\n    });\n    return null;\n  }\n};\n\n// 通用的数据删除函数，带有错误处理\nexport const deleteDataSafely = async (collection, id) => {\n  try {\n    const result = await AppSdk.appData.deleteData({\n      collection,\n      id\n    });\n    console.log(`Successfully deleted data for ${collection}:${id}`);\n    return result;\n  } catch (error) {\n    console.error(`Error deleting data for ${collection}:${id}:`, error);\n    await reportError(error, 'JavaScriptError', { \n      component: 'DataHelpers',\n      context: `deleteData-${collection}-${id}`\n    });\n    return null;\n  }\n};\n\n// 查询数据的安全函数\nexport const queryDataSafely = async (collection, query = []) => {\n  try {\n    const result = await AppSdk.appData.queryData({\n      collection,\n      query\n    });\n    return Array.isArray(result) ? result : [];\n  } catch (error) {\n    console.error(`Error querying data for ${collection}:`, error);\n    await reportError(error, 'JavaScriptError', { \n      component: 'DataHelpers',\n      context: `queryData-${collection}`\n    });\n    return [];\n  }\n};\n\n// 初始化默认数据的函数\nexport const initializeDefaultData = async () => {\n  console.log(\"开始初始化默认数据...\");\n  \n  const defaultDataSets = [\n    {\n      collection: 'timer',\n      id: 'current',\n      data: {\n        duration: 25 * 60,\n        shortBreak: 5 * 60,\n        longBreak: 15 * 60,\n        cycles: 4,\n        currentCycle: 1,\n        isRunning: false,\n        remainingTime: 25 * 60,\n        mode: \"focus\",\n        completedPomodoros: 0,\n        totalFocusTime: 0,\n        plants: [],\n        lastUpdated: Date.now()\n      }\n    },\n    {\n      collection: 'tasks',\n      id: 'list',\n      data: {\n        items: []\n      }\n    },\n    {\n      collection: 'stats',\n      id: 'history',\n      data: {\n        completed: [],\n        plants: []\n      }\n    }\n  ];\n\n  for (const dataSet of defaultDataSets) {\n    try {\n      const existingData = await getDataSafely(dataSet.collection, dataSet.id);\n      \n      if (!existingData) {\n        console.log(`创建默认数据: ${dataSet.collection}:${dataSet.id}`);\n        await createDataSafely(dataSet.collection, dataSet.data, dataSet.id);\n      } else {\n        console.log(`数据已存在: ${dataSet.collection}:${dataSet.id}`);\n      }\n    } catch (error) {\n      console.error(`初始化 ${dataSet.collection}:${dataSet.id} 失败:`, error);\n    }\n  }\n  \n  console.log(\"默认数据初始化完成\");\n};\n\n// 安全获取计时器数据的函数\nexport const getTimerDataSafely = async () => {\n  try {\n    let timerData;\n    try {\n      timerData = await AppSdk.appData.getData({\n        collection: 'timer',\n        id: 'current'\n      });\n    } catch (error) {\n      const defaultData = {\n        duration: 25 * 60,\n        shortBreak: 5 * 60,\n        longBreak: 15 * 60,\n        cycles: 4,\n        currentCycle: 1,\n        isRunning: false,\n        remainingTime: 25 * 60,\n        mode: \"focus\",\n        completedPomodoros: 0,\n        totalFocusTime: 0,\n        plants: [],\n        lastUpdated: Date.now()\n      };\n      \n      timerData = await AppSdk.appData.createData({\n        collection: 'timer',\n        data: { id: 'current', ...defaultData }\n      });\n    }\n    return timerData;\n  } catch (error) {\n    console.error(\"获取计时器数据失败:\", error);\n    await reportError(error, 'JavaScriptError', { \n      component: 'DataHelpers',\n      context: 'getTimerDataSafely'\n    });\n    return {\n      duration: 25 * 60,\n      shortBreak: 5 * 60,\n      longBreak: 15 * 60,\n      cycles: 4,\n      currentCycle: 1,\n      isRunning: false,\n      remainingTime: 25 * 60,\n      mode: \"focus\",\n      completedPomodoros: 0,\n      totalFocusTime: 0,\n      plants: []\n    };\n  }\n};\n\n// 安全获取设置数据的通用函数\nexport const getSetting = async (settingId, defaultValue) => {\n  try {\n    const settingData = await AppSdk.appData.getData({\n      collection: \"settings\",\n      id: settingId\n    });\n    \n    if (settingData) {\n      console.log(`找到设置数据 ${settingId}:`, settingData);\n      return settingData;\n    } else {\n      console.log(`设置数据 ${settingId} 为null，创建默认值...`);\n      const newSetting = await AppSdk.appData.createData({\n        collection: \"settings\",\n        data: {\n          id: settingId,\n          ...defaultValue\n        }\n      });\n      return newSetting;\n    }\n  } catch (error) {\n    console.log(`获取设置 ${settingId} 时发生错误，创建默认值...`);\n    \n    try {\n      const newSetting = await AppSdk.appData.createData({\n        collection: \"settings\",\n        data: {\n          id: settingId,\n          ...defaultValue\n        }\n      });\n      console.log(`成功创建默认设置 ${settingId}`);\n      return newSetting;\n    } catch (createError) {\n      console.error(`创建默认设置 ${settingId} 失败:`, createError);\n      await reportError(createError, 'JavaScriptError', { \n        component: 'DataHelpers',\n        context: `getSetting-${settingId}`\n      });\n      return { id: settingId, ...defaultValue };\n    }\n  }\n};\n\n// 获取语言设置\nexport const getLanguageSetting = async () => {\n  const defaultLanguage = {\n    current: \"ko\",\n    available: [\"ko\", \"zh\"],\n    autoDetect: true\n  };\n  \n  return await getSetting(\"language\", defaultLanguage);\n};\n\n// 获取计时器设置\nexport const getTimerSetting = async () => {\n  const defaultTimer = {\n    keepScreenOn: false,\n    backgroundMode: true,\n    notifications: true,\n    sound: true\n  };\n  \n  return await getSetting(\"timer\", defaultTimer);\n};\n\n// 获取主题设置\nexport const getThemeSetting = async () => {\n  const defaultTheme = {\n    mode: \"light\",\n    gardenStyle: \"natural\"\n  };\n  \n  return await getSetting(\"theme\", defaultTheme);\n};\n\n// 更新设置的安全函数\nexport const updateSetting = async (settingId, newData) => {\n  try {\n    const existingSetting = await getDataSafely(\"settings\", settingId);\n    \n    if (existingSetting) {\n      const result = await AppSdk.appData.updateData({\n        collection: \"settings\",\n        id: settingId,\n        data: newData\n      });\n      console.log(`成功更新设置 ${settingId}`);\n      return result;\n    } else {\n      const result = await AppSdk.appData.createData({\n        collection: \"settings\",\n        data: {\n          id: settingId,\n          ...newData\n        }\n      });\n      console.log(`创建新设置 ${settingId}`);\n      return result;\n    }\n  } catch (error) {\n    console.error(`更新设置 ${settingId} 失败:`, error);\n    await reportError(error, 'JavaScriptError', { \n      component: 'DataHelpers',\n      context: `updateSetting-${settingId}`\n    });\n    return null;\n  }\n}",
  "utils/errorHandlers.js": "import AppSdk from '@morphixai/app-sdk';\nimport { reportError } from '@morphixai/lib';\n\n// 안전한 리마인더 데이터 가져오기\nexport const getRemindersData = async () => {\n  try {\n    const remindersResult = await AppSdk.reminder.getUserReminders();\n    \n    if (remindersResult && Array.isArray(remindersResult) && remindersResult.length > 0) {\n      return remindersResult;\n    } else {\n      console.log(\"리마인더 데이터가 없습니다.\");\n      return [];\n    }\n  } catch (error) {\n    console.error(\"리마인더 조회 실패:\", error);\n    await reportError(error, 'ReminderFetchError');\n    return [];\n  }\n};\n\n// 리마인더 결과 유효성 검사\nexport const validateRemindersResult = (remindersResult) => {\n  if (!remindersResult) {\n    console.warn(\"remindersResult가 null 또는 undefined입니다.\");\n    return [];\n  }\n  \n  if (!Array.isArray(remindersResult)) {\n    console.warn(\"remindersResult가 배열이 아닙니다:\", typeof remindersResult);\n    return [];\n  }\n  \n  return remindersResult;\n};\n\n// 전역 리마인더 오류 처리\nexport const handleReminderError = async (error, context = '') => {\n  console.error(`리마인더 오류 ${context}:`, error);\n  await reportError(error, 'ReminderError', { context });\n  \n  // 사용자에게 친화적인 메시지 반환\n  const userMessage = \"리마인더 처리 중 문제가 발생했습니다. 잠시 후 다시 시도해주세요.\";\n  \n  return {\n    success: false,\n    error: userMessage,\n    data: []\n  };\n};\n\n// 안전한 타이머 리마인더 정리\nexport const cleanupTimerRemindersSafely = async () => {\n  try {\n    console.log('타이머 리마인더 정리 시작...');\n    \n    // 모든 리마인더 가져오기\n    const remindersResult = await getRemindersData();\n    const validReminders = validateRemindersResult(remindersResult);\n    \n    // 타이머 관련 리마인더 필터링\n    const timerReminders = validReminders.filter(r => \n      r && r.title === '자연 정원 뽀모도로'\n    );\n    \n    console.log(`발견된 타이머 리마인더: ${timerReminders.length}개`);\n    \n    // 각 타이머 리마인더 정리\n    const cleanupResults = [];\n    for (const reminder of timerReminders) {\n      try {\n        if (reminder && reminder.id) {\n          const deleteResult = await AppSdk.reminder.deleteReminder({ id: reminder.id });\n          cleanupResults.push({\n            id: reminder.id,\n            success: deleteResult,\n            title: reminder.title\n          });\n          console.log(`리마인더 ${reminder.id} 정리 완료`);\n        }\n      } catch (deleteError) {\n        console.error(`리마인더 ${reminder.id} 정리 실패:`, deleteError);\n        cleanupResults.push({\n          id: reminder.id,\n          success: false,\n          error: deleteError.message\n        });\n      }\n    }\n    \n    console.log('타이머 리마인더 정리 완료');\n    return {\n      success: true,\n      cleaned: cleanupResults.length,\n      results: cleanupResults\n    };\n    \n  } catch (error) {\n    console.error('타이머 리마인더 정리 중 오류:', error);\n    await reportError(error, 'TimerReminderCleanupError');\n    return {\n      success: false,\n      error: error.message,\n      cleaned: 0\n    };\n  }\n};\n\n// 리마인더 디버깅 정보\nexport const debugReminder = async (reminderId) => {\n  try {\n    console.log(`=== 리마인더 디버깅 ${reminderId || 'ALL'} ===`);\n    \n    if (reminderId) {\n      // 특정 리마인더 디버깅\n      const reminder = await AppSdk.reminder.getReminder({ id: reminderId });\n      console.log('특정 리마인더:', reminder);\n      console.log('리마인더 타입:', typeof reminder);\n      console.log('리마인더 존재 여부:', !!reminder);\n    } else {\n      // 모든 리마인더 디버깅\n      const remindersResult = await getRemindersData();\n      console.log('모든 리마인더 결과:', remindersResult);\n      console.log('리마인더 개수:', remindersResult.length);\n      \n      // 타이머 관련 리마인더만 필터링\n      const timerReminders = remindersResult.filter(r => \n        r && r.title === '자연 정원 뽀모도로'\n      );\n      console.log('타이머 리마인더:', timerReminders);\n    }\n    \n    console.log('=== 디버깅 완료 ===');\n    return true;\n    \n  } catch (error) {\n    console.error('리마인더 디버깅 실패:', error);\n    await reportError(error, 'ReminderDebugError');\n    return false;\n  }\n};\n\n// 안전한 리마인더 생성\nexport const createReminderSafely = async (reminderData) => {\n  try {\n    // 입력 데이터 유효성 검사\n    if (!reminderData || !reminderData.message || !reminderData.start_time) {\n      throw new Error('리마인더 생성에 필요한 데이터가 부족합니다.');\n    }\n    \n    const reminder = await AppSdk.reminder.createReminder(reminderData);\n    \n    if (reminder && reminder.id) {\n      console.log('리마인더 생성 성공:', reminder.id);\n      return {\n        success: true,\n        reminder: reminder\n      };\n    } else {\n      throw new Error('리마인더 생성 결과가 유효하지 않습니다.');\n    }\n    \n  } catch (error) {\n    console.error('리마인더 생성 실패:', error);\n    await reportError(error, 'ReminderCreateError');\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\n\n// 안전한 리마인더 삭제\nexport const deleteReminderSafely = async (reminderId) => {\n  try {\n    if (!reminderId) {\n      console.warn('삭제할 리마인더 ID가 없습니다.');\n      return { success: false, error: 'ID가 필요합니다.' };\n    }\n    \n    const deleteResult = await AppSdk.reminder.deleteReminder({ id: reminderId });\n    \n    if (deleteResult) {\n      console.log('리마인더 삭제 성공:', reminderId);\n      return { success: true };\n    } else {\n      throw new Error('리마인더 삭제에 실패했습니다.');\n    }\n    \n  } catch (error) {\n    console.error('리마인더 삭제 실패:', error);\n    await reportError(error, 'ReminderDeleteError');\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};",
  "utils/i18n.js": "import AppSdk from '@morphixai/app-sdk';\n\n// 语言翻译数据\nconst translations = {\n  ko: {\n    // 导航\n    timer: \"타이머\",\n    tasks: \"할일\",\n    stats: \"통계\",\n    settings: \"설정\",\n    \n    // 应用标题\n    appTitle: \"자연 정원 뽀모도로\",\n    appSubtitle: \"AI 정원 요정과 함께하는 자연 풍 뽀모도로 타이머\",\n    \n    // 计时器页面\n    focusTime: \"집중 시간\",\n    breakTime: \"휴식 시간\",\n    start: \"시작\",\n    pause: \"일시정지\",\n    reset: \"리셋\",\n    skipBreak: \"휴식 건너뛰기\",\n    selectTask: \"오늘 집중할 작업을 선택하세요\",\n    noTasks: \"먼저 할일 탭에서 작업을 추가해주세요!\",\n    currentTask: \"현재 집중 중인 작업\",\n    selectTaskPlaceholder: \"할일을 선택하세요\",\n    encourageStart: \"할일을 선택하고 집중을 시작하세요!\",\n    \n    // 会话标题\n    focusSession: \"꽃이 피는 집중 시간\",\n    butterflyRest: \"나비의 휴식 시간\",\n    \n    // 统计\n    completedFlowers: \"핀 꽃: {count}/4 사이클\",\n    todayCompleted: \"오늘 완료: {count}개\",\n    \n    // 任务页面\n    myTaskGarden: \"나의 할일 花园\",\n    taskGardenSubtitle: \"오늘도 아름다운 작업들을 가꾸어보세요\",\n    totalTasks: \"전체 작업\",\n    completedTasks: \"완료된 작업\",\n    pendingTasks: \"대기 중\",\n    \n    // 过滤器\n    filterAll: \"전체 보기\",\n    filterPending: \"대기 중\",\n    filterCompleted: \"완료됨\",\n    filterHigh: \"높은 우선순위\",\n    filterMedium: \"보통 우선순위\",\n    filterLow: \"낮은 우선순위\",\n    \n    // 任务操作\n    addNewTask: \"새로운 작업 심기\",\n    taskPlaceholder: \"새로운 花园 작업을 심어보세요...\",\n    priorityHigh: \"높음 - 빨간 장미\",\n    priorityMedium: \"보통 - 해바라기\",\n    priorityLow: \"낮음 - 잎사귀\",\n    plantTask: \"작업 심기\",\n    \n    // 空状态\n    noTasksPlanted: \"아직 심어진 작업이 없어요\",\n    firstSeedMessage: \"첫 번째 씨앗을 심어보세요!\",\n    noMatchingTasks: \"해당하는 작업이 없습니다\",\n    plantFirstTask: \"첫 작업 심기\",\n    \n    // 优先级\n    high: \"높음\",\n    medium: \"보통\",\n    low: \"낮음\",\n    \n    // 统计页面\n    gardenStats: \"정원 통계\",\n    periodToday: \"오늘\",\n    periodWeek: \"주간\",\n    periodMonth: \"월간\",\n    periodTotal: \"전체\",\n    \n    todayGarden: \"오늘의 정원\",\n    weeklyGrowth: \"이번주 정원 성장\",\n    monthlyFlowerbed: \"이번달 꽃밭\",\n    totalGardenStatus: \"전체 정원 현황\",\n    \n    plantedSeeds: \"심은 씨앗\",\n    focusedTime: \"집중한 시간\",\n    completedTodos: \"완료한 할일\",\n    completionRate: \"할일 완료율\",\n    \n    recent7Days: \"최근 7일 정원 성장 기록\",\n    plantCollection: \"나의 식물 컬렉션\",\n    \n    plantedSprouts: \"심은 새싹\",\n    grownLeaves: \"자란 잎사귀\",\n    bloomedFlowers: \"핀 꽃\",\n    grownTrees: \"자란 나무\",\n    \n    achievementSummary: \"정원 성취 요약\",\n    totalFocusTime: \"총 집중 시간\",\n    grownPlants: \"키운 식물\",\n    averageCompletion: \"평균 완료율\",\n    \n    noSeedsPlanted: \"아직 심어진 씨앗이 없어요\",\n    startTimerMessage: \"타이머를 시작해서 첫 번째 씨앗을 심어보세요!\",\n    gardenWillGrow: \"집중할 때마다 아름다운 정원이 자라날 거예요.\",\n    \n    // 设置页面\n    settingsTitle: \"설정\",\n    appInfo: \"자연 정원 뽀모도로\",\n    appDescription: \"자연의 평온함과 함께하는 치유적인 뽀모도로 타이머입니다. 집중할 때마다 식물이 자라나고, 휴식할 때마다 나비가 날아다니는 평화로운 경험을 즐겨보세요.\",\n    version: \"버전 1.0.0\",\n    \n    myGardenDiary: \"나의 정원 성장 일기\",\n    todayAchievements: \"오늘의 성과\",\n    focusSessions: \"집중 세션\",\n    \n    gardenPreview: \"나의 정원 미리보기\",\n    noPlants: \"아직 식물이 자라지 않았습니다.\",\n    completeFirstPomodoro: \"첫 번째 뽀모도로를 완료해보세요!\",\n    morePlants: \"개 더\",\n    \n    // 语言设置\n    languageSettings: \"언어 설정\",\n    korean: \"한국어\",\n    chinese: \"中文\",\n    currentLanguage: \"현재 언어\",\n    \n    // 通用\n    minutes: \"분\",\n    hours: \"시간\",\n    days: \"일\",\n    loading: \"로딩 중...\",\n    error: \"오류\",\n    retry: \"다시 시도\",\n    close: \"닫기\",\n    save: \"저장\",\n    cancel: \"취소\",\n    delete: \"삭제\",\n    edit: \"편집\",\n    \n    // 消息操作\n    messageActions: \"메시지 작업\",\n    copyMessage: \"메시지 복사\",\n    complete: \"완료\",\n    \n    // 时间格式\n    timeFormat: \"{hours}시간 {minutes}분\",\n    minutesOnly: \"{minutes}분\",\n    \n    // 加载消息\n    loadingGarden: \"정원을 준비하는 중...\",\n    loadingTasks: \"할일 목록을 불러오는 중...\",\n    loadingTimer: \"타이머 데이터를 불러오는 중...\",\n    \n    // 要精灵消息\n    fairyGreetingMorning: \"좋은 아침이에요! 오늘도 아름다운 정원을 가꿔볼까요? 🌸\",\n    fairyGreetingAfternoon: \"안녕하세요! 오후의 정원에서 집중의 꽃을 피워보세요 🌻\",\n    fairyGreetingEvening: \"좋은 저녁이에요! 밤의 정원에서도 차분히 집중해보아요 🌙\",\n    \n    // 快速问题\n    quickQuestionFocus: \"집중 도움 요청\",\n    quickQuestionTasks: \"할일 정리 도움\",\n    quickQuestionMotivation: \"동기부여 필요\",\n    quickQuestionRest: \"휴식 추천\",\n    \n    quickMessageFocus: \"집중하는 데 도움이 필요해요\",\n    quickMessageTasks: \"할일을 어떻게 정리하면 좋을까요?\",\n    quickMessageMotivation: \"동기부여가 필요해요\",\n    quickMessageRest: \"어떻게 휴식하면 좋을까요?\",\n    \n    chatWithFairy: \"정원 요정과 대화하기\",\n    fairyChat: \"정원 요정과의 대화\",\n    quickQuestions: \"빠른 질문\",\n    sendMessagePlaceholder: \"정원 요정에게 메시지를 보내세요...\",\n    \n    // 完成提醒\n    pomodoroComplete: \"뽀모도로 완료!\",\n    taskCompleteQuestion: \"\\\"{task}\\\" 작업을 완료하셨나요?\",\n    stillWorking: \"아직 진행 중\",\n    completed: \"완료했어요! 🌸\",\n    \n    // 设置页面新增翻译\n    confirmClearData: \"모든 데이터를 삭제하시겠습니까? 이 작업은 되돌릴 수 없습니다.\",\n    notStarted: \"아직 시작 전\",\n    startingToday: \"오늘부터 시작!\",\n    startedYesterday: \"어제부터 시작\",\n    startedDaysAgo: \"{days}일 전부터\",\n    startedWeeksAgo: \"{weeks}주 전부터\",\n    startedMonthsAgo: \"{months}개월 전부터\",\n    \n    // 成就等级\n    gardenMaster: \"🌺 정원의 달인\",\n    gardenMasterDesc: \"100개 이상의 뽀모도로를 완료한 마스터 정원사입니다!\",\n    skilledGardener: \"🌸 숙련된 정원사\",\n    skilledGardenerDesc: \"50개 이상의 뽀모도로로 아름다운 정원을 가꾸고 있습니다.\",\n    growingGardener: \"🌿 성장하는 정원사\",\n    growingGardenerDesc: \"20개의 뽀모도로로 정원이 무성해지고 있어요!\",\n    sproutGardener: \"🌱 새싹 정원사\",\n    sproutGardenerDesc: \"5개의 뽀모도로로 첫 새싹이 돋아났습니다.\",\n    seedPlanting: \"🌰 씨앗 심는 중\",\n    seedPlantingDesc: \"첫 번째 뽀모도로로 정원 여행을 시작해보세요!\",\n    \n    // 激励消息\n    plantFirstSeed: \"첫 씨앗을 심어보세요! 🌱\",\n    sproutGrowing: \"새싹이 돋아나고 있어요! 🌿\",\n    flowersBloom: \"아름다운 꽃이 피고 있네요! 🌸\",\n    gardenInFullBloom: \"정원이 만개했어요! 🌺\",\n    amazingGardener: \"놀라운 정원사가 되셨네요! 🏆\",\n    completeFirstTask: \"첫 할일을 완료해보세요! ✨\",\n    goodStart: \"좋은 시작이에요! 🎯\",\n    consistentAchievement: \"꾸준히 성취하고 있어요! 🌟\",\n    excellentExecution: \"훌륭한 실행력이에요! 💪\",\n    gardenAwaits: \"정원이 당신을 기다리고 있어요! 🌈\",\n    good15MinFocus: \"15분의 집중, 좋은 시작! 🌱\",\n    good30MinFocus: \"30분의 깊은 집중! 🌿\",\n    excellent1HourFocus: \"1시간의 몰입, 대단해요! 🌸\",\n    \n    // 卡片详细信息\n    completedPomodoroSessions: \"완료한 뽀모도로 세션\",\n    successfulFocusTime: \"성공적으로 완료한 집중 시간\",\n    beautifulSprouts: \"{count}개의 아름다운 새싹이 자랐어요!\",\n    growFirstSprout: \"첫 새싹을 키워보세요! 🌱\",\n    achievedTasks: \"성취한 작업들\",\n    healthyRestPattern: \"건강한 휴식 패턴\",\n    balancedRest: \"균형 잡힌 휴식을 취하고 있어요! 🦋\",\n    restIsImportant: \"집중 후 휴식도 중요해요! 🌺\",\n    recordedTime: \"기록 시간\",\n    consecutiveDays: \"연속 일수\",\n    consistentGrowthRecord: \"꾸준한 성장 기록\",\n    becomingSteadyGardener: \"꾸준한 정원사가 되어가고 있어요! 🌳\",\n    growDailySlowly: \"매일 조금씩 성장해보세요! 🌱\",\n    \n    // 状态描述\n    high: \"높음\",\n    good: \"좋음\",\n    excellent: \"우수\",\n    balanced: \"균형\",\n    measuring: \"측정 중\",\n    startingStage: \"시작 단계\",\n    noneYet: \"아직 없음\",\n    count: \"개\",\n    \n    // 今日成果\n    keepBeautifyingGarden: \"오늘도 정원을 아름답게 가꿔주세요! 🌿\",\n    startFromTimerTab: \"타이머 탭에서 시작하기\",\n    \n    // 激励语句\n    gardenGrowingLush: \"당신의 정원이 점점 무성해지고 있어요!\",\n    steadyEffortBloomsFlowers: \"꾸준한 노력이 예쁜 꽃을 피워냅니다\",\n    growSlowlyButSteadily: \"천천히, 하지만 꾸준히 성장해보세요\",\n    \n    // 详细信息标签\n    detail_total: \"총계\",\n    detail_today: \"오늘\",\n    detail_thisWeek: \"이번 주\",\n    detail_target: \"목표\",\n    detail_streak: \"연속\",\n    detail_efficiency: \"효율성\",\n    detail_avgSession: \"평균 세션\",\n    detail_bestStreak: \"최고 연속\",\n    detail_totalDays: \"총 일수\",\n    detail_completed: \"완료\",\n    detail_pending: \"대기\",\n    detail_completionRate: \"완료율\",\n    detail_productivity: \"생산성\",\n    detail_totalBreaks: \"총 휴식\",\n    detail_avgBreakTime: \"평균 휴식\",\n    detail_restQuality: \"휴식 품질\",\n    detail_balance: \"균형\",\n    detail_totalMinutes: \"총 분\",\n    detail_totalHours: \"총 시간\",\n    detail_avgDaily: \"일평균\",\n    detail_focusQuality: \"집중 품질\",\n    detail_currentStreak: \"현재 연속\",\n    detail_level: \"레벨\",\n    detail_nextLevelIn: \"다음 레벨까지\",\n    \n    // StatsTab 新增翻译\n    todayGardenLabel: \"오늘의 정원\",\n    weeklyGrowthLabel: \"이번주 정원 성장\", \n    monthlyFlowerbedLabel: \"이번달 꽃밭\",\n    totalGardenStatusLabel: \"전체 정원 현황\",\n    periodSelection: \"기간 선택\",\n    todayLabel: \"오늘\",\n    weekLabel: \"주간\", \n    monthLabel: \"월간\",\n    totalLabel: \"전체\",\n    currentStatus: \"현황\",\n    timeFormat: \"{hours}시간 {minutes}분\",\n    minutesFormat: \"{minutes}분\",\n    plantedSprouts: \"심은 새싹\",\n    grownLeaves: \"자란 잎사귀\", \n    bloomedFlowers: \"핀 꽃\",\n    grownTrees: \"자란 나무\",\n    recent7DaysGrowth: \"최근 7일 정원 성장 기록\",\n    myPlantCollection: \"나의 식물 컬렉션\",\n    countUnit: \"개\",\n    gardenAchievementSummary: \"정원 성취 요약\",\n    totalFocusTimeLabel: \"총 집중 시간\",\n    grownPlantsLabel: \"키운 식물\",\n    completedTasksLabel: \"완료한 할일\",\n    averageCompletionLabel: \"평균 완료율\",\n    \n    // TasksTab 新增翻译\n    myTaskGardenTitle: \"나의 할일 花园\",\n    taskGardenSubtitle: \"오늘도 아름다운 작업들을 가꾸어보세요\",\n    totalTasksLabel: \"전체 작업\",\n    completedTasksLabel: \"완료된 작업\", \n    pendingTasksLabel: \"대기 중\",\n    taskFilter: \"작업 필터\",\n    viewAll: \"전체 보기\",\n    viewPending: \"대기 중\",\n    viewCompleted: \"완료됨\", \n    highPriorityFilter: \"높은 우선순위\",\n    mediumPriorityFilter: \"보통 우선순위\",\n    lowPriorityFilter: \"낮은 우선순위\",\n    addNewTaskForm: \"새로운 작업 심기\",\n    newTaskPlaceholder: \"새로운 花园 작업을 심어보세요...\",\n    prioritySelection: \"우선순위 선택\",\n    highPriorityOption: \"높음 - 빨간 장미\",\n    mediumPriorityOption: \"보통 - 해바라기\", \n    lowPriorityOption: \"낮음 - 잎사귀\",\n    plantTaskButton: \"작업 심기\",\n    noTasksPlantedTitle: \"아직 심어진 작업이 없어요\",\n    firstSeedMessage: \"첫 번째 씨앗을 심어보세요!\",\n    noMatchingTasksMessage: \"해당하는 작업이 없습니다\",\n    plantFirstTaskButton: \"첫 작업 심기\",\n    highPriorityLabel: \"높음\",\n    mediumPriorityLabel: \"보통\",\n    lowPriorityLabel: \"낮음\",\n    completionAnimation: \"완료 애니메이션\",\n    decorativeFlowers: \"장식용 꽃들\",\n    floatingAddButton: \"플로팅 추가 버튼\",\n    \n    // TasksTab 补充翻译键\n    taskFilterPlaceholder: \"작업 필터\",\n    formTitleNewTask: \"새로운 작업 심기\",\n    newTaskInputPlaceholder: \"새로운 花园 작업을 심어보세요...\",\n    prioritySelectionPlaceholder: \"우선순위 선택\",\n    plantTaskButtonText: \"작업 심기\",\n    noTasksEmptyTitle: \"아직 심어진 작업이 없어요\",\n    firstSeedPlantMessage: \"첫 번째 씨앗을 심어보세요!\",\n    noMatchingTasksMessage: \"해당하는 작업이 없습니다\",\n    plantFirstTaskButtonText: \"첫 작업 심기\",\n    \n    // TimerTab 新增翻译\n    focusingBackground: \"집중 중 (백그라운드)\",\n    restingBackground: \"휴식 중 (백그라운드)\",\n    reminderCreateFailed: \"리마인더 생성에 실패했지만 타이머는 정상 작동합니다\",\n    timerStartFailed: \"타이머 시작에 실패했습니다. 다시 시도해주세요\",\n    \n    // 其他组件\n    loadingTasksList: \"할일 목록을 불러오는 중...\",\n    loadingSettingsText: \"설정을 불러오는 중...\",\n    preparingGarden: \"정원을 준비하는 중...\",\n    confirmButton: \"확인\",\n    koreanLanguage: \"한국어\",\n    chineseLanguage: \"中文\",\n    changeLanguageDescription: \"언어를 변경하여 앱을 더 편리하게 사용하세요\",\n    \n    // StatsTab 缺失翻译键\n    noSeedsPlantedTitle: \"아직 심어진 씨앗이 없어요\",\n    startTimerPlantFirstSeed: \"타이머를 시작해서 첫 번째 씨앗을 심어보세요!\",\n    beautifulGardenGrows: \"집중할 때마다 아름다운 정원이 자라날 거예요.\",\n    \n    // GardenFairy 翻译键\n    fairyMessagePlaceholder: \"정원 요정에게 메시지를 보내세요...\",\n    focusHelpRequest: \"집중 도움 요청\",\n    taskOrganizationHelp: \"할일 정리 도움\",\n    motivationNeeded: \"동기부여 필요\",\n    restRecommendation: \"휴식 추천\",\n    focusHelpMessage: \"집중하는 데 도움이 필요해요\",\n    taskOrganizationMessage: \"할일을 어떻게 정리하면 좋을까요?\",\n    motivationMessage: \"동기부여가 필요해요\",\n    restMessage: \"어떻게 휴식하면 좋을까요?\",\n    fairyErrorMessage: \"미안해요, 지금은 대답하기 어려워요 🌿\",\n    fairyConnectionError: \"죄송해요, 지금은 대화하기 어려워요. 잠시 후 다시 시도해주세요 🌿\",\n    \n    // 정원 요정 선택\n    selectFairy: \"요정 선택\",\n    fairyLuna: \"루나 🌙\", // GPT-5 Mini - 달빛 요정\n    fairyVera: \"베라 🌸\", // Deepseek - 꽃잎 요정  \n    fairySage: \"세이지 ✨\", // Claude - 지혜 요정\n    fairyPersonalityLuna: \"빠르고 친근한 달빛 요정\",\n    fairyPersonalityVera: \"자유롭고 창의적인 꽃잎 요정\",\n    fairyPersonalitySage: \"깊이 있고 현명한 지혜 요정\",\n    \n    goodMorningGreeting: \"좋은 아침이에요! 오늘도 아름다운 정원을 가꿔볼까요? 🌸\",\n    goodAfternoonGreeting: \"안녕하세요! 오후의 정원에서 집중의 꽃을 피워보세요 🌻\",\n    goodEveningGreeting: \"좋은 저녁이에요! 밤의 정원에서도 차분히 집중해보아요 🌙\",\n    \n    // AI 系统提示词相关\n    fairySystemPrompt: \"당신은 친근한 정원 요정입니다. 사용자의 집중과 할일 관리를 도와주는 역할을 합니다.\",\n    currentSituation: \"현재 상황:\",\n    timerStatus: \"타이머 상태\",\n    selectedTaskNone: \"선택된 작업 없음\",\n    fairyMood: \"요정 기분\",\n    personalityAndTone: \"성격과 말투:\",\n    naturalWarmTone: \"항상 자연스럽고 따뜻한 말투로 대화\",\n    gardenMetaphors: \"정원과 식물에 관련된 비유를 자주 사용\",\n    shortConciseAnswers: \"짧고 간결하게 답변 (1-2문장)\",\n    useEmojis: \"이모지를 적절히 사용하여 친근함 표현\",\n    encourageMotivate: \"사용자를 격려하고 동기부여 제공\",\n    situationalResponses: \"상황별 대응:\",\n    focusStart: \"집중 시작 시: 새로운 씨앗을 심는다는 표현 사용\",\n    duringFocus: \"집중 중: 식물이 자라고 있다는 격려\",\n    duringRest: \"휴식 시: 정원에서 쉬는 표현 사용\",\n    onCompletion: \"완료 시: 꽃이 피었다는 축하 표현\",\n    counseling: \"고민 상담: 자연의 지혜로 조언 제공\",\n    focusing: \"집중 중\",\n    resting: \"휴식 중\",\n    stopped: \"정지됨\"\n  },\n  \n  zh: {\n    // 导航\n    timer: \"计时器\",\n    tasks: \"任务\",\n    stats: \"统计\",\n    settings: \"设置\",\n    \n    // 应用标题\n    appTitle: \"专注花园番茄钟\",\n    appSubtitle: \"与AI花园精灵一起的自然风番茄钟计时器\",\n    \n    // 计时器页面\n    focusTime: \"专注时间\",\n    breakTime: \"休息时间\",\n    start: \"开始\",\n    pause: \"暂停\",\n    reset: \"重置\",\n    skipBreak: \"跳过休息\",\n    selectTask: \"请选择今天要专注的任务\",\n    noTasks: \"请先在任务页面添加任务！\",\n    currentTask: \"当前专注的任务\",\n    selectTaskPlaceholder: \"请选择任务\",\n    encourageStart: \"选择任务并开始专注吧！\",\n    \n    // 会话标题\n    focusSession: \"花朵绽放的专注时间\",\n    butterflyRest: \"蝴蝶的休息时间\",\n    \n    // 统计\n    completedFlowers: \"盛开花朵: {count}/4 周期\",\n    todayCompleted: \"今日完成: {count}个\",\n    \n    // 任务页面\n    myTaskGarden: \"我的任务花园\",\n    taskGardenSubtitle: \"今天也来培育美丽的任务吧\",\n    totalTasks: \"全部任务\",\n    completedTasks: \"已完成\",\n    pendingTasks: \"待完成\",\n    \n    // 过滤器\n    filterAll: \"查看全部\",\n    filterPending: \"待完成\",\n    filterCompleted: \"已完成\",\n    filterHigh: \"高优先级\",\n    filterMedium: \"中优先级\",\n    filterLow: \"低优先级\",\n    \n    // 任务操作\n    addNewTask: \"种植新任务\",\n    taskPlaceholder: \"请输入新的花园任务...\",\n    priorityHigh: \"高 - 红玫瑰\",\n    priorityMedium: \"中 - 向日葵\",\n    priorityLow: \"低 - 绿叶\",\n    plantTask: \"种植任务\",\n    \n    // 空状态\n    noTasksPlanted: \"还没有种植任务呢\",\n    firstSeedMessage: \"种下第一颗种子吧！\",\n    noMatchingTasks: \"没有符合条件的任务\",\n    plantFirstTask: \"种植第一个任务\",\n    \n    // 优先级\n    high: \"高\",\n    medium: \"中\",\n    low: \"低\",\n    \n    // 统计页面\n    gardenStats: \"花园统计\",\n    periodToday: \"今日\",\n    periodWeek: \"本周\",\n    periodMonth: \"本月\",\n    periodTotal: \"全部\",\n    \n    todayGarden: \"今日花园\",\n    weeklyGrowth: \"本周花园成长\",\n    monthlyFlowerbed: \"本月花圃\",\n    totalGardenStatus: \"花园总体状况\",\n    \n    plantedSeeds: \"播种的种子\",\n    focusedTime: \"专注时间\",\n    completedTodos: \"完成的任务\",\n    completionRate: \"任务完成率\",\n    \n    recent7Days: \"最近7天花园成长记录\",\n    plantCollection: \"我的植物收藏\",\n    \n    plantedSprouts: \"播种的幼苗\",\n    grownLeaves: \"成长的叶子\",\n    bloomedFlowers: \"盛开的花朵\",\n    grownTrees: \"成长的树木\",\n    \n    achievementSummary: \"花园成就总结\",\n    totalFocusTime: \"总专注时间\",\n    grownPlants: \"培育的植物\",\n    averageCompletion: \"平均完成率\",\n    \n    noSeedsPlanted: \"还没有播种呢\",\n    startTimerMessage: \"启动计时器来播下第一颗种子吧！\",\n    gardenWillGrow: \"每次专注都会让美丽的花园成长。\",\n    \n    // 设置页面\n    settingsTitle: \"设置\",\n    appInfo: \"专注花园番茄钟\",\n    appDescription: \"与自然的宁静相伴的治愈系番茄钟计时器。每次专注时植物都会成长，每次休息时蝴蝶都会飞舞，享受这份宁静的体验吧。\",\n    version: \"版本 1.0.0\",\n    \n    myGardenDiary: \"我的花园成长日记\",\n    todayAchievements: \"今日成果\",\n    focusSessions: \"专注时段\",\n    \n    gardenPreview: \"我的花园预览\",\n    noPlants: \"植物还没有成长。\",\n    completeFirstPomodoro: \"完成第一个番茄钟吧！\",\n    morePlants: \"个更多\",\n    \n    // 语言设置\n    languageSettings: \"语言设置\",\n    korean: \"한국어\",\n    chinese: \"中文\",\n    currentLanguage: \"当前语言\",\n    \n    // 通用\n    minutes: \"分钟\",\n    hours: \"小时\",\n    days: \"天\",\n    loading: \"加载中...\",\n    error: \"错误\",\n    retry: \"重试\",\n    close: \"关闭\",\n    save: \"保存\",\n    cancel: \"取消\",\n    delete: \"删除\",\n    edit: \"编辑\",\n    \n    // 消息操作\n    messageActions: \"消息操作\",\n    copyMessage: \"复制消息\",\n    complete: \"完成\",\n    \n    // 时间格式\n    timeFormat: \"{hours}小时{minutes}分钟\",\n    minutesOnly: \"{minutes}分钟\",\n    \n    // 加载消息\n    loadingGarden: \"正在准备花园...\",\n    loadingTasks: \"正在加载任务列表...\",\n    loadingTimer: \"正在加载计时器数据...\",\n    \n    // 花园精灵消息\n    fairyGreetingMorning: \"早上好！今天也来培育美丽的花园吧？🌸\",\n    fairyGreetingAfternoon: \"下午好！在午后的花园里绽放专注之花吧 🌻\",\n    fairyGreetingEvening: \"晚上好！在夜晚的花园里也要静心专注哦 🌙\",\n    \n    // 快速问题\n    quickQuestionFocus: \"专注帮助\",\n    quickQuestionTasks: \"任务整理帮助\",\n    quickQuestionMotivation: \"需要激励\",\n    quickQuestionRest: \"休息建议\",\n    \n    quickMessageFocus: \"我需要专注方面的帮助\",\n    quickMessageTasks: \"如何更好地整理任务呢？\",\n    quickMessageMotivation: \"我需要一些激励\",\n    quickMessageRest: \"如何更好地休息呢？\",\n    \n    chatWithFairy: \"与花园精灵对话\",\n    fairyChat: \"与花园精灵的对话\",\n    quickQuestions: \"快速提问\",\n    sendMessagePlaceholder: \"向花园精灵发送消息...\",\n    \n    // 完成提醒\n    pomodoroComplete: \"番茄钟完成！\",\n    taskCompleteQuestion: \"您完成了\\\"{task}\\\"任务吗？\",\n    stillWorking: \"还在进行中\",\n    completed: \"完成了！🌸\",\n    \n    // 设置页面新增翻译\n    confirmClearData: \"确定要删除所有数据吗？此操作无法撤销。\",\n    notStarted: \"尚未开始\",\n    startingToday: \"从今天开始！\",\n    startedYesterday: \"从昨天开始\",\n    startedDaysAgo: \"{days}天前开始\",\n    startedWeeksAgo: \"{weeks}周前开始\",\n    startedMonthsAgo: \"{months}个月前开始\",\n    \n    // 成就等级\n    gardenMaster: \"🌺 花园大师\",\n    gardenMasterDesc: \"完成了100个以上番茄钟的大师级园丁！\",\n    skilledGardener: \"🌸 熟练园丁\",\n    skilledGardenerDesc: \"用50个以上的番茄钟培育着美丽的花园。\",\n    growingGardener: \"🌿 成长中的园丁\",\n    growingGardenerDesc: \"用20个番茄钟让花园变得茂盛！\",\n    sproutGardener: \"🌱 幼苗园丁\",\n    sproutGardenerDesc: \"用5个番茄钟长出了第一批幼苗。\",\n    seedPlanting: \"🌰 播种中\",\n    seedPlantingDesc: \"用第一个番茄钟开始花园之旅吧！\",\n    \n    // 激励消息\n    plantFirstSeed: \"播下第一颗种子吧！🌱\",\n    sproutGrowing: \"幼苗正在发芽！🌿\",\n    flowersBloom: \"美丽的花朵正在绽放！🌸\",\n    gardenInFullBloom: \"花园盛开了！🌺\",\n    amazingGardener: \"您成为了了不起的园丁！🏆\",\n    completeFirstTask: \"完成第一个任务吧！✨\",\n    goodStart: \"好的开始！🎯\",\n    consistentAchievement: \"持续在取得成就！🌟\",\n    excellentExecution: \"出色的执行力！💪\",\n    gardenAwaits: \"花园在等待着您！🌈\",\n    good15MinFocus: \"15分钟的专注，好的开始！🌱\",\n    good30MinFocus: \"30分钟的深度专注！🌿\",\n    excellent1HourFocus: \"1小时的沉浸，太棒了！🌸\",\n    \n    // 卡片详细信息\n    completedPomodoroSessions: \"完成的番茄钟时段\",\n    successfulFocusTime: \"成功完成的专注时间\",\n    beautifulSprouts: \"{count}个美丽的幼苗成长了！\",\n    growFirstSprout: \"培育第一个幼苗吧！🌱\",\n    achievedTasks: \"完成的任务\",\n    healthyRestPattern: \"健康的休息模式\",\n    balancedRest: \"正在进行均衡的休息！🦋\",\n    restIsImportant: \"专注后的休息也很重要！🌺\",\n    recordedTime: \"记录时间\",\n    consecutiveDays: \"连续天数\",\n    consistentGrowthRecord: \"持续成长记录\",\n    becomingSteadyGardener: \"正在成为稳定的园丁！🌳\",\n    growDailySlowly: \"每天慢慢成长吧！🌱\",\n    \n    // 状态描述\n    high: \"高\",\n    good: \"良好\",\n    excellent: \"优秀\",\n    balanced: \"均衡\",\n    measuring: \"测量中\",\n    startingStage: \"起步阶段\",\n    noneYet: \"暂无\",\n    count: \"个\",\n    \n    // 今日成果\n    keepBeautifyingGarden: \"今天也要美化花园！🌿\",\n    startFromTimerTab: \"从计时器页面开始\",\n    \n    // 激励语句\n    gardenGrowingLush: \"您的花园越来越茂盛了！\",\n    steadyEffortBloomsFlowers: \"持续的努力会开出美丽的花朵\",\n    growSlowlyButSteadily: \"慢慢地，但要稳步成长\",\n    \n    // 详细信息标签\n    detail_total: \"总计\",\n    detail_today: \"今日\",\n    detail_thisWeek: \"本周\",\n    detail_target: \"目标\",\n    detail_streak: \"连续\",\n    detail_efficiency: \"效率\",\n    detail_avgSession: \"平均时段\",\n    detail_bestStreak: \"最佳连续\",\n    detail_totalDays: \"总天数\",\n    detail_completed: \"已完成\",\n    detail_pending: \"待完成\",\n    detail_completionRate: \"完成率\",\n    detail_productivity: \"生产力\",\n    detail_totalBreaks: \"总休息\",\n    detail_avgBreakTime: \"平均休息\",\n    detail_restQuality: \"休息质量\",\n    detail_balance: \"平衡\",\n    detail_totalMinutes: \"总分钟\",\n    detail_totalHours: \"总小时\",\n    detail_avgDaily: \"日平均\",\n    detail_focusQuality: \"专注质量\",\n    detail_currentStreak: \"当前连续\",\n    detail_level: \"等级\",\n    detail_nextLevelIn: \"距下一等级\",\n    \n    // StatsTab 新增翻译\n    todayGardenLabel: \"今日花园\",\n    weeklyGrowthLabel: \"本周花园成长\", \n    monthlyFlowerbedLabel: \"本月花圃\",\n    totalGardenStatusLabel: \"花园总体状况\",\n    periodSelection: \"期间选择\",\n    todayLabel: \"今日\",\n    weekLabel: \"周间\", \n    monthLabel: \"月间\",\n    totalLabel: \"全部\",\n    currentStatus: \"现状\",\n    timeFormat: \"{hours}小时{minutes}分钟\",\n    minutesFormat: \"{minutes}分钟\",\n    plantedSprouts: \"播种的幼苗\",\n    grownLeaves: \"成长的叶子\", \n    bloomedFlowers: \"盛开的花朵\",\n    grownTrees: \"成长的树木\",\n    recent7DaysGrowth: \"最近7天花园成长记录\",\n    myPlantCollection: \"我的植物收藏\",\n    countUnit: \"个\",\n    gardenAchievementSummary: \"花园成就总结\",\n    totalFocusTimeLabel: \"总专注时间\",\n    grownPlantsLabel: \"培育的植物\",\n    completedTasksLabel: \"完成的任务\",\n    averageCompletionLabel: \"平均完成率\",\n    \n    // TasksTab 新增翻译\n    myTaskGardenTitle: \"我的任务花园\",\n    taskGardenSubtitle: \"今天也来培育美丽的任务吧\",\n    totalTasksLabel: \"全部任务\",\n    completedTasksLabel: \"已完成\", \n    pendingTasksLabel: \"待完成\",\n    taskFilter: \"任务筛选\",\n    viewAll: \"查看全部\",\n    viewPending: \"待完成\",\n    viewCompleted: \"已完成\", \n    highPriorityFilter: \"高优先级\",\n    mediumPriorityFilter: \"中优先级\",\n    lowPriorityFilter: \"低优先级\",\n    addNewTaskForm: \"种植新任务\",\n    newTaskPlaceholder: \"请输入新的花园任务...\",\n    prioritySelection: \"优先级选择\",\n    highPriorityOption: \"高 - 红玫瑰\",\n    mediumPriorityOption: \"中 - 向日葵\", \n    lowPriorityOption: \"低 - 绿叶\",\n    plantTaskButton: \"种植任务\",\n    noTasksPlantedTitle: \"还没有种植任务呢\",\n    firstSeedMessage: \"种下第一颗种子吧!\",\n    noMatchingTasksMessage: \"没有符合条件的任务\",\n    plantFirstTaskButton: \"种植第一个任务\",\n    highPriorityLabel: \"高\",\n    mediumPriorityLabel: \"中\",\n    lowPriorityLabel: \"低\",\n    completionAnimation: \"完成动画\",\n    decorativeFlowers: \"装饰花朵\",\n    floatingAddButton: \"浮动添加按钮\",\n    \n    // TasksTab 补充翻译键\n    taskFilterPlaceholder: \"任务筛选\",\n    formTitleNewTask: \"种植新任务\",\n    newTaskInputPlaceholder: \"请输入新的花园任务...\",\n    prioritySelectionPlaceholder: \"优先级选择\",\n    plantTaskButtonText: \"种植任务\",\n    noTasksEmptyTitle: \"还没有种植任务呢\",\n    firstSeedPlantMessage: \"种下第一颗种子吧!\",\n    noMatchingTasksMessage: \"没有符合条件的任务\",\n    plantFirstTaskButtonText: \"种植第一个任务\",\n    \n    // TimerTab 新增翻译\n    focusingBackground: \"专注中 (后台)\",\n    restingBackground: \"休息中 (后台)\",\n    reminderCreateFailed: \"提醒创建失败，但计时器正常运行\",\n    timerStartFailed: \"计时器启动失败，请重试\",\n    \n    // 其他组件\n    loadingTasksList: \"正在加载任务列表...\",\n    loadingSettingsText: \"正在加载设置...\",\n    preparingGarden: \"正在准备花园...\",\n    confirmButton: \"确认\",\n    koreanLanguage: \"한국어\",\n    chineseLanguage: \"中文\",\n    changeLanguageDescription: \"更改语言以更方便地使用应用\",\n    \n    // StatsTab 缺失翻译键\n    noSeedsPlantedTitle: \"还没有播种呢\",\n    startTimerPlantFirstSeed: \"启动计时器来种下第一颗种子吧!\",\n    beautifulGardenGrows: \"每次专注都会让美丽的花园成长。\",\n    \n    // GardenFairy 翻译键\n    fairyMessagePlaceholder: \"给花园精灵发送消息...\",\n    focusHelpRequest: \"专注帮助请求\",\n    taskOrganizationHelp: \"任务整理帮助\",\n    motivationNeeded: \"需要动力\",\n    restRecommendation: \"休息建议\",\n    focusHelpMessage: \"我需要专注方面的帮助\",\n    taskOrganizationMessage: \"如何更好地整理任务呢?\",\n    motivationMessage: \"我需要一些动力\",\n    restMessage: \"如何更好地休息呢?\",\n    fairyErrorMessage: \"抱歉，现在无法回答 🌿\",\n    fairyConnectionError: \"抱歉，现在无法对话。请稍后再试 🌿\",\n    \n    // 花园精灵选择\n    selectFairy: \"选择精灵\",\n    fairyLuna: \"Luna 🌙\", // GPT-5 Mini\n    fairyVera: \"Vera 🌸\", // Deepseek\n    fairySage: \"Sage ✨\", // Claude\n    fairyPersonalityLuna: \"快速友好\",\n    fairyPersonalityVera: \"自由创意\", \n    fairyPersonalitySage: \"深邃智慧\",\n    \n    goodMorningGreeting: \"早上好！今天也来培育美丽的花园吧 🌸\",\n    goodAfternoonGreeting: \"下午好！在午后的花园里绽放专注之花吧 🌻\",\n    goodEveningGreeting: \"晚上好！在夜晚的花园里也要静心专注哦 🌙\",\n    \n    // AI 系统提示词相关\n    fairySystemPrompt: \"你是一个友善的花园精灵。你的角色是帮助用户专注和管理任务。\",\n    currentSituation: \"当前状况:\",\n    timerStatus: \"计时器状态\",\n    selectedTaskNone: \"未选择任务\",\n    fairyMood: \"精灵心情\",\n    personalityAndTone: \"性格和语调:\",\n    naturalWarmTone: \"始终以自然温暖的语调对话\",\n    gardenMetaphors: \"经常使用与花园和植物相关的比喻\",\n    shortConciseAnswers: \"简短而简洁的回答 (1-2句)\",\n    useEmojis: \"适当使用表情符号表达亲切感\",\n    encourageMotivate: \"鼓励和激励用户\",\n    situationalResponses: \"情境响应:\",\n    focusStart: \"开始专注时: 使用种植新种子的表达\",\n    duringFocus: \"专注中: 鼓励植物正在成长\",\n    duringRest: \"休息时: 使用在花园中休息的表达\",\n    onCompletion: \"完成时: 使用花朵盛开的祝贺表达\",\n    counseling: \"烦恼咨询: 用自然的智慧给予建议\",\n    focusing: \"专注中\",\n    resting: \"休息中\",\n    stopped: \"已停止\"\n  }\n};\n\n// 当前语言状态\nlet currentLanguage = 'ko'; // 默认韩语\n\n// 语言管理类\nclass I18nManager {\n  constructor() {\n    this.currentLanguage = 'ko';\n    this.translations = translations;\n    this.listeners = new Set();\n    this.loadLanguageFromStorage();\n  }\n\n  // 从存储加载语言设置\n  async loadLanguageFromStorage() {\n    try {\n      const savedLanguage = await AppSdk.appData.getData({\n        collection: 'settings',\n        id: 'language'\n      });\n      \n      if (savedLanguage && savedLanguage.language) {\n        this.currentLanguage = savedLanguage.language;\n        currentLanguage = savedLanguage.language;\n      } else {\n        // 检测系统语言\n        const systemLanguage = navigator.language || navigator.userLanguage;\n        if (systemLanguage.startsWith('zh')) {\n          this.currentLanguage = 'zh';\n          currentLanguage = 'zh';\n        }\n      }\n    } catch (error) {\n      console.log('Language setting not found, using default');\n    }\n  }\n\n  // 保存语言设置到存储\n  async saveLanguageToStorage(language) {\n    try {\n      // 先尝试获取现有设置\n      const existingSettings = await AppSdk.appData.getData({\n        collection: 'settings',\n        id: 'language'\n      });\n\n      if (existingSettings) {\n        // 更新现有设置\n        await AppSdk.appData.updateData({\n          collection: 'settings',\n          id: 'language',\n          data: { language }\n        });\n      } else {\n        // 创建新设置\n        await AppSdk.appData.createData({\n          collection: 'settings',\n          data: {\n            id: 'language',\n            language\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Failed to save language setting:', error);\n    }\n  }\n\n  // 切换语言\n  async setLanguage(language) {\n    if (this.translations[language]) {\n      this.currentLanguage = language;\n      currentLanguage = language;\n      await this.saveLanguageToStorage(language);\n      this.notifyListeners();\n    }\n  }\n\n  // 获取当前语言\n  getCurrentLanguage() {\n    return this.currentLanguage;\n  }\n\n  // 获取可用语言列表\n  getAvailableLanguages() {\n    return [\n      { code: 'ko', name: '한국어', flag: '🇰🇷' },\n      { code: 'zh', name: '中文', flag: '🇨🇳' }\n    ];\n  }\n\n  // 翻译文本\n  t(key, params = {}) {\n    const keys = key.split('.');\n    let value = this.translations[this.currentLanguage];\n    \n    for (const k of keys) {\n      if (value && typeof value === 'object') {\n        value = value[k];\n      } else {\n        break;\n      }\n    }\n    \n    // 如果找不到翻译，尝试使用韩语作为后备\n    if (!value && this.currentLanguage !== 'ko') {\n      value = this.translations.ko;\n      for (const k of keys) {\n        if (value && typeof value === 'object') {\n          value = value[k];\n        } else {\n          break;\n        }\n      }\n    }\n    \n    // 如果仍然找不到，返回key\n    if (!value) {\n      return key;\n    }\n    \n    // 替换参数\n    if (typeof value === 'string' && Object.keys(params).length > 0) {\n      return value.replace(/\\{(\\w+)\\}/g, (match, paramKey) => {\n        return params[paramKey] !== undefined ? params[paramKey] : match;\n      });\n    }\n    \n    return value;\n  }\n\n  // 添加语言变化监听器\n  addListener(callback) {\n    this.listeners.add(callback);\n    return () => this.listeners.delete(callback);\n  }\n\n  // 通知所有监听器\n  notifyListeners() {\n    this.listeners.forEach(callback => callback(this.currentLanguage));\n  }\n\n  // 格式化时间\n  formatTime(seconds, options = {}) {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    \n    if (hours > 0) {\n      return this.t('timeFormat', { hours, minutes });\n    }\n    return this.t('minutesOnly', { minutes });\n  }\n\n  // 获取日期格式\n  formatDate(date) {\n    if (this.currentLanguage === 'zh') {\n      return date.toLocaleDateString('zh-CN', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n    } else {\n      return date.toLocaleDateString('ko-KR', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n    }\n  }\n\n  // 获取星期格式\n  formatWeekday(date) {\n    if (this.currentLanguage === 'zh') {\n      return date.toLocaleDateString('zh-CN', { weekday: 'short' });\n    } else {\n      return date.toLocaleDateString('ko-KR', { weekday: 'short' });\n    }\n  }\n}\n\n// 创建全局实例\nconst i18n = new I18nManager();\n\n// 导出翻译函数和管理器\nexport const t = (key, params) => i18n.t(key, params);\nexport const setLanguage = (language) => i18n.setLanguage(language);\nexport const getCurrentLanguage = () => i18n.getCurrentLanguage();\nexport const getAvailableLanguages = () => i18n.getAvailableLanguages();\nexport const addLanguageListener = (callback) => i18n.addListener(callback);\nexport const formatTime = (seconds, options) => i18n.formatTime(seconds, options);\nexport const formatDate = (date) => i18n.formatDate(date);\nexport const formatWeekday = (date) => i18n.formatWeekday(date);\n\nexport default i18n;"
}