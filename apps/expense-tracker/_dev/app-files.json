{
  "app.jsx": "import React, { useState, useEffect } from 'react';\nimport { IonApp, IonTabs, IonTab, IonTabBar, IonTabButton, IonIcon, IonContent, IonRouterOutlet } from '@ionic/react';\nimport { IonReactHashRouter } from '@ionic/react-router';\nimport { addCircle, list, statsChart } from 'ionicons/icons';\nimport AddRecordTab from './components/AddRecordTab';\nimport RecordsTab from './components/RecordsTab';\nimport StatsTab from './components/StatsTab';\nimport { useAppStore } from './store/useAppStore';\nimport { t } from './utils/i18n';\nimport './styles/global.css';\n\nexport default function App() {\n  const triggerRefresh = useAppStore((state) => state.triggerRefresh);\n\n  const handleTabChange = (e) => {\n    triggerRefresh();\n  };\n\n  return (\n    <IonApp>\n      <IonReactHashRouter>\n        <IonTabs onIonTabsDidChange={handleTabChange}>\n          <IonTab tab=\"add\">\n            <AddRecordTab />\n          </IonTab>\n          <IonTab tab=\"records\">\n            <RecordsTab />\n          </IonTab>\n          <IonTab tab=\"stats\">\n            <StatsTab />\n          </IonTab>\n\n          <IonTabBar slot=\"bottom\">\n            <IonTabButton tab=\"add\">\n              <IonIcon icon={addCircle} />\n              {t('tabs.add')}\n            </IonTabButton>\n            <IonTabButton tab=\"records\">\n              <IonIcon icon={list} />\n              {t('tabs.records')}\n            </IonTabButton>\n            <IonTabButton tab=\"stats\">\n              <IonIcon icon={statsChart} />\n              {t('tabs.stats')}\n            </IonTabButton>\n          </IonTabBar>\n        </IonTabs>\n      </IonReactHashRouter>\n    </IonApp>\n  );\n}\n",
  "components/AddRecordTab.jsx": "import React, { useState, useEffect } from 'react';\nimport { IonPage, IonContent, IonButton, IonInput, IonTextarea, IonToast, IonLoading } from '@ionic/react';\nimport { PageHeader } from '@morphixai/components';\nimport AppSdk from '@morphixai/app-sdk';\nimport { reportError } from '@morphixai/lib';\nimport { useAppStore } from '../store/useAppStore';\nimport { t, getExpenseCategories, getIncomeCategories, getCategoryKey } from '../utils/i18n';\nimport styles from '../styles/AddRecord.module.css';\n\nexport default function AddRecordTab() {\n  const [type, setType] = useState('expense');\n  const [amount, setAmount] = useState('');\n  const [category, setCategory] = useState('');\n  const [note, setNote] = useState('');\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const refreshTick = useAppStore((state) => state.refreshTick);\n  const triggerRefresh = useAppStore((state) => state.triggerRefresh);\n\n  const categories = type === 'expense' ? getExpenseCategories() : getIncomeCategories();\n\n  useEffect(() => {\n    setAmount('');\n    setNote('');\n    setCategory('');\n  }, [refreshTick]);\n\n  const handleSave = async () => {\n    if (!amount || parseFloat(amount) <= 0) {\n      setToastMessage(t('addRecord.invalidAmount'));\n      setShowToast(true);\n      return;\n    }\n\n    if (!category) {\n      setToastMessage(t('addRecord.selectCategory'));\n      setShowToast(true);\n      return;\n    }\n\n    setLoading(true);\n    try {\n      await AppSdk.appData.createData({\n        collection: 'records',\n        data: {\n          type,\n          amount: parseFloat(amount),\n          category,\n          note: note.trim(),\n          timestamp: Date.now()\n        }\n      });\n\n      setToastMessage(t('addRecord.saveSuccess'));\n      setShowToast(true);\n      setAmount('');\n      setNote('');\n      setCategory('');\n      triggerRefresh();\n    } catch (error) {\n      await reportError(error, 'JavaScriptError', { component: 'AddRecordTab' });\n      setToastMessage(t('addRecord.saveFailed'));\n      setShowToast(true);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <IonPage>\n      <PageHeader title={t('addRecord.title')} />\n      <IonContent>\n        <div className={styles.content}>\n          <div className={styles.typeSelector}>\n            <button\n              className={`${styles.typeButton} ${type === 'expense' ? styles.typeButtonActive : ''}`}\n              onClick={() => {\n                setType('expense');\n                setCategory('');\n              }}\n            >\n              {t('addRecord.expense')}\n            </button>\n            <button\n              className={`${styles.typeButton} ${type === 'income' ? styles.typeButtonActive : ''}`}\n              onClick={() => {\n                setType('income');\n                setCategory('');\n              }}\n            >\n              {t('addRecord.income')}\n            </button>\n          </div>\n\n          <div className={styles.amountSection}>\n            <div className={styles.amountLabel}>{t('addRecord.amount')}</div>\n            <div className={styles.amountInput}>\n              <span className={styles.currency}>Â¥</span>\n              <input\n                type=\"number\"\n                placeholder=\"0.00\"\n                value={amount}\n                onChange={(e) => setAmount(e.target.value)}\n                className={styles.input}\n              />\n            </div>\n          </div>\n\n          <div className={styles.section}>\n            <div className={styles.sectionLabel}>{t('addRecord.category')}</div>\n            <div className={styles.categories}>\n              {categories.map((cat) => (\n                <button\n                  key={cat.name}\n                  className={`${styles.categoryButton} ${category === cat.name ? styles.categoryButtonActive : ''}`}\n                  onClick={() => setCategory(cat.name)}\n                >\n                  {t(`categories.${type}.${cat.key}`)}\n                </button>\n              ))}\n            </div>\n          </div>\n\n          <div className={styles.section}>\n            <div className={styles.sectionLabel}>{t('addRecord.note')}</div>\n            <textarea\n              placeholder={t('addRecord.notePlaceholder')}\n              value={note}\n              onChange={(e) => setNote(e.target.value)}\n              className={styles.textarea}\n              rows={3}\n            />\n          </div>\n\n          <IonButton\n            expand=\"block\"\n            className={styles.saveButton}\n            onClick={handleSave}\n          >\n            {t('addRecord.saveButton')}\n          </IonButton>\n        </div>\n      </IonContent>\n\n      <IonToast\n        isOpen={showToast}\n        onDidDismiss={() => setShowToast(false)}\n        message={toastMessage}\n        duration={2000}\n        position=\"top\"\n      />\n\n      <IonLoading\n        key=\"loading\"\n        isOpen={loading}\n        message={t('addRecord.saving')}\n        spinner=\"crescent\"\n      />\n    </IonPage>\n  );\n}\n",
  "components/RecordsTab.jsx": "import React, { useState, useEffect } from 'react';\nimport { IonPage, IonContent, IonRefresher, IonRefresherContent, IonModal, IonButton, IonToast } from '@ionic/react';\nimport { PageHeader } from '@morphixai/components';\nimport AppSdk from '@morphixai/app-sdk';\nimport { reportError } from '@morphixai/lib';\nimport dayjs from 'dayjs';\nimport { useAppStore } from '../store/useAppStore';\nimport { t, getExpenseCategories, getIncomeCategories, getCategoryKey } from '../utils/i18n';\nimport styles from '../styles/Records.module.css';\n\nexport default function RecordsTab() {\n  const [records, setRecords] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [editingRecord, setEditingRecord] = useState(null);\n  const [editAmount, setEditAmount] = useState('');\n  const [editCategory, setEditCategory] = useState('');\n  const [editNote, setEditNote] = useState('');\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n\n  const refreshTick = useAppStore((state) => state.refreshTick);\n\n  const loadRecords = async (showLoading = false) => {\n    if (showLoading) setLoading(true);\n    try {\n      const data = await AppSdk.appData.queryData({\n        collection: 'records',\n        query: []\n      });\n      const sorted = data.sort((a, b) => b.timestamp - a.timestamp);\n      setRecords(sorted);\n    } catch (error) {\n      await reportError(error, 'JavaScriptError', { component: 'RecordsTab' });\n    } finally {\n      if (showLoading) setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadRecords(true);\n  }, []);\n\n  useEffect(() => {\n    if (refreshTick > 0) {\n      loadRecords(false);\n    }\n  }, [refreshTick]);\n\n  const handleRefresh = async (event) => {\n    await loadRecords(false);\n    event.detail.complete();\n  };\n\n  const handleEdit = (record) => {\n    setEditingRecord(record);\n    setEditAmount(record.amount.toString());\n    setEditCategory(record.category);\n    setEditNote(record.note || '');\n    setShowEditModal(true);\n  };\n\n  const handleSaveEdit = async () => {\n    if (!editAmount || parseFloat(editAmount) <= 0) {\n      setToastMessage(t('addRecord.invalidAmount'));\n      setShowToast(true);\n      return;\n    }\n\n    if (!editCategory) {\n      setToastMessage(t('addRecord.selectCategory'));\n      setShowToast(true);\n      return;\n    }\n\n    try {\n      await AppSdk.appData.updateData({\n        collection: 'records',\n        id: editingRecord.id,\n        data: {\n          amount: parseFloat(editAmount),\n          category: editCategory,\n          note: editNote.trim()\n        }\n      });\n\n      setToastMessage(t('records.updateSuccess'));\n      setShowToast(true);\n      setShowEditModal(false);\n      loadRecords();\n    } catch (error) {\n      await reportError(error, 'JavaScriptError', { component: 'RecordsTab' });\n      setToastMessage(t('records.updateFailed'));\n      setShowToast(true);\n    }\n  };\n\n  const handleDelete = async (record) => {\n    if (!confirm(t('records.deleteConfirm'))) return;\n\n    try {\n      await AppSdk.appData.deleteData({\n        collection: 'records',\n        id: record.id\n      });\n\n      setToastMessage(t('records.deleteSuccess'));\n      setShowToast(true);\n      loadRecords();\n    } catch (error) {\n      await reportError(error, 'JavaScriptError', { component: 'RecordsTab' });\n      setToastMessage(t('records.deleteFailed'));\n      setShowToast(true);\n    }\n  };\n\n  const categories = editingRecord?.type === 'expense' ? getExpenseCategories() : getIncomeCategories();\n\n  const getCategoryDisplayName = (record) => {\n    const categoryKey = getCategoryKey(record.type, record.category);\n    return t(`categories.${record.type}.${categoryKey}`);\n  };\n\n  return (\n    <IonPage>\n      <PageHeader title={t('records.title')} />\n      <IonContent>\n        <IonRefresher slot=\"fixed\" onIonRefresh={handleRefresh}>\n          <IonRefresherContent />\n        </IonRefresher>\n\n        <div className={styles.content}>\n          {records.length === 0 && !loading && (\n            <div className={styles.empty}>{t('records.empty')}</div>\n          )}\n\n          {records.map((record) => (\n            <div key={record.id} className={styles.recordCard}>\n              <div className={styles.recordMain}>\n                <div className={styles.recordLeft}>\n                  <div className={styles.recordCategory}>{getCategoryDisplayName(record)}</div>\n                  <div className={styles.recordDate}>\n                    {dayjs(record.timestamp).format('YYYY-MM-DD HH:mm')}\n                  </div>\n                  {record.note && (\n                    <div className={styles.recordNote}>{record.note}</div>\n                  )}\n                </div>\n                <div className={styles.recordRight}>\n                  <div className={`${styles.recordAmount} ${record.type === 'expense' ? styles.expense : styles.income}`}>\n                    {record.type === 'expense' ? '-' : '+'}Â¥{record.amount.toFixed(2)}\n                  </div>\n                </div>\n              </div>\n              <div className={styles.recordActions}>\n                <button className={styles.actionButton} onClick={() => handleEdit(record)}>\n                  {t('records.edit')}\n                </button>\n                <button className={styles.actionButton} onClick={() => handleDelete(record)}>\n                  {t('records.delete')}\n                </button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </IonContent>\n\n      <IonModal isOpen={showEditModal} onDidDismiss={() => setShowEditModal(false)}>\n        <div className={styles.modalContainer}>\n          <PageHeader title={t('records.editTitle')} />\n          <IonContent>\n            <div className={styles.modalContent}>\n              <div className={styles.modalSection}>\n                <div className={styles.modalLabel}>{t('addRecord.amount')}</div>\n                <div className={styles.modalAmountInput}>\n                  <span className={styles.currency}>Â¥</span>\n                  <input\n                    type=\"number\"\n                    value={editAmount}\n                    onChange={(e) => setEditAmount(e.target.value)}\n                    className={styles.input}\n                  />\n                </div>\n              </div>\n\n              <div className={styles.modalSection}>\n                <div className={styles.modalLabel}>{t('addRecord.category')}</div>\n                <div className={styles.categories}>\n                  {categories.map((cat) => (\n                    <button\n                      key={cat.name}\n                      className={`${styles.categoryButton} ${editCategory === cat.name ? styles.categoryButtonActive : ''}`}\n                      onClick={() => setEditCategory(cat.name)}\n                    >\n                      {t(`categories.${editingRecord?.type}.${cat.key}`)}\n                    </button>\n                  ))}\n                </div>\n              </div>\n\n              <div className={styles.modalSection}>\n                <div className={styles.modalLabel}>{t('addRecord.note')}</div>\n                <textarea\n                  value={editNote}\n                  onChange={(e) => setEditNote(e.target.value)}\n                  className={styles.textarea}\n                  rows={3}\n                />\n              </div>\n\n              <div className={styles.modalButtons}>\n                <IonButton expand=\"block\" onClick={handleSaveEdit}>\n                  {t('records.save')}\n                </IonButton>\n                <IonButton expand=\"block\" fill=\"outline\" onClick={() => setShowEditModal(false)}>\n                  {t('records.cancel')}\n                </IonButton>\n              </div>\n            </div>\n          </IonContent>\n        </div>\n      </IonModal>\n\n      <IonToast\n        isOpen={showToast}\n        onDidDismiss={() => setShowToast(false)}\n        message={toastMessage}\n        duration={2000}\n        position=\"top\"\n      />\n    </IonPage>\n  );\n}\n",
  "components/StatsTab.jsx": "import React, { useState, useEffect } from 'react';\nimport { IonPage, IonContent, IonRefresher, IonRefresherContent } from '@ionic/react';\nimport { PageHeader } from '@morphixai/components';\nimport AppSdk from '@morphixai/app-sdk';\nimport { reportError } from '@morphixai/lib';\nimport dayjs from 'dayjs';\nimport { useAppStore } from '../store/useAppStore';\nimport { t, getCategoryKey } from '../utils/i18n';\nimport styles from '../styles/Stats.module.css';\n\nexport default function StatsTab() {\n  const [records, setRecords] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentMonth, setCurrentMonth] = useState(dayjs().format('YYYY-MM'));\n\n  const refreshTick = useAppStore((state) => state.refreshTick);\n\n  const loadRecords = async (showLoading = false) => {\n    if (showLoading) setLoading(true);\n    try {\n      const data = await AppSdk.appData.queryData({\n        collection: 'records',\n        query: []\n      });\n      setRecords(data);\n    } catch (error) {\n      await reportError(error, 'JavaScriptError', { component: 'StatsTab' });\n    } finally {\n      if (showLoading) setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadRecords(true);\n  }, []);\n\n  useEffect(() => {\n    if (refreshTick > 0) {\n      loadRecords(false);\n    }\n  }, [refreshTick]);\n\n  const handleRefresh = async (event) => {\n    await loadRecords(false);\n    event.detail.complete();\n  };\n\n  const monthRecords = records.filter((record) => {\n    const recordMonth = dayjs(record.timestamp).format('YYYY-MM');\n    return recordMonth === currentMonth;\n  });\n\n  const totalIncome = monthRecords\n    .filter((r) => r.type === 'income')\n    .reduce((sum, r) => sum + r.amount, 0);\n\n  const totalExpense = monthRecords\n    .filter((r) => r.type === 'expense')\n    .reduce((sum, r) => sum + r.amount, 0);\n\n  const balance = totalIncome - totalExpense;\n\n  const expenseByCategory = monthRecords\n    .filter((r) => r.type === 'expense')\n    .reduce((acc, r) => {\n      acc[r.category] = (acc[r.category] || 0) + r.amount;\n      return acc;\n    }, {});\n\n  const categoryStats = Object.entries(expenseByCategory)\n    .map(([category, amount]) => ({\n      category,\n      amount,\n      percentage: totalExpense > 0 ? (amount / totalExpense) * 100 : 0\n    }))\n    .sort((a, b) => b.amount - a.amount);\n\n  const changeMonth = (offset) => {\n    const newMonth = dayjs(currentMonth).add(offset, 'month').format('YYYY-MM');\n    setCurrentMonth(newMonth);\n  };\n\n  const getCategoryDisplayName = (categoryName) => {\n    const categoryKey = getCategoryKey('expense', categoryName);\n    return t(`categories.expense.${categoryKey}`);\n  };\n\n  return (\n    <IonPage>\n      <PageHeader title={t('stats.title')} />\n      <IonContent>\n        <IonRefresher slot=\"fixed\" onIonRefresh={handleRefresh}>\n          <IonRefresherContent />\n        </IonRefresher>\n\n        <div className={styles.content}>\n          <div className={styles.monthSelector}>\n            <button className={styles.monthButton} onClick={() => changeMonth(-1)}>\n              â¹\n            </button>\n            <div className={styles.monthText}>{currentMonth}</div>\n            <button className={styles.monthButton} onClick={() => changeMonth(1)}>\n              âº\n            </button>\n          </div>\n\n          <div className={styles.summaryCards}>\n            <div className={styles.summaryCard}>\n              <div className={styles.summaryLabel}>{t('stats.income')}</div>\n              <div className={`${styles.summaryAmount} ${styles.income}`}>\n                Â¥{totalIncome.toFixed(2)}\n              </div>\n            </div>\n\n            <div className={styles.summaryCard}>\n              <div className={styles.summaryLabel}>{t('stats.expense')}</div>\n              <div className={`${styles.summaryAmount} ${styles.expense}`}>\n                Â¥{totalExpense.toFixed(2)}\n              </div>\n            </div>\n\n            <div className={`${styles.summaryCard} ${styles.balanceCard}`}>\n              <div className={styles.summaryLabel}>{t('stats.balance')}</div>\n              <div className={`${styles.summaryAmount} ${balance >= 0 ? styles.income : styles.expense}`}>\n                Â¥{balance.toFixed(2)}\n              </div>\n            </div>\n          </div>\n\n          {categoryStats.length > 0 && (\n            <div className={styles.categorySection}>\n              <div className={styles.sectionTitle}>{t('stats.categoryTitle')}</div>\n              {categoryStats.map((stat) => (\n                <div key={stat.category} className={styles.categoryItem}>\n                  <div className={styles.categoryInfo}>\n                    <div className={styles.categoryName}>{getCategoryDisplayName(stat.category)}</div>\n                    <div className={styles.categoryAmount}>Â¥{stat.amount.toFixed(2)}</div>\n                  </div>\n                  <div className={styles.progressBar}>\n                    <div\n                      className={styles.progressFill}\n                      style={{ width: `${stat.percentage}%` }}\n                    />\n                  </div>\n                  <div className={styles.categoryPercentage}>\n                    {stat.percentage.toFixed(1)}%\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n\n          {monthRecords.length === 0 && !loading && (\n            <div className={styles.empty}>{t('stats.empty')}</div>\n          )}\n        </div>\n      </IonContent>\n    </IonPage>\n  );\n}\n",
  "components/Welcome.jsx": "import React from 'react';\nimport { IonIcon } from '@ionic/react';\nimport { downloadOutline, globeOutline} from 'ionicons/icons';\nimport styles from '../styles/Welcome.module.css';\n\n/**\n * æ¬¢è¿ç»ä»¶ - ä»ç¨äºæ¼ç¤º\n * \n * è¿ä¸ªç»ä»¶ç¨äºå±ç¤º Morphix AI Code çåè½åçé¢è®¾è®¡\n * å¨å®éå¼åä¸­ï¼è¯·å é¤æ­¤ç»ä»¶å¹¶åå»ºæ¨èªå·±çåºç¨çé¢\n * \n * @component\n * @returns {JSX.Element} æ¬¢è¿é¡µé¢ç»ä»¶\n */\nexport default function Welcome() {\n    const openDownload = () => {\n        window.open('https://baibian.app/mobile-download', '_blank');\n    };\n\n    const openWebsite = () => {\n        window.open('https://baibian.app/', '_blank');\n    };\n\n    return (\n        <div className={styles.welcomeContainer}>\n\n            {/* å¤´é¨ */}\n            <div className={styles.header}>\n                <div className={styles.logo}>\n                    <img\n                        src=\"https://app-shell.focusbe.com/Icon-60@3x.png\"\n                        alt=\"Morphix AI Logo\"\n                        className={styles.logoImage}\n                        onError={(e) => {\n                            e.target.style.display = 'none';\n                        }}\n                    />\n                    <div className={styles.logoGlow}></div>\n                </div>\n\n                <h1 className={styles.title}>\n                    <span className={styles.titleGradient}>Morphix AI</span>\n                    <span className={styles.titleSubtext}>Code</span>\n                </h1>\n                <p className={styles.subtitle}>Create your own app with AI</p>\n            </div>\n\n            {/* ä¸ä¸ªæ­¥éª¤ */}\n            <div className={styles.steps}>\n                <div className={styles.step}>\n                    <div className={styles.stepNumber}>1</div>\n                    <div className={styles.stepContent}>\n                        <h3>Describe</h3>\n                        <p>Your app idea</p>\n                    </div>\n                </div>\n\n                <div className={styles.step}>\n                    <div className={styles.stepNumber}>2</div>\n                    <div className={styles.stepContent}>\n                        <h3>Generate</h3>\n                        <p>AI builds a preview</p>\n                    </div>\n                </div>\n\n                <div className={styles.step}>\n                    <div className={styles.stepNumber}>3</div>\n                    <div className={styles.stepContent}>\n                        <h3>Launch</h3>\n                        <p>Use in Morphix</p>\n                    </div>\n                </div>\n            </div>\n\n            {/* è¡å¨æé® */}\n            <div className={styles.ctaSection}>\n                <button \n                    className={styles.primaryBtn}\n                    onClick={openDownload}\n                >\n                    <IonIcon icon={downloadOutline} />\n                    Download Morphix AI\n                </button>\n                \n                <button \n                    className={styles.secondaryBtn}\n                    onClick={openWebsite}\n                >\n                    <IonIcon icon={globeOutline} />\n                    Visit Website\n                </button>\n            </div>\n\n            {/* åºé¨ */}\n            <div className={styles.footer}>\n                <p>2024 Morphix AI. Empowering everyone to create apps.</p>\n            </div>\n        </div>\n    );\n}\n",
  "store/useAppStore.js": "import { create } from 'zustand';\n\nexport const useAppStore = create((set) => ({\n  refreshTick: 0,\n  triggerRefresh: () => set((state) => ({ refreshTick: state.refreshTick + 1 })),\n}));\n",
  "styles/AddRecord.module.css": ".container {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n.content {\n  padding: 20px;\n  max-width: 600px;\n  margin: 0 auto;\n  width: 100%;\n}\n\n.typeSelector {\n  display: flex;\n  gap: 12px;\n  margin-bottom: 32px;\n}\n\n.typeButton {\n  flex: 1;\n  height: 48px;\n  border: 2px solid var(--border-color);\n  background: var(--bg-primary);\n  color: var(--text-primary);\n  border-radius: 12px;\n  font-size: 16px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s;\n}\n\n.typeButton:active {\n  transform: scale(0.98);\n}\n\n.typeButtonActive {\n  border-color: var(--primary-color);\n  background: var(--primary-color);\n  color: white;\n}\n\n.amountSection {\n  margin-bottom: 32px;\n}\n\n.amountLabel {\n  font-size: 14px;\n  color: var(--text-secondary);\n  margin-bottom: 12px;\n}\n\n.amountInput {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.currency {\n  font-size: 32px;\n  font-weight: 700;\n  color: var(--text-primary);\n}\n\n.input {\n  flex: 1;\n  font-size: 32px;\n  font-weight: 700;\n  border: none;\n  outline: none;\n  background: transparent;\n  color: var(--text-primary);\n  padding: 8px 0;\n}\n\n.input::placeholder {\n  color: var(--text-secondary);\n  opacity: 0.5;\n}\n\n.section {\n  margin-bottom: 32px;\n}\n\n.sectionLabel {\n  font-size: 14px;\n  color: var(--text-secondary);\n  margin-bottom: 12px;\n}\n\n.categories {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 12px;\n}\n\n.categoryButton {\n  height: 48px;\n  border: 2px solid var(--border-color);\n  background: var(--bg-primary);\n  color: var(--text-primary);\n  border-radius: 12px;\n  font-size: 14px;\n  cursor: pointer;\n  transition: all 0.2s;\n}\n\n.categoryButton:active {\n  transform: scale(0.95);\n}\n\n.categoryButtonActive {\n  border-color: var(--primary-color);\n  background: var(--primary-color);\n  color: white;\n}\n\n.textarea {\n  width: 100%;\n  padding: 12px;\n  border: 2px solid var(--border-color);\n  border-radius: 12px;\n  font-size: 14px;\n  font-family: inherit;\n  resize: none;\n  background: var(--bg-primary);\n  color: var(--text-primary);\n  outline: none;\n}\n\n.textarea:focus {\n  border-color: var(--primary-color);\n}\n\n.saveButton {\n  margin-top: 24px;\n}\n",
  "styles/App.module.css": "/* ä¸»åºç¨æ ·å¼ */\n\n.content {\n  --padding: 0;\n  background: #ffffff;\n  min-height: 100vh;\n  color: #1f2937;\n}",
  "styles/Records.module.css": ".container {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n.content {\n  padding: 16px;\n  max-width: 600px;\n  margin: 0 auto;\n  width: 100%;\n}\n\n.empty {\n  text-align: center;\n  color: var(--text-secondary);\n  padding: 60px 20px;\n  font-size: 14px;\n}\n\n.recordCard {\n  background: var(--bg-primary);\n  border: 1px solid var(--border-color);\n  border-radius: 12px;\n  padding: 16px;\n  margin-bottom: 12px;\n}\n\n.recordMain {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: 12px;\n}\n\n.recordLeft {\n  flex: 1;\n}\n\n.recordCategory {\n  font-size: 16px;\n  font-weight: 600;\n  color: var(--text-primary);\n  margin-bottom: 4px;\n}\n\n.recordDate {\n  font-size: 12px;\n  color: var(--text-secondary);\n  margin-bottom: 4px;\n}\n\n.recordNote {\n  font-size: 14px;\n  color: var(--text-secondary);\n  margin-top: 8px;\n}\n\n.recordRight {\n  text-align: right;\n}\n\n.recordAmount {\n  font-size: 20px;\n  font-weight: 700;\n}\n\n.expense {\n  color: var(--expense-color);\n}\n\n.income {\n  color: var(--income-color);\n}\n\n.recordActions {\n  display: flex;\n  gap: 12px;\n  padding-top: 12px;\n  border-top: 1px solid var(--border-color);\n}\n\n.actionButton {\n  flex: 1;\n  height: 36px;\n  border: 1px solid var(--border-color);\n  background: var(--bg-secondary);\n  color: var(--text-primary);\n  border-radius: 8px;\n  font-size: 14px;\n  cursor: pointer;\n  transition: all 0.2s;\n}\n\n.actionButton:active {\n  transform: scale(0.98);\n}\n\n.modalContainer {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n.modalContent {\n  padding: 20px;\n}\n\n.modalSection {\n  margin-bottom: 24px;\n}\n\n.modalLabel {\n  font-size: 14px;\n  color: var(--text-secondary);\n  margin-bottom: 12px;\n}\n\n.modalAmountInput {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.currency {\n  font-size: 24px;\n  font-weight: 700;\n  color: var(--text-primary);\n}\n\n.input {\n  flex: 1;\n  font-size: 24px;\n  font-weight: 700;\n  border: none;\n  outline: none;\n  background: transparent;\n  color: var(--text-primary);\n  padding: 8px 0;\n}\n\n.categories {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 12px;\n}\n\n.categoryButton {\n  height: 44px;\n  border: 2px solid var(--border-color);\n  background: var(--bg-primary);\n  color: var(--text-primary);\n  border-radius: 12px;\n  font-size: 14px;\n  cursor: pointer;\n  transition: all 0.2s;\n}\n\n.categoryButton:active {\n  transform: scale(0.95);\n}\n\n.categoryButtonActive {\n  border-color: var(--primary-color);\n  background: var(--primary-color);\n  color: white;\n}\n\n.textarea {\n  width: 100%;\n  padding: 12px;\n  border: 2px solid var(--border-color);\n  border-radius: 12px;\n  font-size: 14px;\n  font-family: inherit;\n  resize: none;\n  background: var(--bg-primary);\n  color: var(--text-primary);\n  outline: none;\n}\n\n.textarea:focus {\n  border-color: var(--primary-color);\n}\n\n.modalButtons {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin-top: 24px;\n}\n",
  "styles/Stats.module.css": ".container {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n.content {\n  padding: 16px;\n  max-width: 600px;\n  margin: 0 auto;\n  width: 100%;\n}\n\n.monthSelector {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 24px;\n  margin-bottom: 24px;\n  padding: 12px;\n}\n\n.monthButton {\n  width: 40px;\n  height: 40px;\n  border: 1px solid var(--border-color);\n  background: var(--bg-primary);\n  color: var(--text-primary);\n  border-radius: 50%;\n  font-size: 20px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.2s;\n}\n\n.monthButton:active {\n  transform: scale(0.95);\n  background: var(--bg-secondary);\n}\n\n.monthText {\n  font-size: 18px;\n  font-weight: 600;\n  color: var(--text-primary);\n  min-width: 120px;\n  text-align: center;\n}\n\n.summaryCards {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin-bottom: 32px;\n}\n\n.summaryCard {\n  background: var(--bg-primary);\n  border: 1px solid var(--border-color);\n  border-radius: 16px;\n  padding: 20px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.balanceCard {\n  background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);\n  border: none;\n}\n\n.balanceCard .summaryLabel,\n.balanceCard .summaryAmount {\n  color: white;\n}\n\n.summaryLabel {\n  font-size: 14px;\n  color: var(--text-secondary);\n  font-weight: 500;\n}\n\n.summaryAmount {\n  font-size: 28px;\n  font-weight: 700;\n}\n\n.income {\n  color: var(--income-color);\n}\n\n.expense {\n  color: var(--expense-color);\n}\n\n.categorySection {\n  margin-top: 32px;\n}\n\n.sectionTitle {\n  font-size: 16px;\n  font-weight: 600;\n  color: var(--text-primary);\n  margin-bottom: 16px;\n}\n\n.categoryItem {\n  background: var(--bg-primary);\n  border: 1px solid var(--border-color);\n  border-radius: 12px;\n  padding: 16px;\n  margin-bottom: 12px;\n}\n\n.categoryInfo {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 8px;\n}\n\n.categoryName {\n  font-size: 14px;\n  font-weight: 600;\n  color: var(--text-primary);\n}\n\n.categoryAmount {\n  font-size: 16px;\n  font-weight: 700;\n  color: var(--text-primary);\n}\n\n.progressBar {\n  height: 8px;\n  background: var(--bg-secondary);\n  border-radius: 4px;\n  overflow: hidden;\n  margin-bottom: 8px;\n}\n\n.progressFill {\n  height: 100%;\n  background: var(--primary-color);\n  border-radius: 4px;\n  transition: width 0.3s ease;\n}\n\n.categoryPercentage {\n  font-size: 12px;\n  color: var(--text-secondary);\n  text-align: right;\n}\n\n.empty {\n  text-align: center;\n  color: var(--text-secondary);\n  padding: 60px 20px;\n  font-size: 14px;\n}\n",
  "styles/Welcome.module.css": "/* Welcome ç»ä»¶æ ·å¼ - ç®çº¦é£æ ¼ */\n\n.welcomeContainer {\n  background: #ffffff;\n  min-height: 100vh;\n  color: #333333;\n  position: relative;\n  padding: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n}\n\n/* å¤´é¨ */\n.header {\n  text-align: center;\n  padding: 56px 16px 16px;\n}\n\n.logo {\n  display: inline-block;\n  margin-bottom: 12px;\n}\n\n.logoImage {\n  width: 64px;\n  height: 64px;\n  border-radius: 12px;\n  transition: opacity 0.2s ease;\n  box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.1);\n}\n\n.logoImage:hover {\n  opacity: 0.8;\n}\n\n.title {\n  font-size: 2.1rem;\n  font-weight: 600;\n  margin: 0 0 6px 0;\n  line-height: 1.2;\n  letter-spacing: -0.02em;\n}\n\n.titleGradient {\n  color: #1a1a1a;\n}\n\n.titleSubtext {\n  color: #666666;\n  font-weight: 400;\n  margin-left: 6px;\n}\n\n.subtitle {\n  font-size: 1rem;\n  color: #666666;\n  margin: 0;\n  font-weight: 400;\n}\n\n/* æ­¥éª¤ */\n.steps {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: 8px 16px 16px;\n  max-width: 560px;\n  margin: 0 auto;\n}\n\n.step {\n  padding: 12px 12px;\n  background: #fff;\n  border-radius: 12px;\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  position: relative;\n  text-align: center;\n  transition: background-color 0.2s ease;\n}\n\n.stepContent {\n  margin-top: 0;\n}\n\n.stepContent h3 {\n  font-size: 1.1rem;\n  font-weight: 500;\n  color: #1a1a1a;\n  margin: 0 0 4px 0;\n}\n\n.stepContent p {\n  color: #666666;\n  margin: 0;\n  font-size: 0.95rem;\n  line-height: 1.4;\n}\n\n.stepNumber {\n  position: absolute;\n  top: 8px;\n  left: 8px;\n  background: #e5e5e5;\n  color: #666666;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 500;\n  font-size: 0.75rem;\n}\n\n/* è¡å¨æé® */\n.ctaSection {\n  text-align: center;\n  padding: 16px 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  align-items: center;\n}\n\n.primaryBtn {\n  background: #1a1a1a;\n  color: #ffffff;\n  border: none;\n  border-radius: 6px;\n  padding: 10px 18px;\n  font-weight: 500;\n  font-size: 0.95rem;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  justify-content: center;\n  transition: background-color 0.2s ease;\n  width: 180px;\n  max-width: 90%;\n}\n\n.primaryBtn:hover {\n  background: #333333;\n}\n\n.primaryBtn:active {\n  background: #000000;\n}\n\n.secondaryBtn {\n  background: transparent;\n  color: #666666;\n  border: 1px solid #d5d5d5;\n  border-radius: 6px;\n  padding: 10px 18px;\n  font-weight: 500;\n  font-size: 0.95rem;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  justify-content: center;\n  transition: all 0.2s ease;\n  width: 180px;\n  max-width: 90%;\n}\n\n.secondaryBtn:hover {\n  background: #fafafa;\n  border-color: #999999;\n}\n\n/* åºé¨ */\n.footer {\n  text-align: center;\n  padding: 8px 16px 16px;\n  color: #999999;\n  font-size: 0.85rem;\n}\n\n.footer p {\n  margin: 0;\n}\n\n/* ååºå¼è®¾è®¡ */\n@media (max-width: 768px) {\n  .header {\n    padding: 40px 12px 16px;\n  }\n  \n  .title {\n    font-size: 2rem;\n  }\n  \n  .subtitle {\n    font-size: 1rem;\n  }\n  \n  .steps {\n    padding: 8px 12px 16px;\n  }\n  \n  .step {\n    padding: 12px 12px;\n  }\n  \n  .ctaSection {\n    padding: 16px 12px;\n  }\n}\n\n@media (max-width: 480px) {\n  .header {\n    padding: 32px 12px 14px;\n  }\n  \n  .logoImage {\n    width: 52px;\n    height: 52px;\n  }\n  \n  .title {\n    font-size: 1.7rem;\n  }\n  \n  .primaryBtn, .secondaryBtn {\n    width: 100%;\n    max-width: 280px;\n  }\n}\n\n/* æ¡é¢ç«¯æ´ç´§åçæ­¥éª¤å¸å± */\n@media (min-width: 768px) {\n  .steps {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 10px;\n    max-width: 840px;\n  }\n  .step {\n    text-align: left;\n    padding: 12px;\n  }\n  .stepNumber {\n    top: 10px;\n    left: 10px;\n  }\n}\n\n/* ç®åå¨ç» */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(12px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* åºç¡è¿åºå¨ç» */\n.logo,\n.title,\n.subtitle,\n.step,\n.ctaSection {\n  opacity: 0;\n  animation: fadeIn 0.5s ease-out forwards;\n}\n\n.logo {\n  animation-delay: 0s;\n}\n\n.title {\n  animation-delay: 0.1s;\n}\n\n.subtitle {\n  animation-delay: 0.2s;\n}\n\n.step:nth-child(1) { \n  animation-delay: 0.3s;\n}\n\n.step:nth-child(2) { \n  animation-delay: 0.4s;\n}\n\n.step:nth-child(3) { \n  animation-delay: 0.5s;\n}\n\n.ctaSection {\n  animation-delay: 0.6s;\n}\n",
  "styles/global.css": ":root {\n  --primary-color: #10b981;\n  --primary-light: #34d399;\n  --primary-dark: #059669;\n  --expense-color: #ef4444;\n  --income-color: #10b981;\n  --text-primary: #1f2937;\n  --text-secondary: #6b7280;\n  --bg-primary: #ffffff;\n  --bg-secondary: #f9fafb;\n  --border-color: #e5e7eb;\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --primary-color: #10b981;\n    --primary-light: #34d399;\n    --primary-dark: #059669;\n    --expense-color: #f87171;\n    --income-color: #34d399;\n    --text-primary: #f9fafb;\n    --text-secondary: #9ca3af;\n    --bg-primary: #111827;\n    --bg-secondary: #1f2937;\n    --border-color: #374151;\n  }\n}\n\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Helvetica', 'Arial', sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\nion-tab-bar {\n  --background: var(--bg-primary);\n  --border: 1px solid var(--border-color);\n}\n\nion-tab-button {\n  --color: var(--text-secondary);\n  --color-selected: var(--primary-color);\n}\n\nion-button {\n  --background: var(--primary-color);\n  --background-hover: var(--primary-dark);\n  --background-activated: var(--primary-dark);\n  --border-radius: 12px;\n  font-weight: 600;\n  text-transform: none;\n  height: 48px;\n  margin: 0;\n}\n\nion-modal {\n  --background: var(--bg-primary);\n}\n",
  "utils/i18n.js": "const translations = {\n  zh: {\n    tabs: {\n      add: 'è®°è´¦',\n      records: 'æµæ°´',\n      stats: 'ç»è®¡'\n    },\n    addRecord: {\n      title: 'å¿«éè®°è´¦',\n      expense: 'æ¯åº',\n      income: 'æ¶å¥',\n      amount: 'éé¢',\n      category: 'åç±»',\n      note: 'å¤æ³¨',\n      notePlaceholder: 'æ·»å å¤æ³¨è¯´æï¼å¯éï¼',\n      saveButton: 'ä¿å­è®°å½',\n      saveSuccess: 'è®°è´¦æå',\n      saveFailed: 'ä¿å­å¤±è´¥ï¼è¯·éè¯',\n      invalidAmount: 'è¯·è¾å¥ææéé¢',\n      selectCategory: 'è¯·éæ©åç±»',\n      saving: 'ä¿å­ä¸­...'\n    },\n    records: {\n      title: 'è´¦åæµæ°´',\n      empty: 'ææ è®°è´¦è®°å½',\n      edit: 'ç¼è¾',\n      delete: 'å é¤',\n      editTitle: 'ç¼è¾è®°å½',\n      save: 'ä¿å­',\n      cancel: 'åæ¶',\n      updateSuccess: 'æ´æ°æå',\n      updateFailed: 'æ´æ°å¤±è´¥',\n      deleteSuccess: 'å é¤æå',\n      deleteFailed: 'å é¤å¤±è´¥',\n      deleteConfirm: 'ç¡®å®è¦å é¤è¿æ¡è®°å½åï¼'\n    },\n    stats: {\n      title: 'ç»è®¡æ¦è§',\n      income: 'æ¶å¥',\n      expense: 'æ¯åº',\n      balance: 'ç»ä½',\n      categoryTitle: 'æ¯åºåç±»',\n      empty: 'æ¬æææ è®°è´¦è®°å½'\n    },\n    categories: {\n      expense: {\n        food: 'é¤é¥®',\n        transport: 'äº¤é',\n        shopping: 'è´­ç©',\n        entertainment: 'å¨±ä¹',\n        medical: 'å»ç',\n        housing: 'ä½æ¿',\n        other: 'å¶ä»'\n      },\n      income: {\n        salary: 'å·¥èµ',\n        bonus: 'å¥é',\n        investment: 'æèµ',\n        partTime: 'å¼è',\n        other: 'å¶ä»'\n      }\n    }\n  },\n  en: {\n    tabs: {\n      add: 'Add',\n      records: 'Records',\n      stats: 'Stats'\n    },\n    addRecord: {\n      title: 'Quick Entry',\n      expense: 'Expense',\n      income: 'Income',\n      amount: 'Amount',\n      category: 'Category',\n      note: 'Note',\n      notePlaceholder: 'Add note (optional)',\n      saveButton: 'Save Record',\n      saveSuccess: 'Saved successfully',\n      saveFailed: 'Save failed, please retry',\n      invalidAmount: 'Please enter valid amount',\n      selectCategory: 'Please select category',\n      saving: 'Saving...'\n    },\n    records: {\n      title: 'Records',\n      empty: 'No records yet',\n      edit: 'Edit',\n      delete: 'Delete',\n      editTitle: 'Edit Record',\n      save: 'Save',\n      cancel: 'Cancel',\n      updateSuccess: 'Updated successfully',\n      updateFailed: 'Update failed',\n      deleteSuccess: 'Deleted successfully',\n      deleteFailed: 'Delete failed',\n      deleteConfirm: 'Are you sure to delete this record?'\n    },\n    stats: {\n      title: 'Statistics',\n      income: 'Income',\n      expense: 'Expense',\n      balance: 'Balance',\n      categoryTitle: 'Expense by Category',\n      empty: 'No records this month'\n    },\n    categories: {\n      expense: {\n        food: 'Food',\n        transport: 'Transport',\n        shopping: 'Shopping',\n        entertainment: 'Entertainment',\n        medical: 'Medical',\n        housing: 'Housing',\n        other: 'Other'\n      },\n      income: {\n        salary: 'Salary',\n        bonus: 'Bonus',\n        investment: 'Investment',\n        partTime: 'Part-time',\n        other: 'Other'\n      }\n    }\n  }\n};\n\nconst CATEGORY_KEYS = {\n  expense: {\n    'é¤é¥®': 'food',\n    'äº¤é': 'transport',\n    'è´­ç©': 'shopping',\n    'å¨±ä¹': 'entertainment',\n    'å»ç': 'medical',\n    'ä½æ¿': 'housing',\n    'å¶ä»': 'other'\n  },\n  income: {\n    'å·¥èµ': 'salary',\n    'å¥é': 'bonus',\n    'æèµ': 'investment',\n    'å¼è': 'partTime',\n    'å¶ä»': 'other'\n  }\n};\n\nfunction getSystemLanguage() {\n  const lang = navigator.language || navigator.userLanguage || 'en';\n  if (lang.startsWith('zh')) {\n    return 'zh';\n  }\n  return 'en';\n}\n\nlet currentLanguage = getSystemLanguage();\n\nexport function getCurrentLanguage() {\n  return currentLanguage;\n}\n\nexport function t(key) {\n  const keys = key.split('.');\n  let value = translations[currentLanguage];\n  \n  for (const k of keys) {\n    value = value?.[k];\n  }\n  \n  return value || key;\n}\n\nexport function getCategoryName(type, categoryKey) {\n  return t(`categories.${type}.${categoryKey}`);\n}\n\nexport function getCategoryKey(type, categoryName) {\n  return CATEGORY_KEYS[type]?.[categoryName] || 'other';\n}\n\nexport function getExpenseCategories() {\n  return Object.keys(CATEGORY_KEYS.expense).map(name => ({\n    name,\n    key: CATEGORY_KEYS.expense[name]\n  }));\n}\n\nexport function getIncomeCategories() {\n  return Object.keys(CATEGORY_KEYS.income).map(name => ({\n    name,\n    key: CATEGORY_KEYS.income[name]\n  }));\n}\n"
}