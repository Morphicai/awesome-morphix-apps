{
  "app.jsx": "import React, { useState, useEffect } from 'react';\nimport './styles/global.css';\nimport { \n  IonApp,\n  IonPage, \n  IonContent, \n  IonList, \n  IonItem, \n  IonLabel, \n  IonCheckbox, \n  IonButton, \n  IonIcon, \n  IonFab, \n  IonFabButton, \n  IonModal, \n  IonInput,\n  IonSelect,\n  IonSelectOption,\n  IonSegment,\n  IonSegmentButton,\n  IonFooter,\n  IonToolbar,\n  IonTitle,\n  IonSpinner,\n  IonToast,\n  IonRouterOutlet,\n  IonAlert\n} from '@ionic/react';\nimport { \n  add, \n  star, \n  chevronForward, \n  listOutline,\n  alertCircleOutline,\n  briefcaseOutline, \n  personOutline, \n  cartOutline, \n  bookOutline, \n  appsOutline,\n  closeOutline\n} from 'ionicons/icons';\nimport { IonReactHashRouter } from '@ionic/react-router';\nimport { Route, Switch, useHistory } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport AppSdk from '@morphixai/app-sdk';\nimport { reportError } from '@morphixai/lib';\nimport { PageHeader } from '@morphixai/components';\nimport EditTodoPage from './components/EditTodoPage';\nimport ReorderableTodoList from './components/ReorderableTodoList';\nimport CategorySidebar from './components/CategorySidebar';\nimport CategorySelector from './components/CategorySelector';\nimport CategoryManager from './components/CategoryManager';\nimport { \n  LanguageContext, \n  translate, \n  detectSystemLanguage, \n  getDefaultCategories \n} from './utils/i18n';\n\nconst COLLECTION_NAME = 'todos';\nconst CATEGORY_COLLECTION = 'categories';\n\nconst HomePage = () => {\n  const history = useHistory();\n  const [todos, setTodos] = useState([]);\n  const [newTodo, setNewTodo] = useState('');\n  const [newCategory, setNewCategory] = useState('');\n  const [newPriority, setNewPriority] = useState(1);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [categories, setCategories] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [showCompleted, setShowCompleted] = useState(false);\n  const [filterCategory, setFilterCategory] = useState('');\n  const [initialLoad, setInitialLoad] = useState(true);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [showClearAlert, setShowClearAlert] = useState(false);\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n  const [showCategoryManager, setShowCategoryManager] = useState(false);\n  const [language, setLanguage] = useState('en');\n  \n  const t = (key, params) => translate(language, key, params);\n  \n  useEffect(() => {\n    const initLanguage = async () => {\n      try {\n        const detectedLang = await detectSystemLanguage();\n        setLanguage(detectedLang);\n        const defaultCats = getDefaultCategories(detectedLang);\n        setNewCategory(defaultCats[0]);\n        setFilterCategory(translate(detectedLang, 'categories.all'));\n      } catch (error) {\n        const browserLang = (navigator.language || navigator.userLanguage || 'en').toLowerCase();\n        const detectedLang = browserLang.startsWith('zh') ? 'zh' : 'en';\n        setLanguage(detectedLang);\n        const defaultCats = getDefaultCategories(detectedLang);\n        setNewCategory(defaultCats[0]);\n        setFilterCategory(translate(detectedLang, 'categories.all'));\n      }\n    };\n    initLanguage();\n  }, []);\n  \n  useEffect(() => {\n    const handleResize = () => {\n      setWindowWidth(window.innerWidth);\n    };\n    \n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  \n  useEffect(() => {\n    const loadCategories = async () => {\n      try {\n        const result = await AppSdk.appData.queryData({\n          collection: CATEGORY_COLLECTION,\n          query: []\n        });\n        \n        if (result.length === 0) {\n          const defaultCategories = getDefaultCategories(language);\n          const defaultCategoryPromises = defaultCategories.map(name => \n            AppSdk.appData.createData({\n              collection: CATEGORY_COLLECTION,\n              data: { name, isDefault: true }\n            })\n          );\n          \n          await Promise.all(defaultCategoryPromises);\n          setCategories(defaultCategories);\n        } else {\n          const categoryNames = result.map(cat => cat.name);\n          setCategories(categoryNames);\n        }\n      } catch (error) {\n        await reportError(error, 'LoadCategoriesError', { component: 'HomePage' });\n        console.error('加载分类失败:', error);\n        const defaultCategories = getDefaultCategories(language);\n        setCategories(defaultCategories);\n      }\n    };\n    \n    if (language) {\n      loadCategories();\n    }\n  }, [language]);\n  \n  useEffect(() => {\n    const loadTodos = async () => {\n      try {\n        setIsLoading(true);\n        const result = await AppSdk.appData.queryData({\n          collection: COLLECTION_NAME,\n          query: []\n        });\n        \n        const sortedTodos = result.sort((a, b) => {\n          if (a.order !== undefined && b.order !== undefined) {\n            return a.order - b.order;\n          }\n          return new Date(b.createdAt) - new Date(a.createdAt);\n        });\n        \n        setTodos(sortedTodos);\n      } catch (error) {\n        await reportError(error, 'DataLoadError', { component: 'TodoApp' });\n        console.error('加载任务失败:', error);\n        const savedTodos = localStorage.getItem('todos');\n        if (savedTodos) {\n          setTodos(JSON.parse(savedTodos));\n        }\n      } finally {\n        setIsLoading(false);\n        setInitialLoad(false);\n      }\n    };\n\n    loadTodos();\n  }, []);\n\n  const addTodo = async () => {\n    if (newTodo.trim() !== '') {\n      try {\n        setIsLoading(true);\n        const todoData = {\n          content: newTodo,\n          completed: false,\n          createdAt: new Date().toISOString(),\n          reminder: null,\n          category: newCategory,\n          priority: newPriority,\n          order: todos.length\n        };\n        \n        const createdTodo = await AppSdk.appData.createData({\n          collection: COLLECTION_NAME,\n          data: todoData\n        });\n        \n        setTodos([createdTodo, ...todos]);\n        setNewTodo('');\n        const defaultCats = getDefaultCategories(language);\n        setNewCategory(defaultCats[0]);\n        setNewPriority(1);\n        setShowAddModal(false);\n        \n        setToastMessage(t('messages.taskAdded'));\n        setShowToast(true);\n      } catch (error) {\n        await reportError(error, 'CreateTodoError', { component: 'TodoApp' });\n        console.error('创建任务失败:', error);\n        alert(t('messages.createTaskFailed'));\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  const confirmClearCompleted = (e) => {\n    if (e) {\n      e.stopPropagation();\n    }\n    setShowClearAlert(true);\n  };\n\n  const clearCompleted = async () => {\n    try {\n      setIsLoading(true);\n      const completedTodos = todos.filter(todo => todo.completed);\n      \n      await Promise.all(\n        completedTodos.map(todo => \n          AppSdk.appData.deleteData({\n            collection: COLLECTION_NAME,\n            id: todo.id\n          })\n        )\n      );\n      \n      setTodos(todos.filter(todo => !todo.completed));\n      \n      setToastMessage(t('messages.completedCleared'));\n      setShowToast(true);\n    } catch (error) {\n      await reportError(error, 'ClearCompletedError', { component: 'TodoApp' });\n      console.error('清理已完成任务失败:', error);\n      alert(t('messages.clearCompletedFailed'));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const formatReminder = (reminder) => {\n    if (!reminder) return '';\n    return dayjs(reminder).format('MM-DD HH:mm');\n  };\n\n  const handleEditTodo = (todo) => {\n    history.push(`/edit/${todo.id}`);\n  };\n\n  const filteredTodos = todos.filter(todo => {\n    if (filterCategory !== t('categories.all') && todo.category !== filterCategory) {\n      return false;\n    }\n    return true;\n  });\n\n  const pendingTasks = filteredTodos.filter(todo => !todo.completed);\n  const completedTasks = filteredTodos.filter(todo => todo.completed);\n\n  const handleCategoryChange = (category) => {\n    setFilterCategory(category);\n  };\n\n  const handleCategoriesChange = (updatedCategories) => {\n    setCategories(updatedCategories);\n  };\n\n  const renderEmptyState = () => {\n    return (\n      <div className=\"empty-state\">\n        <IonIcon icon={listOutline} />\n        <h3>{t('tasks.noTasks')}</h3>\n        <p>{t('tasks.noTasksDesc')}</p>\n        <IonButton expand=\"block\" onClick={() => setShowAddModal(true)}>\n          {t('tasks.addFirstTask')}\n        </IonButton>\n      </div>\n    );\n  };\n\n  const renderInitialLoading = () => {\n    return (\n      <div className=\"initial-loading\">\n        <IonSpinner name=\"crescent\" />\n        <p>{t('app.loading')}</p>\n      </div>\n    );\n  };\n\n  return (\n    <IonPage>\n      <PageHeader title={t('app.title')} />\n      <IonContent>\n        <div className=\"app-container\">\n          <CategorySidebar\n            categories={categories}\n            activeCategory={filterCategory}\n            onSelectCategory={handleCategoryChange}\n            todos={todos}\n            language={language}\n          />\n          \n          <div className=\"app-main\">\n            <div className=\"todo-page-content\">\n              <CategorySelector\n                categories={categories}\n                activeCategory={filterCategory}\n                onSelectCategory={handleCategoryChange}\n                onManageCategories={() => setShowCategoryManager(true)}\n                todos={todos}\n                maxVisibleCategories={4}\n                language={language}\n              />\n              \n              <div className=\"main-content\">\n                {initialLoad ? (\n                  renderInitialLoading()\n                ) : filteredTodos.length === 0 ? (\n                  renderEmptyState()\n                ) : (\n                  <>\n                    {pendingTasks.length > 0 && (\n                      <ReorderableTodoList\n                        todos={pendingTasks}\n                        onTodosChange={(updatedTodos) => {\n                          const allUpdatedTodos = [\n                            ...updatedTodos,\n                            ...completedTasks\n                          ];\n                          setTodos(allUpdatedTodos);\n                        }}\n                        onEditTodo={handleEditTodo}\n                        formatReminder={formatReminder}\n                        language={language}\n                      />\n                    )}\n                    \n                    {completedTasks.length > 0 && (\n                      <div>\n                        <div \n                          className=\"completed-header\"\n                          onClick={() => setShowCompleted(!showCompleted)}\n                        >\n                          <div>\n                            <IonIcon \n                              icon={chevronForward} \n                              className={showCompleted ? \"expanded\" : \"\"} \n                            />\n                            {t('tasks.completed')} ({completedTasks.length})\n                          </div>\n                          {completedTasks.length > 0 && (\n                            <IonButton \n                              size=\"small\" \n                              fill=\"clear\" \n                              onClick={confirmClearCompleted}\n                            >\n                              {t('tasks.clear')}\n                            </IonButton>\n                          )}\n                        </div>\n                        \n                        {showCompleted && (\n                          <ReorderableTodoList\n                            todos={completedTasks}\n                            onTodosChange={(updatedTodos) => {\n                              const allUpdatedTodos = [\n                                ...pendingTasks,\n                                ...updatedTodos\n                              ];\n                              setTodos(allUpdatedTodos);\n                            }}\n                            onEditTodo={handleEditTodo}\n                            formatReminder={formatReminder}\n                            language={language}\n                          />\n                        )}\n                      </div>\n                    )}\n                  </>\n                )}\n                \n                <IonFab vertical=\"bottom\" horizontal=\"end\" slot=\"fixed\" className=\"add-task-fab\">\n                  <IonFabButton onClick={() => setShowAddModal(true)} disabled={isLoading}>\n                    <IonIcon icon={add} />\n                  </IonFabButton>\n                </IonFab>\n              </div>\n            </div>\n          </div>\n        </div>\n      </IonContent>\n      \n      <IonModal isOpen={showAddModal} onDidDismiss={() => setShowAddModal(false)}>\n        <IonPage>\n          <PageHeader title={t('tasks.newTask')} />\n          <IonContent>\n            <div style={{ padding: '16px' }}>\n              <div className=\"form-field\">\n                <IonLabel>{t('tasks.taskContent')}</IonLabel>\n                <IonInput\n                  value={newTodo}\n                  placeholder={t('tasks.taskContentPlaceholder')}\n                  onIonChange={e => setNewTodo(e.detail.value)}\n                  className=\"custom-input\"\n                />\n              </div>\n              \n              <div className=\"form-field\">\n                <IonLabel>{t('tasks.category')}</IonLabel>\n                <IonSelect\n                  value={newCategory}\n                  placeholder={t('tasks.selectCategory')}\n                  onIonChange={e => setNewCategory(e.detail.value)}\n                >\n                  {categories.map(category => (\n                    <IonSelectOption key={category} value={category}>\n                      {category}\n                    </IonSelectOption>\n                  ))}\n                </IonSelect>\n              </div>\n              \n              <div className=\"form-field\">\n                <IonLabel>{t('tasks.priority')}</IonLabel>\n                <div className=\"priority-toggle\">\n                  <IonButton \n                    expand=\"block\"\n                    fill={newPriority === 1 ? \"solid\" : \"outline\"}\n                    onClick={() => setNewPriority(1)}\n                  >\n                    {t('tasks.normal')}\n                  </IonButton>\n                  <IonButton \n                    expand=\"block\"\n                    fill={newPriority === 3 ? \"solid\" : \"outline\"}\n                    color=\"warning\"\n                    onClick={() => setNewPriority(3)}\n                  >\n                    {t('tasks.important')}\n                    <IonIcon slot=\"end\" icon={star} />\n                  </IonButton>\n                </div>\n              </div>\n            </div>\n          </IonContent>\n          <IonFooter className=\"modal-footer-safe\">\n            <div className=\"footer-buttons-container\">\n              <IonButton expand=\"block\" onClick={addTodo} disabled={isLoading}>\n                {isLoading ? (\n                  <>\n                    <IonSpinner name=\"crescent\" style={{ marginRight: '8px' }} />\n                    {t('app.processing')}\n                  </>\n                ) : t('tasks.addTask')}\n              </IonButton>\n            </div>\n          </IonFooter>\n        </IonPage>\n      </IonModal>\n      \n      <IonModal isOpen={showCategoryManager} onDidDismiss={() => setShowCategoryManager(false)}>\n        <CategoryManager\n          isOpen={showCategoryManager}\n          onClose={() => setShowCategoryManager(false)}\n          onCategoriesChange={handleCategoriesChange}\n          currentCategories={categories}\n          todos={todos}\n          language={language}\n        />\n      </IonModal>\n      \n      <IonAlert\n        isOpen={showClearAlert}\n        onDidDismiss={() => setShowClearAlert(false)}\n        header={t('confirmations.confirmClear')}\n        message={t('confirmations.clearCompleted', { count: completedTasks.length })}\n        buttons={[\n          {\n            text: t('tasks.cancel'),\n            role: 'cancel'\n          },\n          {\n            text: t('tasks.clear'),\n            handler: () => {\n              clearCompleted();\n            }\n          }\n        ]}\n      />\n      \n      <IonToast\n        isOpen={showToast}\n        onDidDismiss={() => setShowToast(false)}\n        message={toastMessage}\n        duration={2000}\n        position=\"bottom\"\n      />\n    </IonPage>\n  );\n};\n\nconst EditTodoPageWrapper = () => {\n  const history = useHistory();\n  const [todos, setTodos] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [language, setLanguage] = useState('en');\n  \n  const t = (key, params) => translate(language, key, params);\n  \n  useEffect(() => {\n    const initLanguage = async () => {\n      try {\n        const detectedLang = await detectSystemLanguage();\n        setLanguage(detectedLang);\n      } catch (error) {\n        const browserLang = (navigator.language || navigator.userLanguage || 'en').toLowerCase();\n        const detectedLang = browserLang.startsWith('zh') ? 'zh' : 'en';\n        setLanguage(detectedLang);\n      }\n    };\n    initLanguage();\n  }, []);\n  \n  const todoId = window.location.hash.split('/edit/')[1];\n  \n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        setIsLoading(true);\n        \n        const [todosResult, categoriesResult] = await Promise.all([\n          AppSdk.appData.queryData({\n            collection: COLLECTION_NAME,\n            query: []\n          }),\n          AppSdk.appData.queryData({\n            collection: CATEGORY_COLLECTION,\n            query: []\n          })\n        ]);\n        \n        setTodos(todosResult);\n        \n        if (categoriesResult.length > 0) {\n          setCategories(categoriesResult.map(cat => cat.name));\n        } else {\n          setCategories(getDefaultCategories(language));\n        }\n      } catch (error) {\n        await reportError(error, 'DataLoadError', { component: 'EditTodoPageWrapper' });\n        console.error('加载数据失败:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    if (language) {\n      loadData();\n    }\n  }, [language]);\n  \n  const currentTodo = todos.find(todo => todo.id === todoId);\n  \n  const handleSave = (updatedTodo) => {\n    setTodos(todos.map(todo => \n      todo.id === updatedTodo.id ? updatedTodo : todo\n    ));\n    \n    history.push('/');\n  };\n  \n  const handleCancel = () => {\n    history.push('/');\n  };\n  \n  if (isLoading) {\n    return (\n      <IonPage>\n        <PageHeader title={t('app.title')} />\n        <IonContent>\n          <div className=\"initial-loading\">\n            <IonSpinner name=\"crescent\" />\n            <p>{t('app.loading')}</p>\n          </div>\n        </IonContent>\n      </IonPage>\n    );\n  }\n  \n  if (!currentTodo) {\n    return (\n      <IonPage>\n        <PageHeader title={t('app.title')} />\n        <IonContent>\n          <div className=\"empty-state\">\n            <IonIcon icon={alertCircleOutline} />\n            <h3>{t('tasks.taskNotFound')}</h3>\n            <p>{t('tasks.taskNotFoundDesc')}</p>\n            <IonButton expand=\"block\" onClick={handleCancel}>\n              {t('tasks.backToHome')}\n            </IonButton>\n          </div>\n        </IonContent>\n      </IonPage>\n    );\n  }\n  \n  return (\n    <EditTodoPage \n      todo={currentTodo}\n      onSave={handleSave}\n      onCancel={handleCancel}\n      categories={categories}\n      language={language}\n    />\n  );\n};\n\nconst App = () => {\n  const [language, setLanguage] = useState('en');\n  \n  useEffect(() => {\n    const initLanguage = async () => {\n      try {\n        const detectedLang = await detectSystemLanguage();\n        setLanguage(detectedLang);\n      } catch (error) {\n        const browserLang = (navigator.language || navigator.userLanguage || 'en').toLowerCase();\n        const detectedLang = browserLang.startsWith('zh') ? 'zh' : 'en';\n        setLanguage(detectedLang);\n      }\n    };\n    initLanguage();\n  }, []);\n  \n  const t = (key, params) => translate(language, key, params);\n  \n  const contextValue = {\n    language,\n    t,\n    setLanguage,\n  };\n  \n  return (\n    <LanguageContext.Provider value={contextValue}>\n      <IonApp>\n        <IonReactHashRouter>\n          <IonRouterOutlet>\n            <Switch>\n              <Route path=\"/edit/:id\" component={EditTodoPageWrapper} />\n              <Route path=\"/\" component={HomePage} exact />\n            </Switch>\n          </IonRouterOutlet>\n        </IonReactHashRouter>\n      </IonApp>\n    </LanguageContext.Provider>\n  );\n};\n\nexport default App;",
  "components/CategoryManager.jsx": "import React, { useState, useEffect } from 'react';\nimport {\n  IonContent,\n  IonButton,\n  IonItem,\n  IonLabel,\n  IonInput,\n  IonIcon,\n  IonList,\n  IonItemSliding,\n  IonItemOptions,\n  IonItemOption,\n  IonAlert,\n  IonSpinner,\n  IonToast,\n  IonFooter,\n  IonToolbar,\n  IonPage\n} from '@ionic/react';\nimport { \n  addOutline, \n  trashOutline, \n  pencilOutline,\n  saveOutline,\n  closeOutline\n} from 'ionicons/icons';\nimport AppSdk from '@morphixai/app-sdk';\nimport { reportError } from '@morphixai/lib';\nimport { PageHeader } from '@morphixai/components';\nimport { translate, getDefaultCategories } from '../utils/i18n';\n\nconst CATEGORY_COLLECTION = 'categories';\n\nconst CategoryManager = ({ \n  isOpen, \n  onClose, \n  onCategoriesChange,\n  currentCategories,\n  todos,\n  language = 'en'\n}) => {\n  const t = (key, params) => translate(language, key, params);\n  const DEFAULT_CATEGORIES = getDefaultCategories(language);\n  \n  const [categories, setCategories] = useState([]);\n  const [newCategory, setNewCategory] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [showDeleteAlert, setShowDeleteAlert] = useState(false);\n  const [categoryToDelete, setCategoryToDelete] = useState(null);\n  const [editCategory, setEditCategory] = useState({ id: null, name: '' });\n\n  useEffect(() => {\n    if (isOpen) {\n      loadCategories();\n    }\n  }, [isOpen]);\n\n  const loadCategories = async () => {\n    try {\n      setIsLoading(true);\n      const result = await AppSdk.appData.queryData({\n        collection: CATEGORY_COLLECTION,\n        query: []\n      });\n      if (result.length === 0) {\n        const defaultCategoryPromises = DEFAULT_CATEGORIES.map(name => \n          AppSdk.appData.createData({\n            collection: CATEGORY_COLLECTION,\n            data: { name, isDefault: true }\n          })\n        );\n        const createdCategories = await Promise.all(defaultCategoryPromises);\n        setCategories(createdCategories);\n      } else {\n        const sortedCategories = result.sort((a, b) => \n          new Date(a.createdAt || 0) - new Date(b.createdAt || 0)\n        );\n        setCategories(sortedCategories);\n      }\n    } catch (error) {\n      await reportError(error, 'LoadCategoriesError', { component: 'CategoryManager' });\n      console.error('加载分类失败:', error);\n      setToastMessage(t('messages.loadCategoriesFailed'));\n      setShowToast(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const addCategory = async () => {\n    if (newCategory.trim() === '') {\n      setToastMessage(t('messages.emptyCategoryName'));\n      setShowToast(true);\n      return;\n    }\n    if (categories.some(cat => cat.name === newCategory.trim())) {\n      setToastMessage(t('messages.categoryExists'));\n      setShowToast(true);\n      return;\n    }\n    try {\n      setIsLoading(true);\n      const createdCategory = await AppSdk.appData.createData({\n        collection: CATEGORY_COLLECTION,\n        data: {\n          name: newCategory.trim(),\n          isDefault: false,\n          createdAt: new Date().toISOString()\n        }\n      });\n      setCategories([...categories, createdCategory]);\n      setNewCategory('');\n      const updatedCategories = [...categories, createdCategory].map(cat => cat.name);\n      onCategoriesChange(updatedCategories);\n      setToastMessage(t('messages.categoryAdded'));\n      setShowToast(true);\n    } catch (error) {\n      await reportError(error, 'AddCategoryError', { component: 'CategoryManager' });\n      console.error('添加分类失败:', error);\n      setToastMessage(t('messages.addCategoryFailed'));\n      setShowToast(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const confirmDeleteCategory = (category) => {\n    setCategoryToDelete(category);\n    setShowDeleteAlert(true);\n  };\n\n  const deleteCategory = async () => {\n    if (!categoryToDelete) return;\n    try {\n      setIsLoading(true);\n      const tasksWithCategory = todos.filter(todo => todo.category === categoryToDelete.name);\n      if (tasksWithCategory.length > 0) {\n        setToastMessage(t('messages.categoryInUse', { count: tasksWithCategory.length }));\n        setShowToast(true);\n        return;\n      }\n      await AppSdk.appData.deleteData({\n        collection: CATEGORY_COLLECTION,\n        id: categoryToDelete.id\n      });\n      const updatedCategories = categories.filter(cat => cat.id !== categoryToDelete.id);\n      setCategories(updatedCategories);\n      onCategoriesChange(updatedCategories.map(cat => cat.name));\n      setToastMessage(t('messages.categoryDeleted'));\n      setShowToast(true);\n    } catch (error) {\n      await reportError(error, 'DeleteCategoryError', { component: 'CategoryManager' });\n      console.error('删除分类失败:', error);\n      setToastMessage(t('messages.deleteCategoryFailed'));\n      setShowToast(true);\n    } finally {\n      setIsLoading(false);\n      setCategoryToDelete(null);\n      setShowDeleteAlert(false);\n    }\n  };\n\n  const startEditCategory = (category) => {\n    setEditCategory({ id: category.id, name: category.name });\n  };\n\n  const saveEditCategory = async () => {\n    if (editCategory.name.trim() === '') {\n      setToastMessage(t('messages.emptyCategoryName'));\n      setShowToast(true);\n      return;\n    }\n    if (categories.some(cat => cat.name === editCategory.name.trim() && cat.id !== editCategory.id)) {\n      setToastMessage(t('messages.categoryExists'));\n      setShowToast(true);\n      return;\n    }\n    try {\n      setIsLoading(true);\n      const updatedCategory = await AppSdk.appData.updateData({\n        collection: CATEGORY_COLLECTION,\n        id: editCategory.id,\n        data: { name: editCategory.name.trim() }\n      });\n      const updatedCategories = categories.map(cat => \n        cat.id === editCategory.id ? updatedCategory : cat\n      );\n      setCategories(updatedCategories);\n      onCategoriesChange(updatedCategories.map(cat => cat.name));\n      setEditCategory({ id: null, name: '' });\n      setToastMessage(t('messages.categoryUpdated'));\n      setShowToast(true);\n    } catch (error) {\n      await reportError(error, 'UpdateCategoryError', { component: 'CategoryManager' });\n      console.error('更新分类失败:', error);\n      setToastMessage(t('messages.updateCategoryFailed'));\n      setShowToast(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const cancelEdit = () => {\n    setEditCategory({ id: null, name: '' });\n  };\n\n  const getCategoryUsageCount = (categoryName) => {\n    return todos.filter(todo => todo.category === categoryName).length;\n  };\n\n  const isDefaultCategory = (category) => {\n    return category.isDefault || DEFAULT_CATEGORIES.includes(category.name);\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <IonPage>\n      <PageHeader title={t('categoryManager.title')} />\n      \n      <IonContent>\n        {isLoading && categories.length === 0 ? (\n          <div className=\"initial-loading\">\n            <IonSpinner name=\"crescent\" />\n            <p>{t('app.loading')}</p>\n          </div>\n        ) : (\n          <>\n            <div className=\"category-add-form\">\n              <IonItem className=\"category-input-item\">\n                <IonInput\n                  value={newCategory}\n                  placeholder={t('categoryManager.newCategoryName')}\n                  onIonChange={e => setNewCategory(e.detail.value)}\n                />\n                <IonButton\n                  fill=\"clear\"\n                  onClick={addCategory}\n                  disabled={isLoading || newCategory.trim() === ''}\n                >\n                  <IonIcon slot=\"icon-only\" icon={addOutline} />\n                </IonButton>\n              </IonItem>\n            </div>\n            \n            <IonList className=\"category-list-container\">\n              {categories.map(category => (\n                <IonItemSliding key={category.id}>\n                  {editCategory.id === category.id ? (\n                    <IonItem>\n                      <IonInput\n                        value={editCategory.name}\n                        onIonChange={e => setEditCategory({ ...editCategory, name: e.detail.value })}\n                      />\n                      <IonButton fill=\"clear\" onClick={saveEditCategory}>\n                        <IonIcon slot=\"icon-only\" icon={saveOutline} color=\"success\" />\n                      </IonButton>\n                      <IonButton fill=\"clear\" onClick={cancelEdit}>\n                        <IonIcon slot=\"icon-only\" icon={closeOutline} color=\"medium\" />\n                      </IonButton>\n                    </IonItem>\n                  ) : (\n                    <IonItem>\n                      <IonLabel>{category.name}</IonLabel>\n                      <div className=\"category-usage-count\">\n                        {t('categories.usageCount')}: {getCategoryUsageCount(category.name)}\n                      </div>\n                      {!isDefaultCategory(category) && (\n                        <>\n                          <IonButton fill=\"clear\" onClick={() => startEditCategory(category)}>\n                            <IonIcon slot=\"icon-only\" icon={pencilOutline} color=\"primary\" />\n                          </IonButton>\n                          <IonButton fill=\"clear\" onClick={() => confirmDeleteCategory(category)}>\n                            <IonIcon slot=\"icon-only\" icon={trashOutline} color=\"danger\" />\n                          </IonButton>\n                        </>\n                      )}\n                      {isDefaultCategory(category) && (\n                        <div className=\"default-badge\">{t('categories.default')}</div>\n                      )}\n                    </IonItem>\n                  )}\n                  \n                  {!isDefaultCategory(category) && (\n                    <IonItemOptions side=\"end\">\n                      <IonItemOption color=\"primary\" onClick={() => startEditCategory(category)}>\n                        <IonIcon slot=\"icon-only\" icon={pencilOutline} />\n                      </IonItemOption>\n                      <IonItemOption color=\"danger\" onClick={() => confirmDeleteCategory(category)}>\n                        <IonIcon slot=\"icon-only\" icon={trashOutline} />\n                      </IonItemOption>\n                    </IonItemOptions>\n                  )}\n                </IonItemSliding>\n              ))}\n            </IonList>\n          </>\n        )}\n      </IonContent>\n      \n      <IonFooter className=\"category-footer-safe\">\n        <div className=\"footer-buttons-container\">\n          <IonButton expand=\"block\" onClick={onClose}>\n            {t('tasks.done')}\n          </IonButton>\n        </div>\n      </IonFooter>\n      \n      <IonAlert\n        isOpen={showDeleteAlert}\n        onDidDismiss={() => setShowDeleteAlert(false)}\n        header={t('confirmations.confirmDelete')}\n        message={categoryToDelete ? t('confirmations.deleteCategory', { name: categoryToDelete.name }) : t('confirmations.deleteCategoryGeneric')}\n        buttons={[\n          {\n            text: t('tasks.cancel'),\n            role: 'cancel',\n            handler: () => {\n              setCategoryToDelete(null);\n            }\n          },\n          {\n            text: t('tasks.delete'),\n            handler: () => {\n              deleteCategory();\n            }\n          }\n        ]}\n      />\n      \n      <IonToast\n        isOpen={showToast}\n        onDidDismiss={() => setShowToast(false)}\n        message={toastMessage}\n        duration={2000}\n        position=\"bottom\"\n      />\n    </IonPage>\n  );\n};\n\nexport default CategoryManager;",
  "components/CategorySelector.jsx": "import React, { useState, useRef, useEffect } from 'react';\nimport { IonIcon } from '@ionic/react';\nimport { \n  briefcaseOutline, \n  personOutline, \n  cartOutline, \n  bookOutline, \n  appsOutline,\n  ellipsisHorizontal,\n  chevronDownOutline,\n  settingsOutline\n} from 'ionicons/icons';\nimport { translate } from '../utils/i18n';\n\nconst CategorySelector = ({ \n  categories, \n  activeCategory, \n  onSelectCategory, \n  onManageCategories,\n  todos,\n  maxVisibleCategories = 4,\n  language = 'en'\n}) => {\n  const t = (key, params) => translate(language, key, params);\n  \n  const [showDropdown, setShowDropdown] = useState(false);\n  const [visibleCategories, setVisibleCategories] = useState([]);\n  const [hiddenCategories, setHiddenCategories] = useState([]);\n  const dropdownRef = useRef(null);\n  \n  const categoryIcons = {\n    [t('categories.all')]: appsOutline,\n    [t('categories.work')]: briefcaseOutline,\n    [t('categories.personal')]: personOutline,\n    [t('categories.shopping')]: cartOutline,\n    [t('categories.study')]: bookOutline,\n  };\n\n  const getCategoryCount = (category) => {\n    if (category === t('categories.all')) {\n      return todos.filter(todo => !todo.completed).length;\n    }\n    return todos.filter(todo => todo.category === category && !todo.completed).length;\n  };\n\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n        setShowDropdown(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (categories.length <= maxVisibleCategories) {\n      setVisibleCategories(categories);\n      setHiddenCategories([]);\n      return;\n    }\n\n    const categoryUsage = categories.map(category => ({\n      name: category,\n      count: getCategoryCount(category)\n    }));\n\n    categoryUsage.sort((a, b) => b.count - a.count);\n\n    let visibleCats = [];\n    let hiddenCats = [];\n\n    if (activeCategory !== t('categories.all') && categories.includes(activeCategory)) {\n      visibleCats.push(activeCategory);\n      \n      categoryUsage\n        .filter(cat => cat.name !== activeCategory)\n        .slice(0, maxVisibleCategories - 1)\n        .forEach(cat => visibleCats.push(cat.name));\n      \n      hiddenCats = categories.filter(cat => !visibleCats.includes(cat));\n    } else {\n      visibleCats = categoryUsage.slice(0, maxVisibleCategories).map(cat => cat.name);\n      hiddenCats = categories.filter(cat => !visibleCats.includes(cat));\n    }\n\n    setVisibleCategories(visibleCats);\n    setHiddenCategories(hiddenCats);\n  }, [categories, activeCategory, todos, maxVisibleCategories, language]);\n\n  const handleSelectCategory = (category) => {\n    onSelectCategory(category);\n    setShowDropdown(false);\n  };\n\n  return (\n    <div className=\"category-selector\">\n      <div className=\"category-tabs\">\n        <div \n          className={`category-tab ${activeCategory === t('categories.all') ? 'active' : ''}`}\n          onClick={() => onSelectCategory(t('categories.all'))}\n        >\n          <IonIcon icon={categoryIcons[t('categories.all')]} className=\"category-icon\" />\n          <span className=\"category-name\">{t('categories.all')}</span>\n          <span className=\"category-count\">{getCategoryCount(t('categories.all'))}</span>\n        </div>\n        \n        {visibleCategories.map(category => (\n          <div \n            key={category}\n            className={`category-tab ${activeCategory === category ? 'active' : ''}`}\n            onClick={() => onSelectCategory(category)}\n          >\n            <IonIcon icon={categoryIcons[category] || appsOutline} className=\"category-icon\" />\n            <span className=\"category-name\">{category}</span>\n            <span className=\"category-count\">{getCategoryCount(category)}</span>\n          </div>\n        ))}\n        \n        {hiddenCategories.length > 0 && (\n          <div className=\"more-categories-wrapper\" ref={dropdownRef}>\n            <div \n              className={`category-tab more-button ${showDropdown ? 'active' : ''}`}\n              onClick={() => setShowDropdown(!showDropdown)}\n            >\n              <IonIcon icon={ellipsisHorizontal} className=\"category-icon\" />\n              <span className=\"category-name\">{t('categories.more')}</span>\n              <IonIcon \n                icon={chevronDownOutline} \n                className={`dropdown-icon ${showDropdown ? 'open' : ''}`} \n              />\n            </div>\n            \n            {showDropdown && (\n              <div className=\"categories-dropdown\">\n                {hiddenCategories.map(category => (\n                  <div \n                    key={category}\n                    className={`dropdown-item ${activeCategory === category ? 'active' : ''}`}\n                    onClick={() => handleSelectCategory(category)}\n                  >\n                    <IonIcon icon={categoryIcons[category] || appsOutline} className=\"category-icon\" />\n                    <span className=\"category-name\">{category}</span>\n                    <span className=\"category-count\">{getCategoryCount(category)}</span>\n                  </div>\n                ))}\n                <div className=\"dropdown-divider\"></div>\n                <div className=\"dropdown-item manage-item\" onClick={onManageCategories}>\n                  <IonIcon icon={settingsOutline} className=\"category-icon\" />\n                  <span className=\"category-name\">{t('categories.manage')}</span>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n        \n        {hiddenCategories.length === 0 && (\n          <div \n            className=\"category-tab manage-button\"\n            onClick={onManageCategories}\n          >\n            <IonIcon icon={settingsOutline} className=\"category-icon\" />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default CategorySelector;",
  "components/CategorySidebar.jsx": "import React from 'react';\nimport { IonIcon } from '@ionic/react';\nimport { \n  briefcaseOutline, \n  personOutline, \n  cartOutline, \n  bookOutline, \n  appsOutline,\n  ellipseOutline\n} from 'ionicons/icons';\nimport { translate } from '../utils/i18n';\n\nconst CategorySidebar = ({ \n  categories, \n  activeCategory, \n  onSelectCategory, \n  todos,\n  language = 'en'\n}) => {\n  const t = (key, params) => translate(language, key, params);\n\n  const categoryIcons = {\n    [t('categories.all')]: appsOutline,\n    [t('categories.work')]: briefcaseOutline,\n    [t('categories.personal')]: personOutline,\n    [t('categories.shopping')]: cartOutline,\n    [t('categories.study')]: bookOutline,\n  };\n\n  const getCategoryCount = (category) => {\n    if (category === t('categories.all')) {\n      return todos.filter(todo => !todo.completed).length;\n    }\n    return todos.filter(todo => todo.category === category && !todo.completed).length;\n  };\n\n  const getColorForCategory = (name) => {\n    const hash = name.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    const colors = [\n      'var(--ion-color-primary)',\n      'var(--ion-color-secondary)',\n      'var(--ion-color-tertiary)',\n      'var(--ion-color-success)',\n      'var(--ion-color-warning)',\n      'var(--ion-color-danger)'\n    ];\n    return colors[hash % colors.length];\n  };\n\n  return (\n    <div className=\"app-sidebar\">\n      <div className=\"sidebar-header\">{t('tasks.category')}</div>\n      <div className=\"category-list\">\n        <div \n          className={`category-item ${activeCategory === t('categories.all') ? 'active' : ''}`}\n          onClick={() => onSelectCategory(t('categories.all'))}\n        >\n          <IonIcon icon={categoryIcons[t('categories.all')]} />\n          <span>{t('categories.all')}</span>\n          <span className=\"category-count\">{getCategoryCount(t('categories.all'))}</span>\n        </div>\n        \n        {categories.map(category => (\n          <div \n            key={category} \n            className={`category-item ${activeCategory === category ? 'active' : ''}`}\n            onClick={() => onSelectCategory(category)}\n          >\n            {categoryIcons[category] ? (\n              <IonIcon icon={categoryIcons[category]} />\n            ) : (\n              <IonIcon \n                icon={ellipseOutline} \n                style={{ color: getColorForCategory(category) }}\n              />\n            )}\n            <span>{category}</span>\n            <span className=\"category-count\">{getCategoryCount(category)}</span>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default CategorySidebar;",
  "components/EditTodoPage.jsx": "import React, { useState } from 'react';\nimport {\n  IonContent,\n  IonFooter,\n  IonToolbar,\n  IonButton,\n  IonInput,\n  IonLabel,\n  IonSelect,\n  IonSelectOption,\n  IonIcon,\n  IonSpinner,\n  IonPage,\n  IonToast,\n  IonModal\n} from '@ionic/react';\nimport { star, addOutline, closeOutline } from 'ionicons/icons';\nimport dayjs from 'dayjs';\nimport AppSdk from '@morphixai/app-sdk';\nimport { reportError } from '@morphixai/lib';\nimport { PageHeader } from '@morphixai/components';\nimport { translate } from '../utils/i18n';\n\nconst COLLECTION_NAME = 'todos';\nconst CATEGORY_COLLECTION = 'categories';\n\nconst EditTodoPage = ({ todo, onSave, onCancel, categories, language = 'en' }) => {\n  const t = (key, params) => translate(language, key, params);\n  \n  const [content, setContent] = useState(todo?.content || '');\n  const [reminder, setReminder] = useState(todo?.reminder || '');\n  const [category, setCategory] = useState(todo?.category || categories[0] || '');\n  const [priority, setPriority] = useState(todo?.priority || 1);\n  const [isLoading, setIsLoading] = useState(false);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [showAddCategoryModal, setShowAddCategoryModal] = useState(false);\n  const [newCategory, setNewCategory] = useState('');\n\n  const saveEdit = async () => {\n    if (content.trim() === '') {\n      setToastMessage(t('messages.emptyContent'));\n      setShowToast(true);\n      return;\n    }\n    \n    try {\n      setIsLoading(true);\n      \n      if (reminder) {\n        try {\n          const reminderTime = new Date(reminder).getTime();\n          await AppSdk.reminder.createReminder({\n            message: content,\n            start_time: reminderTime,\n            title: t('app.title')\n          });\n        } catch (error) {\n          await reportError(error, 'CreateReminderError', { component: 'EditTodoPage' });\n          console.error('创建提醒失败:', error);\n        }\n      }\n      \n      const updatedTodo = await AppSdk.appData.updateData({\n        collection: COLLECTION_NAME,\n        id: todo.id,\n        data: {\n          content: content,\n          reminder: reminder || null,\n          category: category,\n          priority: priority\n        }\n      });\n      \n      setToastMessage(t('messages.taskUpdated'));\n      setShowToast(true);\n      \n      setTimeout(() => {\n        onSave(updatedTodo);\n      }, 500);\n    } catch (error) {\n      await reportError(error, 'UpdateTodoError', { component: 'EditTodoPage' });\n      console.error('更新任务失败:', error);\n      setToastMessage(t('messages.updateTaskFailed'));\n      setShowToast(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const addNewCategory = async () => {\n    if (newCategory.trim() === '') {\n      setToastMessage(t('messages.emptyCategoryName'));\n      setShowToast(true);\n      return;\n    }\n    \n    if (categories.includes(newCategory.trim())) {\n      setToastMessage(t('messages.categoryExists'));\n      setShowToast(true);\n      return;\n    }\n    \n    try {\n      setIsLoading(true);\n      \n      await AppSdk.appData.createData({\n        collection: CATEGORY_COLLECTION,\n        data: {\n          name: newCategory.trim(),\n          isDefault: false,\n          createdAt: new Date().toISOString()\n        }\n      });\n      \n      setCategory(newCategory.trim());\n      \n      setShowAddCategoryModal(false);\n      setNewCategory('');\n      \n      setToastMessage(t('messages.categoryAdded'));\n      setShowToast(true);\n    } catch (error) {\n      await reportError(error, 'AddCategoryError', { component: 'EditTodoPage' });\n      console.error('添加分类失败:', error);\n      setToastMessage(t('messages.addCategoryFailed'));\n      setShowToast(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <IonPage>\n      <PageHeader title={t('tasks.editTask')} />\n      \n      <IonContent className=\"edit-page-content\">\n        <div style={{ padding: '16px' }}>\n          <div className=\"form-field\">\n            <IonLabel>{t('tasks.taskContent')}</IonLabel>\n            <IonInput\n              value={content}\n              placeholder={t('tasks.taskContentPlaceholder')}\n              onIonChange={e => setContent(e.detail.value)}\n              className=\"custom-input\"\n            />\n          </div>\n          \n          <div className=\"form-field\">\n            <IonLabel>{t('tasks.category')}</IonLabel>\n            <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n              <IonSelect\n                value={category}\n                placeholder={t('tasks.selectCategory')}\n                onIonChange={e => setCategory(e.detail.value)}\n                style={{ flex: 1 }}\n              >\n                {categories.map(cat => (\n                  <IonSelectOption key={cat} value={cat}>\n                    {cat}\n                  </IonSelectOption>\n                ))}\n              </IonSelect>\n              <IonButton\n                size=\"small\"\n                fill=\"clear\"\n                onClick={() => setShowAddCategoryModal(true)}\n              >\n                <IonIcon icon={addOutline} />\n              </IonButton>\n            </div>\n          </div>\n          \n          <div className=\"form-field\">\n            <IonLabel>{t('tasks.priority')}</IonLabel>\n            <div className=\"priority-toggle\">\n              <IonButton \n                expand=\"block\"\n                fill={priority === 1 ? \"solid\" : \"outline\"}\n                onClick={() => setPriority(1)}\n              >\n                {t('tasks.normal')}\n              </IonButton>\n              <IonButton \n                expand=\"block\"\n                fill={priority === 3 ? \"solid\" : \"outline\"}\n                color=\"warning\"\n                onClick={() => setPriority(3)}\n              >\n                {t('tasks.important')}\n                <IonIcon slot=\"end\" icon={star} />\n              </IonButton>\n            </div>\n          </div>\n          \n          <div className=\"form-field\">\n            <IonLabel>{t('tasks.reminderTime')}</IonLabel>\n            <input\n              type=\"datetime-local\"\n              className=\"custom-datetime\"\n              value={reminder ? dayjs(reminder).format('YYYY-MM-DDTHH:mm') : ''}\n              onChange={e => setReminder(e.target.value)}\n            />\n          </div>\n        </div>\n      </IonContent>\n      \n      <IonFooter className=\"edit-footer-safe\">\n        <div className=\"footer-buttons-container\">\n          <div className=\"edit-footer-buttons\">\n            <IonButton expand=\"block\" fill=\"outline\" onClick={onCancel}>\n              {t('tasks.cancel')}\n            </IonButton>\n            <IonButton expand=\"block\" onClick={saveEdit} disabled={isLoading}>\n              {isLoading ? (\n                <>\n                  <IonSpinner name=\"crescent\" style={{ marginRight: '8px' }} />\n                  {t('app.processing')}\n                </>\n              ) : t('tasks.save')}\n            </IonButton>\n          </div>\n        </div>\n      </IonFooter>\n      \n      <IonModal isOpen={showAddCategoryModal} onDidDismiss={() => setShowAddCategoryModal(false)}>\n        <IonPage>\n          <PageHeader title={t('categoryManager.addCategory')} />\n          <IonContent>\n            <div style={{ padding: '16px' }}>\n              <div className=\"form-field\">\n                <IonLabel>{t('categoryManager.categoryName')}</IonLabel>\n                <IonInput\n                  value={newCategory}\n                  placeholder={t('categoryManager.categoryNamePlaceholder')}\n                  onIonChange={e => setNewCategory(e.detail.value)}\n                  className=\"custom-input\"\n                />\n              </div>\n            </div>\n          </IonContent>\n          <IonFooter className=\"modal-footer-safe\">\n            <div className=\"footer-buttons-container\">\n              <IonButton \n                expand=\"block\" \n                onClick={addNewCategory} \n                disabled={isLoading || newCategory.trim() === ''}\n              >\n                {isLoading ? (\n                  <>\n                    <IonSpinner name=\"crescent\" style={{ marginRight: '8px' }} />\n                    {t('categoryManager.addingCategory')}\n                  </>\n                ) : t('categoryManager.addCategory')}\n              </IonButton>\n            </div>\n          </IonFooter>\n        </IonPage>\n      </IonModal>\n      \n      <IonToast\n        isOpen={showToast}\n        onDidDismiss={() => setShowToast(false)}\n        message={toastMessage}\n        duration={2000}\n        position=\"bottom\"\n      />\n    </IonPage>\n  );\n};\n\nexport default EditTodoPage;",
  "components/MobileSidebar.jsx": "// 此文件已不再使用，保留为空文件",
  "components/ReorderableTodoList.jsx": "import React, { useState, useRef } from 'react';\nimport {\n  IonList,\n  IonItem,\n  IonLabel,\n  IonCheckbox,\n  IonButton,\n  IonIcon,\n  IonReorderGroup,\n  IonReorder,\n  IonChip,\n  IonToast,\n  IonAlert,\n  IonBadge\n} from '@ionic/react';\nimport {\n  star,\n  starOutline,\n  timeOutline,\n  trashOutline,\n  createOutline,\n  menuOutline,\n  reorderThreeOutline\n} from 'ionicons/icons';\nimport dayjs from 'dayjs';\nimport AppSdk from '@morphixai/app-sdk';\nimport { reportError } from '@morphixai/lib';\nimport { translate } from '../utils/i18n';\n\nconst COLLECTION_NAME = 'todos';\n\nconst ReorderableTodoList = ({ \n  todos, \n  onTodosChange, \n  onEditTodo, \n  formatReminder,\n  language = 'en'\n}) => {\n  const t = (key, params) => translate(language, key, params);\n  \n  const [isLoading, setIsLoading] = useState(false);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [showDeleteAlert, setShowDeleteAlert] = useState(false);\n  const [todoToDelete, setTodoToDelete] = useState(null);\n  const [draggedItem, setDraggedItem] = useState(null);\n  const [dragOverItem, setDragOverItem] = useState(null);\n  const todoListRef = useRef(null);\n\n  const toggleComplete = async (id, event) => {\n    if (event) {\n      event.stopPropagation();\n    }\n    \n    try {\n      const todo = todos.find(todo => todo.id === id);\n      if (!todo) return;\n      \n      setIsLoading(true);\n      const updatedTodo = await AppSdk.appData.updateData({\n        collection: COLLECTION_NAME,\n        id: id,\n        data: { completed: !todo.completed }\n      });\n      \n      const updatedTodos = todos.map(todo => \n        todo.id === id ? updatedTodo : todo\n      );\n      \n      onTodosChange(updatedTodos);\n    } catch (error) {\n      await reportError(error, 'UpdateTodoError', { component: 'ReorderableTodoList' });\n      console.error('更新任务状态失败:', error);\n      setToastMessage(t('messages.updateStatusFailed'));\n      setShowToast(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const togglePriority = async (id, event) => {\n    if (event) {\n      event.stopPropagation();\n    }\n    \n    try {\n      const todo = todos.find(todo => todo.id === id);\n      if (!todo) return;\n      \n      const newPriority = todo.priority === 3 ? 1 : 3;\n      \n      setIsLoading(true);\n      const updatedTodo = await AppSdk.appData.updateData({\n        collection: COLLECTION_NAME,\n        id: id,\n        data: { priority: newPriority }\n      });\n      \n      const updatedTodos = todos.map(todo => \n        todo.id === id ? updatedTodo : todo\n      );\n      \n      onTodosChange(updatedTodos);\n    } catch (error) {\n      await reportError(error, 'UpdatePriorityError', { component: 'ReorderableTodoList' });\n      console.error('更新任务优先级失败:', error);\n      setToastMessage(t('messages.updatePriorityFailed'));\n      setShowToast(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const confirmDelete = (id, event) => {\n    if (event) {\n      event.stopPropagation();\n    }\n    \n    const todo = todos.find(todo => todo.id === id);\n    if (!todo) return;\n    \n    setTodoToDelete(todo);\n    setShowDeleteAlert(true);\n  };\n\n  const deleteTodo = async () => {\n    if (!todoToDelete) return;\n    \n    try {\n      setIsLoading(true);\n      await AppSdk.appData.deleteData({\n        collection: COLLECTION_NAME,\n        id: todoToDelete.id\n      });\n      \n      const updatedTodos = todos.filter(todo => todo.id !== todoToDelete.id);\n      onTodosChange(updatedTodos);\n      \n      setToastMessage(t('messages.taskDeleted'));\n      setShowToast(true);\n    } catch (error) {\n      await reportError(error, 'DeleteTodoError', { component: 'ReorderableTodoList' });\n      console.error('删除任务失败:', error);\n      setToastMessage(t('messages.deleteTaskFailed'));\n      setShowToast(true);\n    } finally {\n      setIsLoading(false);\n      setTodoToDelete(null);\n    }\n  };\n\n  const handleReorder = async (event) => {\n    const { from, to } = event.detail;\n    \n    const newTodos = [...todos];\n    \n    const movedItem = newTodos.splice(from, 1)[0];\n    newTodos.splice(to, 0, movedItem);\n    \n    const updatedTodos = newTodos.map((todo, index) => ({\n      ...todo,\n      order: index\n    }));\n    \n    onTodosChange(updatedTodos);\n    \n    event.detail.complete();\n    \n    try {\n      await Promise.all(\n        updatedTodos.map(todo =>\n          AppSdk.appData.updateData({\n            collection: COLLECTION_NAME,\n            id: todo.id,\n            data: { order: todo.order }\n          })\n        )\n      );\n      \n      setToastMessage(t('messages.orderUpdated'));\n      setShowToast(true);\n    } catch (error) {\n      await reportError(error, 'ReorderError', { component: 'ReorderableTodoList' });\n      console.error('更新任务顺序失败:', error);\n      setToastMessage(t('messages.reorderFailed'));\n      setShowToast(true);\n    }\n  };\n\n  const handleItemClick = (todo, event) => {\n    if (event.target === event.currentTarget || \n        event.target.tagName === 'H2' || \n        event.target.classList.contains('todo-content')) {\n      onEditTodo(todo);\n    }\n  };\n\n  const handleDragStart = (e, todo, index) => {\n    setDraggedItem({ todo, index });\n    e.currentTarget.classList.add('dragging');\n  };\n\n  const handleDragOver = (e, todo, index) => {\n    e.preventDefault();\n    setDragOverItem({ todo, index });\n    \n    const items = todoListRef.current.querySelectorAll('.todo-item');\n    items.forEach(item => item.classList.remove('drag-over'));\n    \n    e.currentTarget.classList.add('drag-over');\n  };\n\n  const handleDragEnd = async (e) => {\n    e.preventDefault();\n    e.currentTarget.classList.remove('dragging');\n    \n    const items = todoListRef.current.querySelectorAll('.todo-item');\n    items.forEach(item => item.classList.remove('drag-over'));\n    \n    if (!draggedItem || !dragOverItem || draggedItem.index === dragOverItem.index) {\n      return;\n    }\n    \n    try {\n      const newTodos = [...todos];\n      \n      const movedItem = newTodos.splice(draggedItem.index, 1)[0];\n      newTodos.splice(dragOverItem.index, 0, movedItem);\n      \n      const updatedTodos = newTodos.map((todo, index) => ({\n        ...todo,\n        order: index\n      }));\n      \n      onTodosChange(updatedTodos);\n      \n      await Promise.all(\n        updatedTodos.map(todo =>\n          AppSdk.appData.updateData({\n            collection: COLLECTION_NAME,\n            id: todo.id,\n            data: { order: todo.order }\n          })\n        )\n      );\n      \n      setToastMessage(t('messages.orderUpdated'));\n      setShowToast(true);\n    } catch (error) {\n      await reportError(error, 'DragReorderError', { component: 'ReorderableTodoList' });\n      console.error('拖动排序失败:', error);\n      setToastMessage(t('messages.reorderFailed'));\n      setShowToast(true);\n    } finally {\n      setDraggedItem(null);\n      setDragOverItem(null);\n    }\n  };\n\n  const handleTouchStart = (e, todo, index) => {\n    setDraggedItem({ todo, index, startY: e.touches[0].clientY });\n  };\n\n  const handleTouchMove = (e, todo, index) => {\n    if (!draggedItem) return;\n    \n    const currentY = e.touches[0].clientY;\n    const deltaY = currentY - draggedItem.startY;\n    \n    if (Math.abs(deltaY) > 30) {\n      let targetIndex = index;\n      if (deltaY < 0 && index > 0) {\n        targetIndex = index - 1;\n      } else if (deltaY > 0 && index < todos.length - 1) {\n        targetIndex = index + 1;\n      }\n      \n      if (targetIndex !== index) {\n        setDragOverItem({ todo: todos[targetIndex], index: targetIndex });\n        const items = todoListRef.current.querySelectorAll('.todo-item');\n        items.forEach(item => item.classList.remove('drag-over'));\n        items[targetIndex].classList.add('drag-over');\n      }\n    }\n  };\n\n  const handleTouchEnd = async (e) => {\n    if (!draggedItem || !dragOverItem || draggedItem.index === dragOverItem.index) {\n      setDraggedItem(null);\n      setDragOverItem(null);\n      return;\n    }\n    \n    try {\n      const newTodos = [...todos];\n      \n      const movedItem = newTodos.splice(draggedItem.index, 1)[0];\n      newTodos.splice(dragOverItem.index, 0, movedItem);\n      \n      const updatedTodos = newTodos.map((todo, index) => ({\n        ...todo,\n        order: index\n      }));\n      \n      onTodosChange(updatedTodos);\n      \n      const items = todoListRef.current.querySelectorAll('.todo-item');\n      items.forEach(item => item.classList.remove('drag-over'));\n      \n      await Promise.all(\n        updatedTodos.map(todo =>\n          AppSdk.appData.updateData({\n            collection: COLLECTION_NAME,\n            id: todo.id,\n            data: { order: todo.order }\n          })\n        )\n      );\n      \n      setToastMessage(t('messages.orderUpdated'));\n      setShowToast(true);\n    } catch (error) {\n      await reportError(error, 'TouchReorderError', { component: 'ReorderableTodoList' });\n      console.error('触摸排序失败:', error);\n      setToastMessage(t('messages.reorderFailed'));\n      setShowToast(true);\n    } finally {\n      setDraggedItem(null);\n      setDragOverItem(null);\n    }\n  };\n\n  const getCategoryColor = (category) => {\n    const categoryColors = {\n      [t('categories.work')]: 'primary',\n      [t('categories.personal')]: 'success',\n      [t('categories.shopping')]: 'warning',\n      [t('categories.study')]: 'tertiary',\n    };\n    \n    return categoryColors[category] || 'medium';\n  };\n\n  const renderTodoItem = (todo, index) => {\n    return (\n      <IonItem \n        key={todo.id} \n        className={`todo-item ${todo.completed ? 'completed' : ''} draggable-item`}\n        onClick={(e) => handleItemClick(todo, e)}\n        draggable=\"true\"\n        onDragStart={(e) => handleDragStart(e, todo, index)}\n        onDragOver={(e) => handleDragOver(e, todo, index)}\n        onDragEnd={handleDragEnd}\n        onTouchStart={(e) => handleTouchStart(e, todo, index)}\n        onTouchMove={(e) => handleTouchMove(e, todo, index)}\n        onTouchEnd={handleTouchEnd}\n        lines=\"none\"\n      >\n        <IonCheckbox\n          slot=\"start\"\n          checked={todo.completed}\n          onIonChange={(e) => toggleComplete(todo.id, e)}\n          onClick={(e) => e.stopPropagation()}\n        />\n        <IonLabel className=\"todo-content\">\n          <div className=\"todo-title-row\">\n            <span className=\"todo-title\">{todo.content}</span>\n            {todo.priority === 3 && (\n              <IonIcon icon={star} color=\"warning\" className=\"priority-star\" />\n            )}\n          </div>\n          <div className=\"todo-details-row\">\n            <IonBadge \n              color={getCategoryColor(todo.category)} \n              className=\"category-badge\"\n              onClick={(e) => e.stopPropagation()}\n            >\n              {todo.category}\n            </IonBadge>\n            {todo.reminder && (\n              <span className=\"todo-reminder\" onClick={(e) => e.stopPropagation()}>\n                <IonIcon icon={timeOutline} />\n                {formatReminder(todo.reminder)}\n              </span>\n            )}\n          </div>\n        </IonLabel>\n        <div className=\"todo-actions\" onClick={(e) => e.stopPropagation()}>\n          {!todo.completed && (\n            <IonButton fill=\"clear\" onClick={(e) => togglePriority(todo.id, e)}>\n              <IonIcon \n                slot=\"icon-only\" \n                icon={todo.priority === 3 ? star : starOutline} \n                color={todo.priority === 3 ? \"warning\" : \"medium\"} \n              />\n            </IonButton>\n          )}\n          <IonButton fill=\"clear\" color=\"danger\" onClick={(e) => confirmDelete(todo.id, e)}>\n            <IonIcon slot=\"icon-only\" icon={trashOutline} />\n          </IonButton>\n        </div>\n        <IonReorder slot=\"end\" onClick={(e) => e.stopPropagation()} className=\"reorder-handle\">\n          <IonIcon icon={reorderThreeOutline} />\n        </IonReorder>\n      </IonItem>\n    );\n  };\n\n  return (\n    <>\n      <div className=\"reorder-hint\">\n        <IonIcon icon={reorderThreeOutline} />\n        {t('tasks.reorderHint')}\n      </div>\n      <IonList ref={todoListRef} className=\"todo-list\">\n        <IonReorderGroup \n          disabled={false} \n          onIonItemReorder={handleReorder}\n        >\n          {todos.map((todo, index) => renderTodoItem(todo, index))}\n        </IonReorderGroup>\n      </IonList>\n      \n      <IonAlert\n        isOpen={showDeleteAlert}\n        onDidDismiss={() => setShowDeleteAlert(false)}\n        header={t('confirmations.confirmDelete')}\n        message={todoToDelete ? t('confirmations.deleteTask', { content: todoToDelete.content }) : t('confirmations.deleteTaskGeneric')}\n        buttons={[\n          {\n            text: t('tasks.cancel'),\n            role: 'cancel',\n            handler: () => {\n              setTodoToDelete(null);\n            }\n          },\n          {\n            text: t('tasks.delete'),\n            handler: () => {\n              deleteTodo();\n            }\n          }\n        ]}\n      />\n      \n      <IonToast\n        isOpen={showToast}\n        onDidDismiss={() => setShowToast(false)}\n        message={toastMessage}\n        duration={2000}\n        position=\"bottom\"\n      />\n    </>\n  );\n};\n\nexport default ReorderableTodoList;",
  "components/Welcome.jsx": "import React from 'react';\nimport { IonIcon } from '@ionic/react';\nimport { downloadOutline, globeOutline} from 'ionicons/icons';\nimport styles from '../styles/Welcome.module.css';\n\n/**\n * 欢迎组件 - 仅用于演示\n * \n * 这个组件用于展示 Morphix AI Code 的功能和界面设计\n * 在实际开发中，请删除此组件并创建您自己的应用界面\n * \n * @component\n * @returns {JSX.Element} 欢迎页面组件\n */\nexport default function Welcome() {\n    const openDownload = () => {\n        window.open('https://baibian.app/mobile-download', '_blank');\n    };\n\n    const openWebsite = () => {\n        window.open('https://baibian.app/', '_blank');\n    };\n\n    return (\n        <div className={styles.welcomeContainer}>\n\n            {/* 头部 */}\n            <div className={styles.header}>\n                <div className={styles.logo}>\n                    <img\n                        src=\"https://app-shell.focusbe.com/Icon-60@3x.png\"\n                        alt=\"Morphix AI Logo\"\n                        className={styles.logoImage}\n                        onError={(e) => {\n                            e.target.style.display = 'none';\n                        }}\n                    />\n                    <div className={styles.logoGlow}></div>\n                </div>\n\n                <h1 className={styles.title}>\n                    <span className={styles.titleGradient}>Morphix AI</span>\n                    <span className={styles.titleSubtext}>Code</span>\n                </h1>\n                <p className={styles.subtitle}>Create your own app with AI</p>\n            </div>\n\n            {/* 三个步骤 */}\n            <div className={styles.steps}>\n                <div className={styles.step}>\n                    <div className={styles.stepNumber}>1</div>\n                    <div className={styles.stepContent}>\n                        <h3>Describe</h3>\n                        <p>Your app idea</p>\n                    </div>\n                </div>\n\n                <div className={styles.step}>\n                    <div className={styles.stepNumber}>2</div>\n                    <div className={styles.stepContent}>\n                        <h3>Generate</h3>\n                        <p>AI builds a preview</p>\n                    </div>\n                </div>\n\n                <div className={styles.step}>\n                    <div className={styles.stepNumber}>3</div>\n                    <div className={styles.stepContent}>\n                        <h3>Launch</h3>\n                        <p>Use in Morphix</p>\n                    </div>\n                </div>\n            </div>\n\n            {/* 行动按钮 */}\n            <div className={styles.ctaSection}>\n                <button \n                    className={styles.primaryBtn}\n                    onClick={openDownload}\n                >\n                    <IonIcon icon={downloadOutline} />\n                    Download Morphix AI\n                </button>\n                \n                <button \n                    className={styles.secondaryBtn}\n                    onClick={openWebsite}\n                >\n                    <IonIcon icon={globeOutline} />\n                    Visit Website\n                </button>\n            </div>\n\n            {/* 底部 */}\n            <div className={styles.footer}>\n                <p>2024 Morphix AI. Empowering everyone to create apps.</p>\n            </div>\n        </div>\n    );\n}\n",
  "styles/App.module.css": "/* 主应用样式 */\n\n.content {\n  --padding: 0;\n  background: #ffffff;\n  min-height: 100vh;\n  color: #1f2937;\n}",
  "styles/Welcome.module.css": "/* Welcome 组件样式 - 简约风格 */\n\n.welcomeContainer {\n  background: #ffffff;\n  min-height: 100vh;\n  color: #333333;\n  position: relative;\n  padding: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n}\n\n/* 头部 */\n.header {\n  text-align: center;\n  padding: 56px 16px 16px;\n}\n\n.logo {\n  display: inline-block;\n  margin-bottom: 12px;\n}\n\n.logoImage {\n  width: 64px;\n  height: 64px;\n  border-radius: 12px;\n  transition: opacity 0.2s ease;\n  box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.1);\n}\n\n.logoImage:hover {\n  opacity: 0.8;\n}\n\n.title {\n  font-size: 2.1rem;\n  font-weight: 600;\n  margin: 0 0 6px 0;\n  line-height: 1.2;\n  letter-spacing: -0.02em;\n}\n\n.titleGradient {\n  color: #1a1a1a;\n}\n\n.titleSubtext {\n  color: #666666;\n  font-weight: 400;\n  margin-left: 6px;\n}\n\n.subtitle {\n  font-size: 1rem;\n  color: #666666;\n  margin: 0;\n  font-weight: 400;\n}\n\n/* 步骤 */\n.steps {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: 8px 16px 16px;\n  max-width: 560px;\n  margin: 0 auto;\n}\n\n.step {\n  padding: 12px 12px;\n  background: #fff;\n  border-radius: 12px;\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  position: relative;\n  text-align: center;\n  transition: background-color 0.2s ease;\n}\n\n.stepContent {\n  margin-top: 0;\n}\n\n.stepContent h3 {\n  font-size: 1.1rem;\n  font-weight: 500;\n  color: #1a1a1a;\n  margin: 0 0 4px 0;\n}\n\n.stepContent p {\n  color: #666666;\n  margin: 0;\n  font-size: 0.95rem;\n  line-height: 1.4;\n}\n\n.stepNumber {\n  position: absolute;\n  top: 8px;\n  left: 8px;\n  background: #e5e5e5;\n  color: #666666;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 500;\n  font-size: 0.75rem;\n}\n\n/* 行动按钮 */\n.ctaSection {\n  text-align: center;\n  padding: 16px 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  align-items: center;\n}\n\n.primaryBtn {\n  background: #1a1a1a;\n  color: #ffffff;\n  border: none;\n  border-radius: 6px;\n  padding: 10px 18px;\n  font-weight: 500;\n  font-size: 0.95rem;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  justify-content: center;\n  transition: background-color 0.2s ease;\n  width: 180px;\n  max-width: 90%;\n}\n\n.primaryBtn:hover {\n  background: #333333;\n}\n\n.primaryBtn:active {\n  background: #000000;\n}\n\n.secondaryBtn {\n  background: transparent;\n  color: #666666;\n  border: 1px solid #d5d5d5;\n  border-radius: 6px;\n  padding: 10px 18px;\n  font-weight: 500;\n  font-size: 0.95rem;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  justify-content: center;\n  transition: all 0.2s ease;\n  width: 180px;\n  max-width: 90%;\n}\n\n.secondaryBtn:hover {\n  background: #fafafa;\n  border-color: #999999;\n}\n\n/* 底部 */\n.footer {\n  text-align: center;\n  padding: 8px 16px 16px;\n  color: #999999;\n  font-size: 0.85rem;\n}\n\n.footer p {\n  margin: 0;\n}\n\n/* 响应式设计 */\n@media (max-width: 768px) {\n  .header {\n    padding: 40px 12px 16px;\n  }\n  \n  .title {\n    font-size: 2rem;\n  }\n  \n  .subtitle {\n    font-size: 1rem;\n  }\n  \n  .steps {\n    padding: 8px 12px 16px;\n  }\n  \n  .step {\n    padding: 12px 12px;\n  }\n  \n  .ctaSection {\n    padding: 16px 12px;\n  }\n}\n\n@media (max-width: 480px) {\n  .header {\n    padding: 32px 12px 14px;\n  }\n  \n  .logoImage {\n    width: 52px;\n    height: 52px;\n  }\n  \n  .title {\n    font-size: 1.7rem;\n  }\n  \n  .primaryBtn, .secondaryBtn {\n    width: 100%;\n    max-width: 280px;\n  }\n}\n\n/* 桌面端更紧凑的步骤布局 */\n@media (min-width: 768px) {\n  .steps {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 10px;\n    max-width: 840px;\n  }\n  .step {\n    text-align: left;\n    padding: 12px;\n  }\n  .stepNumber {\n    top: 10px;\n    left: 10px;\n  }\n}\n\n/* 简化动画 */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(12px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* 基础进场动画 */\n.logo,\n.title,\n.subtitle,\n.step,\n.ctaSection {\n  opacity: 0;\n  animation: fadeIn 0.5s ease-out forwards;\n}\n\n.logo {\n  animation-delay: 0s;\n}\n\n.title {\n  animation-delay: 0.1s;\n}\n\n.subtitle {\n  animation-delay: 0.2s;\n}\n\n.step:nth-child(1) { \n  animation-delay: 0.3s;\n}\n\n.step:nth-child(2) { \n  animation-delay: 0.4s;\n}\n\n.step:nth-child(3) { \n  animation-delay: 0.5s;\n}\n\n.ctaSection {\n  animation-delay: 0.6s;\n}\n",
  "styles/global.css": "/* 全局样式 - Ionic原生风格 */\n\n/* 基础样式 */\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  overflow: hidden;\n}\n\n/* 安全区域支持 */\n:root {\n  --safe-area-top: env(safe-area-inset-top, 0px);\n  --safe-area-bottom: env(safe-area-inset-bottom, 0px);\n  --safe-area-left: env(safe-area-inset-left, 0px);\n  --safe-area-right: env(safe-area-inset-right, 0px);\n}\n\n/* PageHeader 容器安全区域 */\n.page-header-container {\n  padding-top: env(safe-area-inset-top);\n}\n\n/* FAB 按钮安全区域 */\n.add-task-fab {\n  margin-bottom: calc(16px + var(--safe-area-bottom));\n}\n\n/* 底部按钮安全区域 */\n.edit-footer-safe,\n.modal-footer-safe,\n.category-footer-safe {\n  padding-bottom: env(safe-area-inset-bottom);\n}\n\n.edit-footer-safe .footer-buttons-container,\n.modal-footer-safe .footer-buttons-container,\n.category-footer-safe .footer-buttons-container {\n  padding: 8px 16px;\n  padding-bottom: calc(8px + env(safe-area-inset-bottom));\n}\n\n\n\n/* 空状态 */\n.empty-state {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  height: 70vh;\n  padding: 0 16px;\n}\n\n.empty-state ion-icon {\n  font-size: 64px;\n  margin-bottom: 16px;\n  opacity: 0.5;\n}\n\n.empty-state h3 {\n  margin: 0 0 8px;\n  font-size: 20px;\n  font-weight: 500;\n}\n\n.empty-state p {\n  margin: 0 0 24px;\n  font-size: 16px;\n  opacity: 0.7;\n}\n\n/* 初始加载状态 */\n.initial-loading {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 70vh;\n  opacity: 0.7;\n}\n\n.initial-loading ion-spinner {\n  width: 48px;\n  height: 48px;\n  margin-bottom: 16px;\n}\n\n.initial-loading p {\n  font-size: 16px;\n  margin: 0;\n  color: var(--ion-color-medium);\n}\n\n/* 任务项自定义样式 */\n.todo-item {\n  --padding-start: 16px;\n  --padding-end: 8px;\n  --inner-padding-end: 0;\n  transition: background-color 0.2s ease;\n  touch-action: pan-y;\n  cursor: pointer;\n  margin-bottom: 8px;\n  border-radius: 8px;\n  --background: rgba(var(--ion-color-light-rgb), 0.5);\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.08);\n  --min-height: 72px;\n}\n\n.todo-item.completed .todo-content {\n  text-decoration: line-through;\n  opacity: 0.7;\n}\n\n.todo-content {\n  flex: 1;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding: 10px 0;\n}\n\n.todo-title-row {\n  display: flex;\n  align-items: center;\n  margin-bottom: 4px;\n}\n\n.todo-title {\n  font-weight: 500;\n  font-size: 16px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  flex: 1;\n}\n\n.priority-star {\n  margin-left: 6px;\n  font-size: 18px;\n}\n\n.todo-details-row {\n  display: flex;\n  align-items: center;\n  font-size: 12px;\n}\n\n.category-badge {\n  font-size: 11px;\n  font-weight: normal;\n  padding: 3px 8px;\n  border-radius: 10px;\n  margin-right: 8px;\n  text-transform: none;\n}\n\n.todo-reminder {\n  font-size: 12px;\n  display: flex;\n  align-items: center;\n  color: var(--ion-color-medium);\n}\n\n.todo-reminder ion-icon {\n  margin-right: 4px;\n  font-size: 14px;\n}\n\n.todo-actions {\n  display: flex;\n}\n\n.todo-actions ion-button {\n  --padding-start: 8px;\n  --padding-end: 8px;\n  margin: 0;\n  height: 36px;\n}\n\n/* 已完成标题 */\n.completed-header {\n  padding: 8px 16px;\n  font-size: 14px;\n  font-weight: 500;\n  color: var(--ion-color-medium);\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  background: var(--ion-color-light-shade);\n  margin-top: 16px;\n}\n\n.completed-header ion-icon {\n  margin-right: 8px;\n  transition: transform 0.3s ease;\n}\n\n.completed-header ion-icon.expanded {\n  transform: rotate(90deg);\n}\n\n/* 模态框表单 */\n.form-field {\n  margin-bottom: 16px;\n}\n\n.form-field ion-label {\n  margin-bottom: 8px;\n  font-size: 14px;\n  font-weight: 500;\n}\n\n/* 优先级切换按钮组 */\n.priority-toggle {\n  display: flex;\n  gap: 8px;\n}\n\n/* 日期选择器 */\n.custom-datetime {\n  border: 1px solid var(--ion-border-color);\n  border-radius: 4px;\n  padding: 8px;\n  width: 100%;\n  font-size: 16px;\n  background: var(--ion-background-color);\n  color: var(--ion-text-color);\n}\n\n/* 任务项动画 */\n.task-enter {\n  opacity: 0;\n  transform: translateY(-10px);\n}\n\n.task-enter-active {\n  opacity: 1;\n  transform: translateY(0);\n  transition: opacity 300ms, transform 300ms;\n}\n\n.task-exit {\n  opacity: 1;\n}\n\n.task-exit-active {\n  opacity: 0;\n  transition: opacity 300ms;\n}\n\n/* 修复Ionic组件样式 */\nion-item {\n  --border-color: var(--ion-border-color, rgba(0, 0, 0, 0.1));\n}\n\nion-segment-button {\n  --color-checked: var(--ion-color-primary);\n  font-size: 15px;\n  --padding-top: 12px;\n  --padding-bottom: 12px;\n}\n\nion-checkbox {\n  --size: 20px;\n  margin-right: 16px;\n}\n\nion-fab-button {\n  --box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);\n}\n\n/* 暗黑模式适配 */\n@media (prefers-color-scheme: dark) {\n  .todo-item {\n    --background: rgba(var(--ion-color-dark-tint-rgb), 0.7);\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n  }\n  \n  .completed-header {\n    background: var(--ion-color-dark-tint);\n  }\n\n  .app-sidebar {\n    background: var(--ion-color-dark);\n  }\n\n  .category-item.active {\n    background: var(--ion-color-dark-tint);\n  }\n  \n  .category-filter {\n    background: var(--ion-color-dark);\n  }\n  \n  .category-tab {\n    background: rgba(var(--ion-color-dark-rgb), 0.6);\n  }\n  \n  .category-tab:hover {\n    background: rgba(var(--ion-color-dark-rgb), 0.8);\n  }\n  \n  .category-tab.active {\n    background: var(--ion-color-primary);\n  }\n  \n  .categories-dropdown {\n    background: var(--ion-color-dark);\n    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.4);\n  }\n  \n  .dropdown-item:hover {\n    background: rgba(var(--ion-color-dark-tint-rgb), 0.6);\n  }\n  \n  .dropdown-divider {\n    background: rgba(255, 255, 255, 0.1);\n  }\n  \n  .reorder-hint {\n    background: rgba(var(--ion-color-dark-tint-rgb), 0.7);\n  }\n  \n  .modal-header {\n    background: var(--ion-color-dark);\n    border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n  }\n\n  .modal-header-custom {\n    background: var(--ion-color-dark);\n    border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n  }\n}\n\n/* 拖动排序相关样式 */\n.reorder-handle {\n  cursor: grab;\n  min-width: 44px;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: rgba(var(--ion-color-medium-rgb), 0.15);\n  border-radius: 0 8px 8px 0;\n  margin-left: 8px;\n  position: relative;\n}\n\n.reorder-handle:active {\n  cursor: grabbing;\n}\n\n.reorder-handle ion-icon {\n  font-size: 24px;\n  color: var(--ion-color-medium);\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n\n.item-reorder-selected {\n  box-shadow: 0 0 10px rgba(var(--ion-color-primary-rgb), 0.3);\n}\n\n/* 筛选器和排序按钮区域 */\n.filter-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 8px;\n}\n\n.filter-header ion-segment {\n  flex: 1;\n}\n\n.category-filter {\n  padding: 12px 16px 4px;\n  background: var(--ion-color-light);\n  position: sticky;\n  top: 0;\n  z-index: 10;\n}\n\n.reorder-button {\n  margin-left: 8px;\n  font-weight: 500;\n}\n\n/* 拖动时的视觉反馈 */\nion-reorder-group .reorder-selected {\n  background: var(--ion-color-light-shade);\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\n/* 编辑页面底部按钮 */\n.edit-footer-buttons {\n  display: flex;\n  gap: 8px;\n  padding: 8px 16px;\n}\n\n.edit-footer-buttons ion-button {\n  flex: 1;\n}\n\n/* 拖动排序提示 */\n.reorder-hint {\n  text-align: center;\n  padding: 8px;\n  font-size: 14px;\n  color: var(--ion-color-medium);\n  background: rgba(var(--ion-color-light-rgb), 0.8);\n  margin: 0;\n  border-radius: 8px 8px 0 0;\n}\n\n.reorder-hint ion-icon {\n  margin-right: 4px;\n  vertical-align: middle;\n  font-size: 18px;\n}\n\n/* 路由页面过渡动画 */\n.page-transition-enter {\n  opacity: 0;\n  transform: translateX(100%);\n}\n\n.page-transition-enter-active {\n  opacity: 1;\n  transform: translateX(0);\n  transition: opacity 300ms, transform 300ms;\n}\n\n.page-transition-exit {\n  opacity: 1;\n  transform: translateX(0);\n}\n\n.page-transition-exit-active {\n  opacity: 0;\n  transform: translateX(-100%);\n  transition: opacity 300ms, transform 300ms;\n}\n\n/* 编辑页面样式增强 */\n.edit-page-content {\n  padding-bottom: 70px;\n}\n\n/* 自适应布局 - 双栏视图 */\n.app-container {\n  display: flex;\n  width: 100%;\n  height: 100%;\n}\n\n.app-sidebar {\n  display: none;\n  width: 250px;\n  background: var(--ion-color-light);\n  overflow-y: auto;\n  border-right: 1px solid var(--ion-border-color);\n}\n\n.app-main {\n  flex: 1;\n  width: 100%;\n  overflow-y: auto;\n  height: 100%;\n}\n\n.sidebar-header {\n  padding: 16px;\n  font-size: 18px;\n  font-weight: 600;\n  border-bottom: 1px solid var(--ion-border-color);\n}\n\n.category-list {\n  padding: 8px 0;\n}\n\n.category-item {\n  padding: 12px 16px;\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n}\n\n.category-item:hover {\n  background: rgba(var(--ion-color-primary-rgb), 0.1);\n}\n\n.category-item.active {\n  background: rgba(var(--ion-color-primary-rgb), 0.15);\n  font-weight: 500;\n}\n\n.category-item ion-icon {\n  margin-right: 12px;\n  font-size: 20px;\n}\n\n.category-count {\n  margin-left: auto;\n  background: rgba(var(--ion-color-medium-rgb), 0.2);\n  padding: 2px 8px;\n  border-radius: 12px;\n  font-size: 12px;\n}\n\n/* 自适应布局 - 宽屏显示双栏 */\n@media (min-width: 768px) {\n  .app-sidebar {\n    display: block;\n  }\n  \n  .mobile-category-filter {\n    display: none;\n  }\n}\n\n/* 移动端显示单栏 */\n@media (max-width: 767px) {\n  .app-sidebar {\n    display: none;\n  }\n  \n  .mobile-category-filter {\n    display: block;\n  }\n}\n\n/* 拖拽相关样式增强 */\n.draggable-item {\n  touch-action: pan-y;\n  user-select: none;\n  -webkit-user-drag: element;\n}\n\n.dragging {\n  opacity: 0.7;\n  transform: scale(1.02);\n  z-index: 999;\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);\n}\n\n.drag-over {\n  border-bottom: 2px solid var(--ion-color-primary);\n}\n\n/* 任务项拖动时的效果 */\n.todo-item.dragging {\n  background: rgba(var(--ion-color-primary-rgb), 0.1);\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.15);\n  z-index: 100;\n}\n\n/* 页面容器 */\n.todo-page-container {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  padding-top: 0;\n}\n\n.todo-page-content {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\n\n/* 分类选择器 */\n.category-selector {\n  padding: 8px 0;\n  background: var(--ion-background-color);\n  position: sticky;\n  top: 0;\n  z-index: 100;\n}\n\n.category-tabs {\n  display: flex;\n  overflow-x: auto;\n  scrollbar-width: none;\n  -ms-overflow-style: none;\n  padding: 0 12px;\n  white-space: nowrap;\n}\n\n.category-tabs::-webkit-scrollbar {\n  display: none;\n}\n\n.category-tab {\n  display: inline-flex;\n  align-items: center;\n  padding: 8px 12px;\n  margin: 0 4px;\n  border-radius: 20px;\n  background: rgba(var(--ion-color-medium-rgb), 0.1);\n  color: var(--ion-color-dark);\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  white-space: nowrap;\n}\n\n.category-tab:hover {\n  background: rgba(var(--ion-color-medium-rgb), 0.2);\n}\n\n.category-tab.active {\n  background: var(--ion-color-primary);\n  color: white;\n}\n\n.category-icon {\n  margin-right: 6px;\n  font-size: 16px;\n}\n\n.category-name {\n  margin-right: 6px;\n}\n\n.category-count {\n  background: rgba(255, 255, 255, 0.3);\n  padding: 2px 6px;\n  border-radius: 10px;\n  font-size: 12px;\n}\n\n.category-tab.active .category-count {\n  background: rgba(255, 255, 255, 0.3);\n}\n\n.more-categories-wrapper {\n  position: relative;\n}\n\n.more-button {\n  padding-right: 8px;\n}\n\n.dropdown-icon {\n  margin-left: 4px;\n  transition: transform 0.2s ease;\n}\n\n.dropdown-icon.open {\n  transform: rotate(180deg);\n}\n\n.categories-dropdown {\n  position: absolute;\n  top: 100%;\n  left: 0;\n  right: 0;\n  min-width: 200px;\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n  z-index: 1000;\n  margin-top: 8px;\n  overflow: hidden;\n}\n\n.dropdown-item {\n  display: flex;\n  align-items: center;\n  padding: 12px 16px;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n}\n\n.dropdown-item:hover {\n  background: rgba(var(--ion-color-light-rgb), 0.7);\n}\n\n.dropdown-item.active {\n  background: rgba(var(--ion-color-primary-rgb), 0.1);\n  color: var(--ion-color-primary);\n}\n\n.dropdown-divider {\n  height: 1px;\n  background: rgba(0, 0, 0, 0.1);\n  margin: 4px 0;\n}\n\n.manage-item {\n  color: var(--ion-color-primary);\n  font-weight: 500;\n}\n\n.manage-button {\n  width: 40px;\n  padding: 0;\n  justify-content: center;\n}\n\n/* 分类管理 */\n.modal-wrapper {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: var(--ion-background-color);\n  z-index: 1000;\n  display: flex;\n  flex-direction: column;\n}\n\n.category-add-form {\n  padding: 16px;\n  border-bottom: 1px solid var(--ion-border-color);\n}\n\n.category-input-item {\n  --padding-start: 16px;\n  --inner-padding-end: 8px;\n  --border-color: transparent;\n  --background: rgba(var(--ion-color-light-rgb), 0.5);\n  border-radius: 8px;\n  margin-bottom: 0;\n}\n\n.category-list-container {\n  padding: 8px 0;\n}\n\n.category-usage-count {\n  font-size: 12px;\n  color: var(--ion-color-medium);\n  margin-right: 16px;\n}\n\n.default-badge {\n  font-size: 12px;\n  padding: 2px 8px;\n  border-radius: 12px;\n  background: rgba(var(--ion-color-success-rgb), 0.1);\n  color: var(--ion-color-success);\n}\n\n/* 分类管理模态框 */\n.category-modal {\n  --height: 100%;\n  --width: 100%;\n}\n\n/* 自定义模态标题栏 */\n.modal-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 16px;\n  background: var(--ion-background-color);\n  border-bottom: 1px solid var(--ion-border-color);\n}\n\n.modal-header h2 {\n  font-size: 18px;\n  font-weight: 600;\n  margin: 0;\n}\n\n.header-left {\n  display: flex;\n  align-items: center;\n}\n\n.header-left h2 {\n  margin-left: 8px;\n}\n\n.modal-header ion-button {\n  --padding-start: 8px;\n  --padding-end: 8px;\n}\n\n/* 主内容区 */\n.main-content {\n  padding: 0 16px 16px;\n  --padding-start: 0;\n  --padding-end: 0;\n}\n\n/* 任务列表容器 */\n.todo-list {\n  background: transparent;\n  padding: 0;\n}\n\n/* 编辑页面容器 */\n.edit-page-container {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}",
  "utils/i18n.js": "import { createContext, useContext } from 'react';\nimport AppSdk from '@morphixai/app-sdk';\n\nexport const translations = {\n  zh: {\n    app: {\n      title: '任务',\n      loading: '加载中...',\n      processing: '处理中...',\n    },\n    categories: {\n      all: '全部',\n      work: '工作',\n      personal: '个人',\n      shopping: '购物',\n      study: '学习',\n      more: '更多',\n      manage: '管理分类',\n      default: '默认',\n      usageCount: '使用次数',\n    },\n    tasks: {\n      addTask: '添加任务',\n      addFirstTask: '添加第一个任务',\n      editTask: '编辑任务',\n      newTask: '添加新任务',\n      taskContent: '任务内容',\n      taskContentPlaceholder: '输入任务内容',\n      category: '分类',\n      selectCategory: '选择分类',\n      priority: '优先级',\n      normal: '普通',\n      important: '重要',\n      reminderTime: '提醒时间',\n      completed: '已完成',\n      pending: '未完成',\n      clear: '清除',\n      save: '保存',\n      cancel: '取消',\n      delete: '删除',\n      done: '完成',\n      noTasks: '暂无任务',\n      noTasksDesc: '点击右下角的\"+\"按钮添加新任务',\n      taskNotFound: '任务不存在',\n      taskNotFoundDesc: '找不到指定的任务',\n      backToHome: '返回主页',\n      reorderHint: '拖动可调整任务顺序',\n    },\n    categoryManager: {\n      title: '管理分类',\n      addCategory: '添加新分类',\n      newCategoryName: '输入新分类名称',\n      categoryName: '分类名称',\n      categoryNamePlaceholder: '输入新分类名称',\n      addingCategory: '添加中...',\n    },\n    messages: {\n      taskAdded: '任务已添加',\n      taskUpdated: '任务已更新',\n      taskDeleted: '任务已删除',\n      completedCleared: '已清除完成任务',\n      categoryAdded: '分类已添加',\n      categoryUpdated: '分类已更新',\n      categoryDeleted: '分类已删除',\n      orderUpdated: '任务顺序已更新',\n      emptyContent: '任务内容不能为空',\n      emptyCategoryName: '分类名称不能为空',\n      categoryExists: '分类名称已存在',\n      categoryInUse: '无法删除：有{count}个任务使用此分类',\n      loadCategoriesFailed: '加载分类失败，请重试',\n      addCategoryFailed: '添加分类失败，请重试',\n      updateCategoryFailed: '更新分类失败，请重试',\n      deleteCategoryFailed: '删除分类失败，请重试',\n      createTaskFailed: '创建任务失败，请重试',\n      updateTaskFailed: '更新任务失败，请重试',\n      updateStatusFailed: '更新任务状态失败，请重试',\n      updatePriorityFailed: '更新任务优先级失败，请重试',\n      deleteTaskFailed: '删除任务失败，请重试',\n      reorderFailed: '更新任务顺序失败，请重试',\n      clearCompletedFailed: '清理已完成任务失败，请重试',\n    },\n    confirmations: {\n      confirmDelete: '确认删除',\n      confirmClear: '确认清除',\n      deleteTask: '确定要删除任务\"{content}\"吗？',\n      deleteTaskGeneric: '确定要删除此任务吗？',\n      deleteCategory: '确定要删除分类\"{name}\"吗？',\n      deleteCategoryGeneric: '确定要删除此分类吗？',\n      clearCompleted: '确定要清除所有已完成的任务吗？(共{count}项)',\n    },\n  },\n  en: {\n    app: {\n      title: 'Tasks',\n      loading: 'Loading...',\n      processing: 'Processing...',\n    },\n    categories: {\n      all: 'All',\n      work: 'Work',\n      personal: 'Personal',\n      shopping: 'Shopping',\n      study: 'Study',\n      more: 'More',\n      manage: 'Manage Categories',\n      default: 'Default',\n      usageCount: 'Usage Count',\n    },\n    tasks: {\n      addTask: 'Add Task',\n      addFirstTask: 'Add First Task',\n      editTask: 'Edit Task',\n      newTask: 'Add New Task',\n      taskContent: 'Task Content',\n      taskContentPlaceholder: 'Enter task content',\n      category: 'Category',\n      selectCategory: 'Select Category',\n      priority: 'Priority',\n      normal: 'Normal',\n      important: 'Important',\n      reminderTime: 'Reminder Time',\n      completed: 'Completed',\n      pending: 'Pending',\n      clear: 'Clear',\n      save: 'Save',\n      cancel: 'Cancel',\n      delete: 'Delete',\n      done: 'Done',\n      noTasks: 'No Tasks',\n      noTasksDesc: 'Tap the \"+\" button at the bottom right to add a new task',\n      taskNotFound: 'Task Not Found',\n      taskNotFoundDesc: 'The specified task could not be found',\n      backToHome: 'Back to Home',\n      reorderHint: 'Drag to reorder tasks',\n    },\n    categoryManager: {\n      title: 'Manage Categories',\n      addCategory: 'Add New Category',\n      newCategoryName: 'Enter new category name',\n      categoryName: 'Category Name',\n      categoryNamePlaceholder: 'Enter new category name',\n      addingCategory: 'Adding...',\n    },\n    messages: {\n      taskAdded: 'Task added',\n      taskUpdated: 'Task updated',\n      taskDeleted: 'Task deleted',\n      completedCleared: 'Completed tasks cleared',\n      categoryAdded: 'Category added',\n      categoryUpdated: 'Category updated',\n      categoryDeleted: 'Category deleted',\n      orderUpdated: 'Task order updated',\n      emptyContent: 'Task content cannot be empty',\n      emptyCategoryName: 'Category name cannot be empty',\n      categoryExists: 'Category name already exists',\n      categoryInUse: 'Cannot delete: {count} task(s) using this category',\n      loadCategoriesFailed: 'Failed to load categories, please try again',\n      addCategoryFailed: 'Failed to add category, please try again',\n      updateCategoryFailed: 'Failed to update category, please try again',\n      deleteCategoryFailed: 'Failed to delete category, please try again',\n      createTaskFailed: 'Failed to create task, please try again',\n      updateTaskFailed: 'Failed to update task, please try again',\n      updateStatusFailed: 'Failed to update task status, please try again',\n      updatePriorityFailed: 'Failed to update task priority, please try again',\n      deleteTaskFailed: 'Failed to delete task, please try again',\n      reorderFailed: 'Failed to update task order, please try again',\n      clearCompletedFailed: 'Failed to clear completed tasks, please try again',\n    },\n    confirmations: {\n      confirmDelete: 'Confirm Delete',\n      confirmClear: 'Confirm Clear',\n      deleteTask: 'Are you sure you want to delete task \"{content}\"?',\n      deleteTaskGeneric: 'Are you sure you want to delete this task?',\n      deleteCategory: 'Are you sure you want to delete category \"{name}\"?',\n      deleteCategoryGeneric: 'Are you sure you want to delete this category?',\n      clearCompleted: 'Are you sure you want to clear all completed tasks? ({count} item(s))',\n    },\n  },\n};\n\nexport const LanguageContext = createContext({\n  language: 'en',\n  t: (key, params) => key,\n  setLanguage: () => {},\n});\n\nexport const useTranslation = () => {\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error('useTranslation must be used within LanguageProvider');\n  }\n  return context;\n};\n\nexport const getNestedValue = (obj, path) => {\n  return path.split('.').reduce((current, key) => current?.[key], obj);\n};\n\nexport const translate = (language, key, params = {}) => {\n  const translation = getNestedValue(translations[language], key);\n  \n  if (!translation) {\n    console.warn(`Translation missing for key: ${key} in language: ${language}`);\n    return key;\n  }\n  \n  if (typeof translation !== 'string') {\n    return translation;\n  }\n  \n  return Object.keys(params).reduce((text, param) => {\n    return text.replace(new RegExp(`\\\\{${param}\\\\}`, 'g'), params[param]);\n  }, translation);\n};\n\nexport const detectSystemLanguage = async () => {\n  try {\n    const systemLang = await AppSdk.getLanguage();\n    if (systemLang && systemLang.startsWith('zh')) {\n      return 'zh';\n    }\n    return 'en';\n  } catch (error) {\n    console.warn('Failed to detect system language, using English as default', error);\n    return 'en';\n  }\n};\n\nexport const getCategoryTranslation = (language, categoryName) => {\n  const categoryMap = {\n    '工作': 'categories.work',\n    '个人': 'categories.personal',\n    '购物': 'categories.shopping',\n    '学习': 'categories.study',\n    'Work': 'categories.work',\n    'Personal': 'categories.personal',\n    'Shopping': 'categories.shopping',\n    'Study': 'categories.study',\n  };\n  \n  const key = categoryMap[categoryName];\n  if (key) {\n    return translate(language, key);\n  }\n  \n  return categoryName;\n};\n\nexport const getDefaultCategories = (language) => {\n  return [\n    translate(language, 'categories.work'),\n    translate(language, 'categories.personal'),\n    translate(language, 'categories.shopping'),\n    translate(language, 'categories.study'),\n  ];\n};\n"
}